/******/ (() => {
  // webpackBootstrap
  /******/ 'use strict';
  /******/ var __webpack_modules__ = {
    /***/ './node_modules/animejs/lib/anime.esm.js':
      /*!***********************************************!*\
  !*** ./node_modules/animejs/lib/anime.esm.js ***!
  \***********************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ Animatable: () => /* binding */ Animatable,
          /* harmony export */ Draggable: () => /* binding */ Draggable,
          /* harmony export */ JSAnimation: () => /* binding */ JSAnimation,
          /* harmony export */ Scope: () => /* binding */ Scope,
          /* harmony export */ ScrollObserver: () =>
            /* binding */ ScrollObserver,
          /* harmony export */ Spring: () => /* binding */ Spring,
          /* harmony export */ Timeline: () => /* binding */ Timeline,
          /* harmony export */ Timer: () => /* binding */ Timer,
          /* harmony export */ WAAPIAnimation: () =>
            /* binding */ WAAPIAnimation,
          /* harmony export */ animate: () => /* binding */ animate,
          /* harmony export */ createAnimatable: () =>
            /* binding */ createAnimatable,
          /* harmony export */ createDraggable: () =>
            /* binding */ createDraggable,
          /* harmony export */ createScope: () => /* binding */ createScope,
          /* harmony export */ createSpring: () => /* binding */ createSpring,
          /* harmony export */ createTimeline: () =>
            /* binding */ createTimeline,
          /* harmony export */ createTimer: () => /* binding */ createTimer,
          /* harmony export */ eases: () => /* binding */ eases,
          /* harmony export */ engine: () => /* binding */ engine,
          /* harmony export */ onScroll: () => /* binding */ onScroll,
          /* harmony export */ scrollContainers: () =>
            /* binding */ scrollContainers,
          /* harmony export */ stagger: () => /* binding */ stagger,
          /* harmony export */ svg: () => /* binding */ svg,
          /* harmony export */ utils: () => /* binding */ utils,
          /* harmony export */ waapi: () => /* binding */ waapi,
          /* harmony export */
        });
        /**
         * anime.js - ESM
         * @version v4.0.2
         * @author Julian Garnier
         * @license MIT
         * @copyright (c) 2025 Julian Garnier
         * @see https://animejs.com
         */

        /**
         * @typedef {Object} DefaultsParams
         * @property {Number|String} [id]
         * @property {PercentageKeyframes|DurationKeyframes} [keyframes]
         * @property {EasingParam} [playbackEase]
         * @property {Number} [playbackRate]
         * @property {Number} [frameRate]
         * @property {Number|Boolean} [loop]
         * @property {Boolean} [reversed]
         * @property {Boolean} [alternate]
         * @property {Boolean|ScrollObserver} [autoplay]
         * @property {Number|FunctionValue} [duration]
         * @property {Number|FunctionValue} [delay]
         * @property {Number} [loopDelay]
         * @property {EasingParam} [ease]
         * @property {'none'|'replace'|'blend'|compositionTypes} [composition]
         * @property {(v: any) => any} [modifier]
         * @property {(tickable: Tickable) => void} [onBegin]
         * @property {(tickable: Tickable) => void} [onBeforeUpdate]
         * @property {(tickable: Tickable) => void} [onUpdate]
         * @property {(tickable: Tickable) => void} [onLoop]
         * @property {(tickable: Tickable) => void} [onPause]
         * @property {(tickable: Tickable) => void} [onComplete]
         * @property {(renderable: Renderable) => void} [onRender]
         */

        /** @typedef {JSAnimation|Timeline} Renderable */
        /** @typedef {Timer|Renderable} Tickable */
        /** @typedef {Timer&JSAnimation&Timeline} CallbackArgument */
        /** @typedef {Animatable|Tickable|Draggable|ScrollObserver|Scope} Revertible */

        /**
         * @typedef {Object} DraggableAxisParam
         * @property {String} [mapTo]
         * @property {TweenModifier} [modifier]
         * @property {TweenComposition} [composition]
         * @property {Number|Array<Number>|((draggable: Draggable) => Number|Array<Number>)} [snap]
         */

        /**
         * @typedef {Object} DraggableCursorParams
         * @property {String} [onHover]
         * @property {String} [onGrab]
         */

        /**
         * @typedef {Object} DraggableParams
         * @property {DOMTargetSelector} [trigger]
         * @property {DOMTargetSelector|Array<Number>|((draggable: Draggable) => DOMTargetSelector|Array<Number>)} [container]
         * @property {Boolean|DraggableAxisParam} [x]
         * @property {Boolean|DraggableAxisParam} [y]
         * @property {TweenModifier} [modifier]
         * @property {Number|Array<Number>|((draggable: Draggable) => Number|Array<Number>)} [snap]
         * @property {Number|Array<Number>|((draggable: Draggable) => Number|Array<Number>)} [containerPadding]
         * @property {Number|((draggable: Draggable) => Number)} [containerFriction]
         * @property {Number|((draggable: Draggable) => Number)} [releaseContainerFriction]
         * @property {Number|((draggable: Draggable) => Number)} [dragSpeed]
         * @property {Number|((draggable: Draggable) => Number)} [scrollSpeed]
         * @property {Number|((draggable: Draggable) => Number)} [scrollThreshold]
         * @property {Number|((draggable: Draggable) => Number)} [minVelocity]
         * @property {Number|((draggable: Draggable) => Number)} [maxVelocity]
         * @property {Number|((draggable: Draggable) => Number)} [velocityMultiplier]
         * @property {Number} [releaseMass]
         * @property {Number} [releaseStiffness]
         * @property {Number} [releaseDamping]
         * @property {Boolean} [releaseDamping]
         * @property {EasingParam} [releaseEase]
         * @property {Boolean|DraggableCursorParams|((draggable: Draggable) => Boolean|DraggableCursorParams)} [cursor]
         * @property {Callback<Draggable>} [onGrab]
         * @property {Callback<Draggable>} [onDrag]
         * @property {Callback<Draggable>} [onRelease]
         * @property {Callback<Draggable>} [onUpdate]
         * @property {Callback<Draggable>} [onSettle]
         * @property {Callback<Draggable>} [onSnap]
         * @property {Callback<Draggable>} [onResize]
         * @property {Callback<Draggable>} [onAfterResize]
         */

        /**
         * @typedef {SVGGeometryElement & {
         *   setAttribute(name: 'draw', value: `${number} ${number}`): void;
         *   draw: `${number} ${number}`;
         * }} DrawableSVGGeometry
         */

        /**
         * @callback EasingFunction
         * @param {Number} time
         * @return {Number}
         */

        /**
         * @typedef {('linear'|'linear(x1, x2 25%, x3)'|'in'|'out'|'inOut'|'inQuad'|'outQuad'|'inOutQuad'|'inCubic'|'outCubic'|'inOutCubic'|'inQuart'|'outQuart'|'inOutQuart'|'inQuint'|'outQuint'|'inOutQuint'|'inSine'|'outSine'|'inOutSine'|'inCirc'|'outCirc'|'inOutCirc'|'inExpo'|'outExpo'|'inOutExpo'|'inBounce'|'outBounce'|'inOutBounce'|'inBack'|'outBack'|'inOutBack'|'inElastic'|'outElastic'|'inOutElastic'|'irregular'|'cubicBezier'|'steps'|'in(p = 1.675)'|'out(p = 1.675)'|'inOut(p = 1.675)'|'inBack(overshoot = 1.70158)'|'outBack(overshoot = 1.70158)'|'inOutBack(overshoot = 1.70158)'|'inElastic(amplitude = 1, period = .3)'|'outElastic(amplitude = 1, period = .3)'|'inOutElastic(amplitude = 1, period = .3)'|'irregular(length = 10, randomness = 1)'|'cubicBezier(x1, y1, x2, y2)'|'steps(steps = 10)')} EaseStringParamNames
         */

        // A hack to get both ease names suggestions AND allow any strings
        // https://github.com/microsoft/TypeScript/issues/29729#issuecomment-460346421
        /** @typedef {(String & {})|EaseStringParamNames|EasingFunction|Spring} EasingParam */

        /** @typedef {HTMLElement|SVGElement} DOMTarget */
        /** @typedef {Record<String, any>} JSTarget */
        /** @typedef {DOMTarget|JSTarget} Target */
        /** @typedef {Target|NodeList|String} TargetSelector */
        /** @typedef {DOMTarget|NodeList|String} DOMTargetSelector */
        /** @typedef {Array.<DOMTargetSelector>|DOMTargetSelector} DOMTargetsParam */
        /** @typedef {Array.<DOMTarget>} DOMTargetsArray */
        /** @typedef {Array.<JSTarget>|JSTarget} JSTargetsParam */
        /** @typedef {Array.<JSTarget>} JSTargetsArray */
        /** @typedef {Array.<TargetSelector>|TargetSelector} TargetsParam */
        /** @typedef {Array.<Target>} TargetsArray */

        /**
         * @callback FunctionValue
         * @param {Target} target - The animated target
         * @param {Number} index - The target index
         * @param {Number} length - The total number of animated targets
         * @return {Number|String|TweenObjectValue|Array.<Number|String|TweenObjectValue>}
         */

        /**
         * @callback TweenModifier
         * @param {Number} value - The animated value
         * @return {Number|String}
         */

        /** @typedef {[Number, Number, Number, Number]} ColorArray */

        /**
         * @template T
         * @callback Callback
         * @param {T} self - Returns itself
         * @param {PointerEvent} [e]
         * @return {*}
         */

        /**
         * @template {object} T
         * @typedef {Object} TickableCallbacks
         * @property {Callback<T>} [onBegin]
         * @property {Callback<T>} [onBeforeUpdate]
         * @property {Callback<T>} [onUpdate]
         * @property {Callback<T>} [onLoop]
         * @property {Callback<T>} [onPause]
         * @property {Callback<T>} [onComplete]
         */

        /**
         * @template {object} T
         * @typedef {Object} RenderableCallbacks
         * @property {Callback<T>} [onRender]
         */

        /**
         * @typedef {Object} Tween
         * @property {Number} id
         * @property {JSAnimation} parent
         * @property {String} property
         * @property {Target} target
         * @property {String|Number} _value
         * @property {Function|null} _func
         * @property {EasingFunction} _ease
         * @property {Array.<Number>} _fromNumbers
         * @property {Array.<Number>} _toNumbers
         * @property {Array.<String>} _strings
         * @property {Number} _fromNumber
         * @property {Number} _toNumber
         * @property {Array.<Number>} _numbers
         * @property {Number} _number
         * @property {String} _unit
         * @property {TweenModifier} _modifier
         * @property {Number} _currentTime
         * @property {Number} _delay
         * @property {Number} _updateDuration
         * @property {Number} _startTime
         * @property {Number} _changeDuration
         * @property {Number} _absoluteStartTime
         * @property {tweenTypes} _tweenType
         * @property {valueTypes} _valueType
         * @property {Number} _composition
         * @property {Number} _isOverlapped
         * @property {Number} _isOverridden
         * @property {Number} _renderTransforms
         * @property {Tween} _prevRep
         * @property {Tween} _nextRep
         * @property {Tween} _prevAdd
         * @property {Tween} _nextAdd
         * @property {Tween} _prev
         * @property {Tween} _next
         */

        /**
         * @typedef TweenDecomposedValue
         * @property {Number} t - Type
         * @property {Number} n - Single number value
         * @property {String} u - Value unit
         * @property {String} o - Value operator
         * @property {Array.<Number>} d - Array of Numbers (in case of complex value type)
         * @property {Array.<String>} s - Strings (in case of complex value type)
         */

        /** @typedef {{_head: null|Tween, _tail: null|Tween}} TweenPropertySiblings */
        /** @typedef {Record<String, TweenPropertySiblings>} TweenLookups */
        /** @typedef {WeakMap.<Target, TweenLookups>} TweenReplaceLookups */
        /** @typedef {Map.<Target, TweenLookups>} TweenAdditiveLookups */

        /**
         * @typedef {Object} TimerOptions
         * @property {Number|String} [id]
         * @property {TweenParamValue} [duration]
         * @property {TweenParamValue} [delay]
         * @property {Number} [loopDelay]
         * @property {Boolean} [reversed]
         * @property {Boolean} [alternate]
         * @property {Boolean|Number} [loop]
         * @property {Boolean|ScrollObserver} [autoplay]
         * @property {Number} [frameRate]
         * @property {Number} [playbackRate]
         */

        /**

/**
 * @typedef {TimerOptions & TickableCallbacks<Timer>} TimerParams
 */

        /**
         * @typedef {Number|String|FunctionValue} TweenParamValue
         */

        /**
         * @typedef {TweenParamValue|[TweenParamValue, TweenParamValue]} TweenPropValue
         */

        /**
         * @typedef {(String & {})|'none'|'replace'|'blend'|compositionTypes} TweenComposition
         */

        /**
         * @typedef {Object} TweenParamsOptions
         * @property {TweenParamValue} [duration]
         * @property {TweenParamValue} [delay]
         * @property {EasingParam} [ease]
         * @property {TweenModifier} [modifier]
         * @property {TweenComposition} [composition]
         */

        /**
         * @typedef {Object} TweenValues
         * @property {TweenParamValue} [from]
         * @property {TweenPropValue} [to]
         * @property {TweenPropValue} [fromTo]
         */

        /**
         * @typedef {TweenParamsOptions & TweenValues} TweenKeyValue
         */

        /**
         * @typedef {Array.<TweenKeyValue|TweenPropValue>} ArraySyntaxValue
         */

        /**
         * @typedef {TweenParamValue|ArraySyntaxValue|TweenKeyValue} TweenOptions
         */

        /**
         * @typedef {Partial<{to: TweenParamValue|Array.<TweenParamValue>; from: TweenParamValue|Array.<TweenParamValue>; fromTo: TweenParamValue|Array.<TweenParamValue>;}>} TweenObjectValue
         */

        /**
         * @typedef {Object} PercentageKeyframeOptions
         * @property {EasingParam} [ease]
         */

        /**
         * @typedef {Record<String, TweenParamValue>} PercentageKeyframeParams
         */

        /**
         * @typedef {Record<String, PercentageKeyframeParams & PercentageKeyframeOptions>} PercentageKeyframes
         */

        /**
         * @typedef {Array<Record<String, TweenOptions | TweenModifier | boolean> & TweenParamsOptions>} DurationKeyframes
         */

        /**
         * @typedef {Object} AnimationOptions
         * @property {PercentageKeyframes|DurationKeyframes} [keyframes]
         * @property {EasingParam} [playbackEase]
         */

        // TODO: Currently setting TweenModifier to the intersected Record<> makes the FunctionValue type target param any if only one parameter is set
        /**
         * @typedef {Record<String, TweenOptions | Callback<JSAnimation> | TweenModifier | boolean | PercentageKeyframes | DurationKeyframes | ScrollObserver> & TimerOptions & AnimationOptions & TweenParamsOptions & TickableCallbacks<JSAnimation> & RenderableCallbacks<JSAnimation>} AnimationParams
         */

        /**
         * @typedef {Object} TimelineOptions
         * @property {DefaultsParams} [defaults]
         * @property {EasingParam} [playbackEase]
         */

        /**
         * @typedef {TimerOptions & TimelineOptions & TickableCallbacks<Timeline> & RenderableCallbacks<Timeline>} TimelineParams
         */

        /**
         * @callback AnimatablePropertySetter
         * @param  {Number|Array.<Number>} to
         * @param  {Number} [duration]
         * @param  {EasingParam} [ease]
         * @return {AnimatableObject}
         */

        /**
         * @callback AnimatablePropertyGetter
         * @return {Number|Array.<Number>}
         */

        /**
         * @typedef {AnimatablePropertySetter & AnimatablePropertyGetter} AnimatableProperty
         */

        /**
         * @typedef {Animatable & Record<String, AnimatableProperty>} AnimatableObject
         */

        /**
         * @typedef {Object} AnimatablePropertyParamsOptions
         * @property {String} [unit]
         * @property {TweenParamValue} [duration]
         * @property {EasingParam} [ease]
         * @property {TweenModifier} [modifier]
         * @property {TweenComposition} [composition]
         */

        /**
         * @typedef {Record<String, TweenParamValue | EasingParam | TweenModifier | TweenComposition | AnimatablePropertyParamsOptions> & AnimatablePropertyParamsOptions} AnimatableParams
         */

        // Environments

        // TODO: Do we need to check if we're running inside a worker ?
        const isBrowser = typeof window !== 'undefined';

        /** @type {Object|Null} */
        const win = isBrowser ? window : null;

        /** @type {Document} */
        const doc = isBrowser ? document : null;

        // Enums

        /** @enum {Number} */
        const tweenTypes = {
          OBJECT: 0,
          ATTRIBUTE: 1,
          CSS: 2,
          TRANSFORM: 3,
          CSS_VAR: 4,
        };

        /** @enum {Number} */
        const valueTypes = {
          NUMBER: 0,
          UNIT: 1,
          COLOR: 2,
          COMPLEX: 3,
        };

        /** @enum {Number} */
        const tickModes = {
          NONE: 0,
          AUTO: 1,
          FORCE: 2,
        };

        /** @enum {Number} */
        const compositionTypes = {
          replace: 0,
          none: 1,
          blend: 2,
        };

        // Cache symbols

        const isRegisteredTargetSymbol = Symbol();
        const isDomSymbol = Symbol();
        const isSvgSymbol = Symbol();
        const transformsSymbol = Symbol();
        const morphPointsSymbol = Symbol();
        const proxyTargetSymbol = Symbol();

        // Numbers

        const minValue = 1e-11;
        const maxValue = 1e12;
        const K = 1e3;
        const maxFps = 120;

        // Strings

        const emptyString = '';
        const shortTransforms = new Map();

        shortTransforms.set('x', 'translateX');
        shortTransforms.set('y', 'translateY');
        shortTransforms.set('z', 'translateZ');

        const validTransforms = [
          'translateX',
          'translateY',
          'translateZ',
          'rotate',
          'rotateX',
          'rotateY',
          'rotateZ',
          'scale',
          'scaleX',
          'scaleY',
          'scaleZ',
          'skew',
          'skewX',
          'skewY',
          'perspective',
          'matrix',
          'matrix3d',
        ];

        const transformsFragmentStrings = validTransforms.reduce(
          (a, v) => ({ ...a, [v]: v + '(' }),
          {},
        );

        // Functions

        /** @return {void} */
        const noop = () => {};

        // Regex

        const hexTestRgx = /(^#([\da-f]{3}){1,2}$)|(^#([\da-f]{4}){1,2}$)/i;
        const rgbExecRgx = /rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/i;
        const rgbaExecRgx =
          /rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(-?\d+|-?\d*.\d+)\s*\)/i;
        const hslExecRgx =
          /hsl\(\s*(-?\d+|-?\d*.\d+)\s*,\s*(-?\d+|-?\d*.\d+)%\s*,\s*(-?\d+|-?\d*.\d+)%\s*\)/i;
        const hslaExecRgx =
          /hsla\(\s*(-?\d+|-?\d*.\d+)\s*,\s*(-?\d+|-?\d*.\d+)%\s*,\s*(-?\d+|-?\d*.\d+)%\s*,\s*(-?\d+|-?\d*.\d+)\s*\)/i;
        // export const digitWithExponentRgx = /[-+]?\d*\.?\d+(?:[eE][-+]?\d+)?/g;
        const digitWithExponentRgx = /[-+]?\d*\.?\d+(?:e[-+]?\d)?/gi;
        // export const unitsExecRgx = /^([-+]?\d*\.?\d+(?:[eE][-+]?\d+)?)+([a-z]+|%)$/i;
        const unitsExecRgx = /^([-+]?\d*\.?\d+(?:e[-+]?\d+)?)([a-z]+|%)$/i;
        const lowerCaseRgx = /([a-z])([A-Z])/g;
        const transformsExecRgx = /(\w+)(\([^)]+\)+)/g; // Match inline transforms with cacl() values, returns the value wrapped in ()
        const relativeValuesExecRgx = /(\*=|\+=|-=)/;

        /** @type {DefaultsParams} */
        const defaults = {
          id: null,
          keyframes: null,
          playbackEase: null,
          playbackRate: 1,
          frameRate: maxFps,
          loop: 0,
          reversed: false,
          alternate: false,
          autoplay: true,
          duration: K,
          delay: 0,
          loopDelay: 0,
          ease: 'out(2)',
          composition: compositionTypes.replace,
          modifier: (v) => v,
          onBegin: noop,
          onBeforeUpdate: noop,
          onUpdate: noop,
          onLoop: noop,
          onPause: noop,
          onComplete: noop,
          onRender: noop,
        };

        const globals = {
          /** @type {DefaultsParams} */
          defaults,
          /** @type {Document|DOMTarget} */
          root: doc,
          /** @type {Scope} */
          scope: null,
          /** @type {Number} */
          precision: 4,
          /** @type {Number} */
          timeScale: 1,
          /** @type {Number} */
          tickThreshold: 200,
        };

        const globalVersions = { version: '4.0.2', engine: null };

        if (isBrowser) {
          if (!win.AnimeJS) win.AnimeJS = [];
          win.AnimeJS.push(globalVersions);
        }

        // Strings

        /**
         * @param  {String} str
         * @return {String}
         */
        const toLowerCase = (str) =>
          str.replace(lowerCaseRgx, '$1-$2').toLowerCase();

        /**
         * Prioritize this method instead of regex when possible
         * @param  {String} str
         * @param  {String} sub
         * @return {Boolean}
         */
        const stringStartsWith = (str, sub) => str.indexOf(sub) === 0;

        // Time
        // Note: Date.now is used instead of performance.now since it is precise enough for timings calculations, performs slightly faster and works in Node.js environement.
        const now = Date.now;

        // Types checkers

        const isArr = Array.isArray;
        /**@param {any} a @return {a is Record<String, any>} */
        const isObj = (a) => a && a.constructor === Object;
        /**@param {any} a @return {a is Number} */
        const isNum = (a) => typeof a === 'number' && !isNaN(a);
        /**@param {any} a @return {a is String} */
        const isStr = (a) => typeof a === 'string';
        /**@param {any} a @return {a is Function} */
        const isFnc = (a) => typeof a === 'function';
        /**@param {any} a @return {a is undefined} */
        const isUnd = (a) => typeof a === 'undefined';
        /**@param {any} a @return {a is null | undefined} */
        const isNil = (a) => isUnd(a) || a === null;
        /**@param {any} a @return {a is SVGElement} */
        const isSvg = (a) => isBrowser && a instanceof SVGElement;
        /**@param {any} a @return {Boolean} */
        const isHex = (a) => hexTestRgx.test(a);
        /**@param {any} a @return {Boolean} */
        const isRgb = (a) => stringStartsWith(a, 'rgb');
        /**@param {any} a @return {Boolean} */
        const isHsl = (a) => stringStartsWith(a, 'hsl');
        /**@param {any} a @return {Boolean} */
        const isCol = (a) => isHex(a) || isRgb(a) || isHsl(a);
        /**@param {any} a @return {Boolean} */
        const isKey = (a) => !globals.defaults.hasOwnProperty(a);

        // Number

        /**
         * @param  {Number|String} str
         * @return {Number}
         */
        const parseNumber = (str) =>
          isStr(str)
            ? parseFloat(/** @type {String} */ (str))
            : /** @type {Number} */ (str);

        // Math

        const pow = Math.pow;
        const sqrt = Math.sqrt;
        const sin = Math.sin;
        const cos = Math.cos;
        const abs = Math.abs;
        const exp = Math.exp;
        const ceil = Math.ceil;
        const floor = Math.floor;
        const asin = Math.asin;
        const max = Math.max;
        const atan2 = Math.atan2;
        const PI = Math.PI;
        const _round = Math.round;

        /**
         * @param  {Number} v
         * @param  {Number} min
         * @param  {Number} max
         * @return {Number}
         */
        const clamp = (v, min, max) => (v < min ? min : v > max ? max : v);

        const powCache = {};

        /**
         * @param  {Number} v
         * @param  {Number} decimalLength
         * @return {Number}
         */
        const round = (v, decimalLength) => {
          if (decimalLength < 0) return v;
          if (!decimalLength) return _round(v);
          let p = powCache[decimalLength];
          if (!p) p = powCache[decimalLength] = 10 ** decimalLength;
          return _round(v * p) / p;
        };

        /**
         * @param  {Number} v
         * @param  {Number|Array<Number>} increment
         * @return {Number}
         */
        const snap = (v, increment) =>
          isArr(increment)
            ? increment.reduce((closest, cv) =>
                abs(cv - v) < abs(closest - v) ? cv : closest,
              )
            : increment
              ? _round(v / increment) * increment
              : v;

        /**
         * @param  {Number} start
         * @param  {Number} end
         * @param  {Number} progress
         * @return {Number}
         */
        const interpolate = (start, end, progress) =>
          start + (end - start) * progress;

        /**
         * @param  {Number} v
         * @return {Number}
         */
        const clampInfinity = (v) =>
          v === Infinity ? maxValue : v === -Infinity ? -1e12 : v;

        /**
         * @param  {Number} v
         * @return {Number}
         */
        const normalizeTime = (v) =>
          v <= minValue ? minValue : clampInfinity(round(v, 11));

        // Arrays

        /**
         * @template T
         * @param {T[]} a
         * @return {T[]}
         */
        const cloneArray = (a) => (isArr(a) ? [...a] : a);

        // Objects

        /**
         * @template T
         * @template U
         * @param {T} o1
         * @param {U} o2
         * @return {T & U}
         */
        const mergeObjects = (o1, o2) => {
          const merged = /** @type {T & U} */ ({ ...o1 });
          for (let p in o2) {
            const o1p = /** @type {T & U} */ (o1)[p];
            merged[p] = isUnd(o1p) ? /** @type {T & U} */ (o2)[p] : o1p;
          }
          return merged;
        };

        // Linked lists

        /**
         * @param {Object} parent
         * @param {Function} callback
         * @param {Boolean} [reverse]
         * @param {String} [prevProp]
         * @param {String} [nextProp]
         * @return {void}
         */
        const forEachChildren = (
          parent,
          callback,
          reverse,
          prevProp = '_prev',
          nextProp = '_next',
        ) => {
          let next = parent._head;
          let adjustedNextProp = nextProp;
          if (reverse) {
            next = parent._tail;
            adjustedNextProp = prevProp;
          }
          while (next) {
            const currentNext = next[adjustedNextProp];
            callback(next);
            next = currentNext;
          }
        };

        /**
         * @param  {Object} parent
         * @param  {Object} child
         * @param  {String} [prevProp]
         * @param  {String} [nextProp]
         * @return {void}
         */
        const removeChild = (
          parent,
          child,
          prevProp = '_prev',
          nextProp = '_next',
        ) => {
          const prev = child[prevProp];
          const next = child[nextProp];
          prev ? (prev[nextProp] = next) : (parent._head = next);
          next ? (next[prevProp] = prev) : (parent._tail = prev);
          child[prevProp] = null;
          child[nextProp] = null;
        };

        /**
         * @param  {Object} parent
         * @param  {Object} child
         * @param  {Function} [sortMethod]
         * @param  {String} prevProp
         * @param  {String} nextProp
         * @return {void}
         */
        const addChild = (
          parent,
          child,
          sortMethod,
          prevProp = '_prev',
          nextProp = '_next',
        ) => {
          let prev = parent._tail;
          while (prev && sortMethod && sortMethod(prev, child))
            prev = prev[prevProp];
          const next = prev ? prev[nextProp] : parent._head;
          prev ? (prev[nextProp] = child) : (parent._head = child);
          next ? (next[prevProp] = child) : (parent._tail = child);
          child[prevProp] = prev;
          child[nextProp] = next;
        };

        /*
         * Base class to control framerate and playback rate.
         * Inherited by Engine, Timer, Animation and Timeline.
         */
        class Clock {
          /** @param {Number} [initTime] */
          constructor(initTime = 0) {
            /** @type {Number} */
            this.deltaTime = 0;
            /** @type {Number} */
            this._currentTime = initTime;
            /** @type {Number} */
            this._elapsedTime = initTime;
            /** @type {Number} */
            this._startTime = initTime;
            /** @type {Number} */
            this._lastTime = initTime;
            /** @type {Number} */
            this._scheduledTime = 0;
            /** @type {Number} */
            this._frameDuration = round(K / maxFps, 0);
            /** @type {Number} */
            this._fps = maxFps;
            /** @type {Number} */
            this._speed = 1;
            /** @type {Boolean} */
            this._hasChildren = false;
            /** @type {Tickable|Tween} */
            this._head = null;
            /** @type {Tickable|Tween} */
            this._tail = null;
          }

          get fps() {
            return this._fps;
          }

          set fps(frameRate) {
            const previousFrameDuration = this._frameDuration;
            const fr = +frameRate;
            const fps = fr < minValue ? minValue : fr;
            const frameDuration = round(K / fps, 0);
            this._fps = fps;
            this._frameDuration = frameDuration;
            this._scheduledTime += frameDuration - previousFrameDuration;
          }

          get speed() {
            return this._speed;
          }

          set speed(playbackRate) {
            const pbr = +playbackRate;
            this._speed = pbr < minValue ? minValue : pbr;
          }

          /**
           * @param  {Number} time
           * @return {tickModes}
           */
          requestTick(time) {
            const scheduledTime = this._scheduledTime;
            const elapsedTime = this._elapsedTime;
            this._elapsedTime += time - elapsedTime;
            // If the elapsed time is lower than the scheduled time
            // this means not enough time has passed to hit one frameDuration
            // so skip that frame
            if (elapsedTime < scheduledTime) return tickModes.NONE;
            const frameDuration = this._frameDuration;
            const frameDelta = elapsedTime - scheduledTime;
            // Ensures that _scheduledTime progresses in steps of at least 1 frameDuration.
            // Skips ahead if the actual elapsed time is higher.
            this._scheduledTime +=
              frameDelta < frameDuration ? frameDuration : frameDelta;
            return tickModes.AUTO;
          }

          /**
           * @param  {Number} time
           * @return {Number}
           */
          computeDeltaTime(time) {
            const delta = time - this._lastTime;
            this.deltaTime = delta;
            this._lastTime = time;
            return delta;
          }
        }

        /**
         * @param  {Tickable} tickable
         * @param  {Number} time
         * @param  {Number} muteCallbacks
         * @param  {Number} internalRender
         * @param  {tickModes} tickMode
         * @return {Number}
         */
        const render = (
          tickable,
          time,
          muteCallbacks,
          internalRender,
          tickMode,
        ) => {
          const parent = tickable.parent;
          const duration = tickable.duration;
          const completed = tickable.completed;
          const iterationDuration = tickable.iterationDuration;
          const iterationCount = tickable.iterationCount;
          const _currentIteration = tickable._currentIteration;
          const _loopDelay = tickable._loopDelay;
          const _reversed = tickable._reversed;
          const _alternate = tickable._alternate;
          const _hasChildren = tickable._hasChildren;
          const tickableDelay = tickable._delay;
          const tickablePrevAbsoluteTime = tickable._currentTime; // TODO: rename ._currentTime to ._absoluteCurrentTime

          const tickableEndTime = tickableDelay + iterationDuration;
          const tickableAbsoluteTime = time - tickableDelay;
          const tickablePrevTime = clamp(
            tickablePrevAbsoluteTime,
            -tickableDelay,
            duration,
          );
          const tickableCurrentTime = clamp(
            tickableAbsoluteTime,
            -tickableDelay,
            duration,
          );
          const deltaTime = tickableAbsoluteTime - tickablePrevAbsoluteTime;
          const isCurrentTimeAboveZero = tickableCurrentTime > 0;
          const isCurrentTimeEqualOrAboveDuration =
            tickableCurrentTime >= duration;
          const isSetter = duration <= minValue;
          const forcedTick = tickMode === tickModes.FORCE;

          let isOdd = 0;
          let iterationElapsedTime = tickableAbsoluteTime;
          // Render checks
          // Used to also check if the children have rendered in order to trigger the onRender callback on the parent timer
          let hasRendered = 0;

          // Execute the "expensive" iterations calculations only when necessary
          if (iterationCount > 1) {
            // bitwise NOT operator seems to be generally faster than Math.floor() across browsers
            const currentIteration = ~~(
              tickableCurrentTime /
              (iterationDuration +
                (isCurrentTimeEqualOrAboveDuration ? 0 : _loopDelay))
            );
            tickable._currentIteration = clamp(
              currentIteration,
              0,
              iterationCount,
            );
            // Prevent the iteration count to go above the max iterations when reaching the end of the animation
            if (isCurrentTimeEqualOrAboveDuration) tickable._currentIteration--;
            isOdd = tickable._currentIteration % 2;
            iterationElapsedTime =
              tickableCurrentTime % (iterationDuration + _loopDelay) || 0;
          }

          // Checks if exactly one of _reversed and (_alternate && isOdd) is true
          const isReversed = _reversed ^ (_alternate && isOdd);
          const _ease = /** @type {Renderable} */ (tickable)._ease;
          let iterationTime = isCurrentTimeEqualOrAboveDuration
            ? isReversed
              ? 0
              : duration
            : isReversed
              ? iterationDuration - iterationElapsedTime
              : iterationElapsedTime;
          if (_ease)
            iterationTime =
              iterationDuration * _ease(iterationTime / iterationDuration) || 0;
          const isRunningBackwards = (
            parent
              ? parent.backwards
              : tickableAbsoluteTime < tickablePrevAbsoluteTime
          )
            ? !isReversed
            : !!isReversed;

          tickable._currentTime = tickableAbsoluteTime;
          tickable._iterationTime = iterationTime;
          tickable.backwards = isRunningBackwards;

          if (isCurrentTimeAboveZero && !tickable.began) {
            tickable.began = true;
            if (
              !muteCallbacks &&
              !(parent && (isRunningBackwards || !parent.began))
            ) {
              tickable.onBegin(/** @type {CallbackArgument} */ (tickable));
            }
          } else if (tickableAbsoluteTime <= 0) {
            tickable.began = false;
          }

          // Only triggers onLoop for tickable without children, otherwise call the the onLoop callback in the tick function
          // Make sure to trigger the onLoop before rendering to allow .refresh() to pickup the current values
          if (
            !muteCallbacks &&
            !_hasChildren &&
            isCurrentTimeAboveZero &&
            tickable._currentIteration !== _currentIteration
          ) {
            tickable.onLoop(/** @type {CallbackArgument} */ (tickable));
          }

          if (
            forcedTick ||
            (tickMode === tickModes.AUTO &&
              ((time >= tickableDelay && time <= tickableEndTime) || // Normal render
                (time <= tickableDelay && tickablePrevTime > tickableDelay) || // Playhead is before the animation start time so make sure the animation is at its initial state
                (time >= tickableEndTime && tickablePrevTime !== duration))) || // Playhead is after the animation end time so make sure the animation is at its end state
            (iterationTime >= tickableEndTime &&
              tickablePrevTime !== duration) ||
            (iterationTime <= tickableDelay && tickablePrevTime > 0) ||
            (time <= tickablePrevTime &&
              tickablePrevTime === duration &&
              completed) || // Force a render if a seek occurs on an completed animation
            (isCurrentTimeEqualOrAboveDuration && !completed && isSetter) // This prevents 0 duration tickables to be skipped
          ) {
            if (isCurrentTimeAboveZero) {
              // Trigger onUpdate callback before rendering
              tickable.computeDeltaTime(tickablePrevTime);
              if (!muteCallbacks)
                tickable.onBeforeUpdate(
                  /** @type {CallbackArgument} */ (tickable),
                );
            }

            // Start tweens rendering
            if (!_hasChildren) {
              // Time has jumped more than globals.tickThreshold so consider this tick manual
              const forcedRender =
                forcedTick ||
                (isRunningBackwards ? deltaTime * -1 : deltaTime) >=
                  globals.tickThreshold;
              const absoluteTime =
                tickable._offset +
                (parent ? parent._offset : 0) +
                tickableDelay +
                iterationTime;

              // Only Animation can have tweens, Timer returns undefined
              let tween = /** @type {Tween} */ (
                /** @type {JSAnimation} */ (tickable)._head
              );
              let tweenTarget;
              let tweenStyle;
              let tweenTargetTransforms;
              let tweenTargetTransformsProperties;
              let tweenTransformsNeedUpdate = 0;

              while (tween) {
                const tweenComposition = tween._composition;
                const tweenCurrentTime = tween._currentTime;
                const tweenChangeDuration = tween._changeDuration;
                const tweenAbsEndTime =
                  tween._absoluteStartTime + tween._changeDuration;
                const tweenNextRep = tween._nextRep;
                const tweenPrevRep = tween._prevRep;
                const tweenHasComposition =
                  tweenComposition !== compositionTypes.none;

                if (
                  (forcedRender ||
                    ((tweenCurrentTime !== tweenChangeDuration ||
                      absoluteTime <=
                        tweenAbsEndTime +
                          (tweenNextRep ? tweenNextRep._delay : 0)) &&
                      (tweenCurrentTime !== 0 ||
                        absoluteTime >= tween._absoluteStartTime))) &&
                  (!tweenHasComposition ||
                    (!tween._isOverridden &&
                      (!tween._isOverlapped ||
                        absoluteTime <= tweenAbsEndTime) &&
                      (!tweenNextRep ||
                        tweenNextRep._isOverridden ||
                        absoluteTime <= tweenNextRep._absoluteStartTime) &&
                      (!tweenPrevRep ||
                        tweenPrevRep._isOverridden ||
                        absoluteTime >=
                          tweenPrevRep._absoluteStartTime +
                            tweenPrevRep._changeDuration +
                            tween._delay)))
                ) {
                  const tweenNewTime = (tween._currentTime = clamp(
                    iterationTime - tween._startTime,
                    0,
                    tweenChangeDuration,
                  ));
                  const tweenProgress = tween._ease(
                    tweenNewTime / tween._updateDuration,
                  );
                  const tweenModifier = tween._modifier;
                  const tweenValueType = tween._valueType;
                  const tweenType = tween._tweenType;
                  const tweenIsObject = tweenType === tweenTypes.OBJECT;
                  const tweenIsNumber = tweenValueType === valueTypes.NUMBER;
                  // Only round the in-between frames values if the final value is a string
                  const tweenPrecision =
                    (tweenIsNumber && tweenIsObject) ||
                    tweenProgress === 0 ||
                    tweenProgress === 1
                      ? -1
                      : globals.precision;

                  // Recompose tween value
                  /** @type {String|Number} */
                  let value;
                  /** @type {Number} */
                  let number;

                  if (tweenIsNumber) {
                    value = number = /** @type {Number} */ (
                      tweenModifier(
                        round(
                          interpolate(
                            tween._fromNumber,
                            tween._toNumber,
                            tweenProgress,
                          ),
                          tweenPrecision,
                        ),
                      )
                    );
                  } else if (tweenValueType === valueTypes.UNIT) {
                    // Rounding the values speed up string composition
                    number = /** @type {Number} */ (
                      tweenModifier(
                        round(
                          interpolate(
                            tween._fromNumber,
                            tween._toNumber,
                            tweenProgress,
                          ),
                          tweenPrecision,
                        ),
                      )
                    );
                    value = `${number}${tween._unit}`;
                  } else if (tweenValueType === valueTypes.COLOR) {
                    const fn = tween._fromNumbers;
                    const tn = tween._toNumbers;
                    const r = round(
                      clamp(
                        /** @type {Number} */ (
                          tweenModifier(
                            interpolate(fn[0], tn[0], tweenProgress),
                          )
                        ),
                        0,
                        255,
                      ),
                      0,
                    );
                    const g = round(
                      clamp(
                        /** @type {Number} */ (
                          tweenModifier(
                            interpolate(fn[1], tn[1], tweenProgress),
                          )
                        ),
                        0,
                        255,
                      ),
                      0,
                    );
                    const b = round(
                      clamp(
                        /** @type {Number} */ (
                          tweenModifier(
                            interpolate(fn[2], tn[2], tweenProgress),
                          )
                        ),
                        0,
                        255,
                      ),
                      0,
                    );
                    const a = clamp(
                      /** @type {Number} */ (
                        tweenModifier(
                          round(
                            interpolate(fn[3], tn[3], tweenProgress),
                            tweenPrecision,
                          ),
                        )
                      ),
                      0,
                      1,
                    );
                    value = `rgba(${r},${g},${b},${a})`;
                    if (tweenHasComposition) {
                      const ns = tween._numbers;
                      ns[0] = r;
                      ns[1] = g;
                      ns[2] = b;
                      ns[3] = a;
                    }
                  } else if (tweenValueType === valueTypes.COMPLEX) {
                    value = tween._strings[0];
                    for (let j = 0, l = tween._toNumbers.length; j < l; j++) {
                      const n = /** @type {Number} */ (
                        tweenModifier(
                          round(
                            interpolate(
                              tween._fromNumbers[j],
                              tween._toNumbers[j],
                              tweenProgress,
                            ),
                            tweenPrecision,
                          ),
                        )
                      );
                      const s = tween._strings[j + 1];
                      value += `${s ? n + s : n}`;
                      if (tweenHasComposition) {
                        tween._numbers[j] = n;
                      }
                    }
                  }

                  // For additive tweens and Animatables
                  if (tweenHasComposition) {
                    tween._number = number;
                  }

                  if (
                    !internalRender &&
                    tweenComposition !== compositionTypes.blend
                  ) {
                    const tweenProperty = tween.property;
                    tweenTarget = tween.target;

                    if (tweenIsObject) {
                      tweenTarget[tweenProperty] = value;
                    } else if (tweenType === tweenTypes.ATTRIBUTE) {
                      /** @type {DOMTarget} */ (tweenTarget).setAttribute(
                        tweenProperty,
                        /** @type {String} */ (value),
                      );
                    } else {
                      tweenStyle = /** @type {DOMTarget} */ (tweenTarget).style;
                      if (tweenType === tweenTypes.TRANSFORM) {
                        if (tweenTarget !== tweenTargetTransforms) {
                          tweenTargetTransforms = tweenTarget;
                          // NOTE: Referencing the cachedTransforms in the tween property directly can be a little bit faster but appears to increase memory usage.
                          tweenTargetTransformsProperties =
                            tweenTarget[transformsSymbol];
                        }
                        tweenTargetTransformsProperties[tweenProperty] = value;
                        tweenTransformsNeedUpdate = 1;
                      } else if (tweenType === tweenTypes.CSS) {
                        tweenStyle[tweenProperty] = value;
                      } else if (tweenType === tweenTypes.CSS_VAR) {
                        tweenStyle.setProperty(
                          tweenProperty,
                          /** @type {String} */ (value),
                        );
                      }
                    }

                    if (isCurrentTimeAboveZero) hasRendered = 1;
                  } else {
                    // Used for composing timeline tweens without having to do a real render
                    tween._value = value;
                  }
                }

                // NOTE: Possible improvement: Use translate(x,y) / translate3d(x,y,z) syntax
                // to reduce memory usage on string composition
                if (tweenTransformsNeedUpdate && tween._renderTransforms) {
                  let str = emptyString;
                  for (let key in tweenTargetTransformsProperties) {
                    str += `${transformsFragmentStrings[key]}${tweenTargetTransformsProperties[key]}) `;
                  }
                  tweenStyle.transform = str;
                  tweenTransformsNeedUpdate = 0;
                }

                tween = tween._next;
              }

              if (!muteCallbacks && hasRendered) {
                /** @type {JSAnimation} */ (tickable).onRender(
                  /** @type {JSAnimation} */ (tickable),
                );
              }
            }

            if (!muteCallbacks && isCurrentTimeAboveZero) {
              tickable.onUpdate(/** @type {CallbackArgument} */ (tickable));
            }
          }

          // End tweens rendering

          // Handle setters on timeline differently and allow re-trigering the onComplete callback when seeking backwards
          if (parent && isSetter) {
            if (
              !muteCallbacks &&
              ((parent.began &&
                !isRunningBackwards &&
                tickableAbsoluteTime >= duration &&
                !completed) ||
                (isRunningBackwards &&
                  tickableAbsoluteTime <= minValue &&
                  completed))
            ) {
              tickable.onComplete(/** @type {CallbackArgument} */ (tickable));
              tickable.completed = !isRunningBackwards;
            }
            // If currentTime is both above 0 and at least equals to duration, handles normal onComplete or infinite loops
          } else if (
            isCurrentTimeAboveZero &&
            isCurrentTimeEqualOrAboveDuration
          ) {
            if (iterationCount === Infinity) {
              // Offset the tickable _startTime with its duration to reset _currentTime to 0 and continue the infinite timer
              tickable._startTime += tickable.duration;
            } else if (tickable._currentIteration >= iterationCount - 1) {
              // By setting paused to true, we tell the engine loop to not render this tickable and removes it from the list on the next tick
              tickable.paused = true;
              if (!completed && !_hasChildren) {
                // If the tickable has children, triggers onComplete() only when all children have completed in the tick function
                tickable.completed = true;
                if (
                  !muteCallbacks &&
                  !(parent && (isRunningBackwards || !parent.began))
                ) {
                  tickable.onComplete(
                    /** @type {CallbackArgument} */ (tickable),
                  );
                  tickable._resolve(/** @type {CallbackArgument} */ (tickable));
                }
              }
            }
            // Otherwise set the completed flag to false
          } else {
            tickable.completed = false;
          }

          // NOTE: hasRendered * direction (negative for backwards) this way we can remove the tickable.backwards property completly ?
          return hasRendered;
        };

        /**
         * @param  {Tickable} tickable
         * @param  {Number} time
         * @param  {Number} muteCallbacks
         * @param  {Number} internalRender
         * @param  {Number} tickMode
         * @return {void}
         */
        const tick = (
          tickable,
          time,
          muteCallbacks,
          internalRender,
          tickMode,
        ) => {
          const _currentIteration = tickable._currentIteration;
          render(tickable, time, muteCallbacks, internalRender, tickMode);
          if (tickable._hasChildren) {
            const tl = /** @type {Timeline} */ (tickable);
            const tlIsRunningBackwards = tl.backwards;
            const tlChildrenTime = internalRender ? time : tl._iterationTime;
            const tlCildrenTickTime = now();

            let tlChildrenHasRendered = 0;
            let tlChildrenHaveCompleted = true;

            // If the timeline has looped forward, we need to manually triggers children skipped callbacks
            if (!internalRender && tl._currentIteration !== _currentIteration) {
              const tlIterationDuration = tl.iterationDuration;
              forEachChildren(tl, (/** @type {JSAnimation} */ child) => {
                if (!tlIsRunningBackwards) {
                  // Force an internal render to trigger the callbacks if the child has not completed on loop
                  if (
                    !child.completed &&
                    !child.backwards &&
                    child._currentTime < child.iterationDuration
                  ) {
                    render(
                      child,
                      tlIterationDuration,
                      muteCallbacks,
                      1,
                      tickModes.FORCE,
                    );
                  }
                  // Reset their began and completed flags to allow retrigering callbacks on the next iteration
                  child.began = false;
                  child.completed = false;
                } else {
                  const childDuration = child.duration;
                  const childStartTime = child._offset + child._delay;
                  const childEndTime = childStartTime + childDuration;
                  // Triggers the onComplete callback on reverse for children on the edges of the timeline
                  if (
                    !muteCallbacks &&
                    childDuration <= minValue &&
                    (!childStartTime || childEndTime === tlIterationDuration)
                  ) {
                    child.onComplete(child);
                  }
                }
              });
              if (!muteCallbacks)
                tl.onLoop(/** @type {CallbackArgument} */ (tl));
            }

            forEachChildren(
              tl,
              (/** @type {JSAnimation} */ child) => {
                const childTime = round(
                  (tlChildrenTime - child._offset) * child._speed,
                  12,
                ); // Rounding is needed when using seconds
                const childTickMode =
                  child._fps < tl._fps
                    ? child.requestTick(tlCildrenTickTime)
                    : tickMode;
                tlChildrenHasRendered += render(
                  child,
                  childTime,
                  muteCallbacks,
                  internalRender,
                  childTickMode,
                );
                if (!child.completed && tlChildrenHaveCompleted)
                  tlChildrenHaveCompleted = false;
              },
              tlIsRunningBackwards,
            );

            // Renders on timeline are triggered by its children so it needs to be set after rendering the children
            if (!muteCallbacks && tlChildrenHasRendered)
              tl.onRender(/** @type {CallbackArgument} */ (tl));

            // Triggers the timeline onComplete() once all chindren all completed and the current time has reached the end
            if (tlChildrenHaveCompleted && tl._currentTime >= tl.duration) {
              // Make sure the paused flag is false in case it has been skipped in the render function
              tl.paused = true;
              if (!tl.completed) {
                tl.completed = true;
                if (!muteCallbacks) {
                  tl.onComplete(/** @type {CallbackArgument} */ (tl));
                  tl._resolve(/** @type {CallbackArgument} */ (tl));
                }
              }
            }
          }
        };

        const additive = {
          animation: null,
          update: noop,
        };

        /**
         * @typedef AdditiveAnimation
         * @property {Number} duration
         * @property {Number} _offset
         * @property {Number} _delay
         * @property {Tween} _head
         * @property {Tween} _tail
         */

        /**
         * @param  {TweenAdditiveLookups} lookups
         * @return {AdditiveAnimation}
         */
        const addAdditiveAnimation = (lookups) => {
          let animation = additive.animation;
          if (!animation) {
            animation = {
              duration: minValue,
              computeDeltaTime: noop,
              _offset: 0,
              _delay: 0,
              _head: null,
              _tail: null,
            };
            additive.animation = animation;
            additive.update = () => {
              lookups.forEach((propertyAnimation) => {
                for (let propertyName in propertyAnimation) {
                  const tweens = propertyAnimation[propertyName];
                  const lookupTween = tweens._head;
                  if (lookupTween) {
                    const valueType = lookupTween._valueType;
                    const additiveValues =
                      valueType === valueTypes.COMPLEX ||
                      valueType === valueTypes.COLOR
                        ? cloneArray(lookupTween._fromNumbers)
                        : null;
                    let additiveValue = lookupTween._fromNumber;
                    let tween = tweens._tail;
                    while (tween && tween !== lookupTween) {
                      if (additiveValues) {
                        for (let i = 0, l = tween._numbers.length; i < l; i++)
                          additiveValues[i] += tween._numbers[i];
                      } else {
                        additiveValue += tween._number;
                      }
                      tween = tween._prevAdd;
                    }
                    lookupTween._toNumber = additiveValue;
                    lookupTween._toNumbers = additiveValues;
                  }
                }
              });
              // TODO: Avoid polymorphism here, idealy the additive animation should be a regular animation with a higher priority in the render loop
              render(animation, 1, 1, 0, tickModes.FORCE);
            };
          }
          return animation;
        };

        const engineTickMethod = isBrowser
          ? requestAnimationFrame
          : setImmediate;
        const engineCancelMethod = isBrowser
          ? cancelAnimationFrame
          : clearImmediate;

        class Engine extends Clock {
          /** @param {Number} [initTime] */
          constructor(initTime) {
            super(initTime);
            this.useDefaultMainLoop = true;
            this.pauseOnDocumentHidden = true;
            /** @type {DefaultsParams} */
            this.defaults = defaults;
            this.paused = isBrowser && doc.hidden ? true : false;
            /** @type {Number|NodeJS.Immediate} */
            this.reqId = null;
          }

          update() {
            const time = (this._currentTime = now());
            if (this.requestTick(time)) {
              this.computeDeltaTime(time);
              const engineSpeed = this._speed;
              const engineFps = this._fps;
              let activeTickable = /** @type {Tickable} */ (this._head);
              while (activeTickable) {
                const nextTickable = activeTickable._next;
                if (!activeTickable.paused) {
                  tick(
                    activeTickable,
                    (time - activeTickable._startTime) *
                      activeTickable._speed *
                      engineSpeed,
                    0, // !muteCallbacks
                    0, // !internalRender
                    activeTickable._fps < engineFps
                      ? activeTickable.requestTick(time)
                      : tickModes.AUTO,
                  );
                } else {
                  removeChild(this, activeTickable);
                  this._hasChildren = !!this._tail;
                  activeTickable._running = false;
                  if (activeTickable.completed && !activeTickable._cancelled) {
                    activeTickable.cancel();
                  }
                }
                activeTickable = nextTickable;
              }
              additive.update();
            }
          }

          wake() {
            if (this.useDefaultMainLoop && !this.reqId && !this.paused) {
              this.reqId = engineTickMethod(tickEngine);
            }
            return this;
          }

          pause() {
            this.paused = true;
            return killEngine();
          }

          resume() {
            if (!this.paused) return;
            this.paused = false;
            forEachChildren(this, (/** @type {Tickable} */ child) =>
              child.resetTime(),
            );
            return this.wake();
          }

          // Getter and setter for speed
          get speed() {
            return this._speed * (globals.timeScale === 1 ? 1 : K);
          }

          set speed(playbackRate) {
            this._speed = playbackRate * globals.timeScale;
            forEachChildren(
              this,
              (/** @type {Tickable} */ child) => (child.speed = child._speed),
            );
          }

          // Getter and setter for timeUnit
          get timeUnit() {
            return globals.timeScale === 1 ? 'ms' : 's';
          }

          set timeUnit(unit) {
            const secondsScale = 0.001;
            const isSecond = unit === 's';
            const newScale = isSecond ? secondsScale : 1;
            if (globals.timeScale !== newScale) {
              globals.timeScale = newScale;
              globals.tickThreshold = 200 * newScale;
              const scaleFactor = isSecond ? secondsScale : K;
              /** @type {Number} */
              (this.defaults.duration) *= scaleFactor;
              this._speed *= scaleFactor;
            }
          }

          // Getter and setter for precision
          get precision() {
            return globals.precision;
          }

          set precision(precision) {
            globals.precision = precision;
          }
        }
        const engine = /*#__PURE__*/ (() => {
          const engine = new Engine(now());
          if (isBrowser) {
            globalVersions.engine = engine;
            doc.addEventListener('visibilitychange', () => {
              if (!engine.pauseOnDocumentHidden) return;
              doc.hidden ? engine.pause() : engine.resume();
            });
          }
          return engine;
        })();

        const tickEngine = () => {
          if (engine._head) {
            engine.reqId = engineTickMethod(tickEngine);
            engine.update();
          } else {
            engine.reqId = 0;
          }
        };

        const killEngine = () => {
          engineCancelMethod(
            /** @type {NodeJS.Immediate & Number} */ (engine.reqId),
          );
          engine.reqId = 0;
          return engine;
        };

        /**
         * @param  {DOMTarget} target
         * @param  {String} propName
         * @param  {Object} animationInlineStyles
         * @return {String}
         */
        const parseInlineTransforms = (
          target,
          propName,
          animationInlineStyles,
        ) => {
          const inlineTransforms = target.style.transform;
          let inlinedStylesPropertyValue;
          if (inlineTransforms) {
            const cachedTransforms = target[transformsSymbol];
            let t;
            while ((t = transformsExecRgx.exec(inlineTransforms))) {
              const inlinePropertyName = t[1];
              // const inlinePropertyValue = t[2];
              const inlinePropertyValue = t[2].slice(1, -1);
              cachedTransforms[inlinePropertyName] = inlinePropertyValue;
              if (inlinePropertyName === propName) {
                inlinedStylesPropertyValue = inlinePropertyValue;
                // Store the new parsed inline styles if animationInlineStyles is provided
                if (animationInlineStyles) {
                  animationInlineStyles[propName] = inlinePropertyValue;
                }
              }
            }
          }
          return inlineTransforms && !isUnd(inlinedStylesPropertyValue)
            ? inlinedStylesPropertyValue
            : stringStartsWith(propName, 'scale')
              ? '1'
              : stringStartsWith(propName, 'rotate') ||
                  stringStartsWith(propName, 'skew')
                ? '0deg'
                : '0px';
        };

        /**
         * @param  {DOMTargetsParam|TargetsParam} v
         * @return {NodeList|HTMLCollection}
         */
        function getNodeList(v) {
          const n = isStr(v) ? globals.root.querySelectorAll(v) : v;
          if (n instanceof NodeList || n instanceof HTMLCollection) return n;
        }

        /**
         * @overload
         * @param  {DOMTargetsParam} targets
         * @return {DOMTargetsArray}
         *
         * @overload
         * @param  {JSTargetsParam} targets
         * @return {JSTargetsArray}
         *
         * @overload
         * @param  {TargetsParam} targets
         * @return {TargetsArray}
         *
         * @param  {DOMTargetsParam|JSTargetsParam|TargetsParam} targets
         */
        function parseTargets(targets) {
          if (isNil(targets)) return /** @type {TargetsArray} */ ([]);
          if (isArr(targets)) {
            const flattened = targets.flat(Infinity);
            /** @type {TargetsArray} */
            const parsed = [];
            for (let i = 0, l = flattened.length; i < l; i++) {
              const item = flattened[i];
              if (!isNil(item)) {
                const nodeList = getNodeList(item);
                if (nodeList) {
                  for (let j = 0, jl = nodeList.length; j < jl; j++) {
                    const subItem = nodeList[j];
                    if (!isNil(subItem)) {
                      let isDuplicate = false;
                      for (let k = 0, kl = parsed.length; k < kl; k++) {
                        if (parsed[k] === subItem) {
                          isDuplicate = true;
                          break;
                        }
                      }
                      if (!isDuplicate) {
                        parsed.push(subItem);
                      }
                    }
                  }
                } else {
                  let isDuplicate = false;
                  for (let j = 0, jl = parsed.length; j < jl; j++) {
                    if (parsed[j] === item) {
                      isDuplicate = true;
                      break;
                    }
                  }
                  if (!isDuplicate) {
                    parsed.push(item);
                  }
                }
              }
            }
            return parsed;
          }
          if (!isBrowser) return /** @type {JSTargetsArray} */ ([targets]);
          const nodeList = getNodeList(targets);
          if (nodeList)
            return /** @type {DOMTargetsArray} */ (Array.from(nodeList));
          return /** @type {TargetsArray} */ ([targets]);
        }

        /**
         * @overload
         * @param  {DOMTargetsParam} targets
         * @return {DOMTargetsArray}
         *
         * @overload
         * @param  {JSTargetsParam} targets
         * @return {JSTargetsArray}
         *
         * @overload
         * @param  {TargetsParam} targets
         * @return {TargetsArray}
         *
         * @param  {DOMTargetsParam|JSTargetsParam|TargetsParam} targets
         */
        function registerTargets(targets) {
          const parsedTargetsArray = parseTargets(targets);
          const parsedTargetsLength = parsedTargetsArray.length;
          if (parsedTargetsLength) {
            for (let i = 0; i < parsedTargetsLength; i++) {
              const target = parsedTargetsArray[i];
              if (!target[isRegisteredTargetSymbol]) {
                target[isRegisteredTargetSymbol] = true;
                const isSvgType = isSvg(target);
                const isDom =
                  /** @type {DOMTarget} */ (target).nodeType || isSvgType;
                if (isDom) {
                  target[isDomSymbol] = true;
                  target[isSvgSymbol] = isSvgType;
                  target[transformsSymbol] = {};
                }
              }
            }
          }
          return parsedTargetsArray;
        }

        /**
         * @param  {TargetsParam} path
         * @return {SVGGeometryElement|undefined}
         */
        const getPath = (path) => {
          const parsedTargets = parseTargets(path);
          const $parsedSvg = /** @type {SVGGeometryElement} */ (
            parsedTargets[0]
          );
          if (!$parsedSvg || !isSvg($parsedSvg)) return;
          return $parsedSvg;
        };

        /**
         * @param  {TargetsParam} path2
         * @param  {Number} [precision]
         * @return {FunctionValue}
         */
        const morphTo =
          (path2, precision = 0.33) =>
          ($path1) => {
            const $path2 = /** @type {SVGGeometryElement} */ (getPath(path2));
            if (!$path2) return;
            const isPath = $path1.tagName === 'path';
            const separator = isPath ? ' ' : ',';
            const previousPoints = $path1[morphPointsSymbol];
            if (previousPoints)
              $path1.setAttribute(isPath ? 'd' : 'points', previousPoints);

            let v1 = '',
              v2 = '';

            if (!precision) {
              v1 = $path1.getAttribute(isPath ? 'd' : 'points');
              v2 = $path2.getAttribute(isPath ? 'd' : 'points');
            } else {
              const length1 = /** @type {SVGGeometryElement} */ (
                $path1
              ).getTotalLength();
              const length2 = $path2.getTotalLength();
              const maxPoints = Math.max(
                Math.ceil(length1 * precision),
                Math.ceil(length2 * precision),
              );
              for (let i = 0; i < maxPoints; i++) {
                const t = i / (maxPoints - 1);
                const pointOnPath1 = /** @type {SVGGeometryElement} */ (
                  $path1
                ).getPointAtLength(length1 * t);
                const pointOnPath2 = $path2.getPointAtLength(length2 * t);
                const prefix = isPath ? (i === 0 ? 'M' : 'L') : '';
                v1 +=
                  prefix +
                  round(pointOnPath1.x, 3) +
                  separator +
                  pointOnPath1.y +
                  ' ';
                v2 +=
                  prefix +
                  round(pointOnPath2.x, 3) +
                  separator +
                  pointOnPath2.y +
                  ' ';
              }
            }

            $path1[morphPointsSymbol] = v2;

            return [v1, v2];
          };

        /**
         * @param {SVGGeometryElement} [$el]
         * @return {Number}
         */
        const getScaleFactor = ($el) => {
          let scaleFactor = 1;
          if ($el && $el.getCTM) {
            const ctm = $el.getCTM();
            if (ctm) {
              const scaleX = sqrt(ctm.a * ctm.a + ctm.b * ctm.b);
              const scaleY = sqrt(ctm.c * ctm.c + ctm.d * ctm.d);
              scaleFactor = (scaleX + scaleY) / 2;
            }
          }
          return scaleFactor;
        };

        /**
         * Creates a proxy that wraps an SVGGeometryElement and adds drawing functionality.
         * @param {SVGGeometryElement} $el - The SVG element to transform into a drawable
         * @param {number} start - Starting position (0-1)
         * @param {number} end - Ending position (0-1)
         * @return {DrawableSVGGeometry} - Returns a proxy that preserves the original element's type with additional 'draw' attribute functionality
         */
        const createDrawableProxy = ($el, start, end) => {
          const pathLength = K;
          const computedStyles = getComputedStyle($el);
          const strokeLineCap = computedStyles.strokeLinecap;
          // @ts-ignore
          const $scalled =
            computedStyles.vectorEffect === 'non-scaling-stroke' ? $el : null;
          let currentCap = strokeLineCap;

          const proxy = new Proxy($el, {
            get(target, property) {
              const value = target[property];
              if (property === proxyTargetSymbol) return target;
              if (property === 'setAttribute') {
                return (...args) => {
                  if (args[0] === 'draw') {
                    const value = args[1];
                    const values = value.split(' ');
                    const v1 = +values[0];
                    const v2 = +values[1];
                    // TOTO: Benchmark if performing two slices is more performant than one split
                    // const spaceIndex = value.indexOf(' ');
                    // const v1 = round(+value.slice(0, spaceIndex), precision);
                    // const v2 = round(+value.slice(spaceIndex + 1), precision);
                    const scaleFactor = getScaleFactor($scalled);
                    const os = v1 * -1e3 * scaleFactor;
                    const d1 = v2 * pathLength * scaleFactor + os;
                    const d2 =
                      pathLength * scaleFactor +
                      ((v1 === 0 && v2 === 1) || (v1 === 1 && v2 === 0)
                        ? 0
                        : 10 * scaleFactor) -
                      d1;
                    if (strokeLineCap !== 'butt') {
                      const newCap = v1 === v2 ? 'butt' : strokeLineCap;
                      if (currentCap !== newCap) {
                        target.style.strokeLinecap = `${newCap}`;
                        currentCap = newCap;
                      }
                    }
                    target.setAttribute('stroke-dashoffset', `${os}`);
                    target.setAttribute('stroke-dasharray', `${d1} ${d2}`);
                  }
                  return Reflect.apply(value, target, args);
                };
              }

              if (isFnc(value)) {
                return (...args) => Reflect.apply(value, target, args);
              } else {
                return value;
              }
            },
          });

          if ($el.getAttribute('pathLength') !== `${pathLength}`) {
            $el.setAttribute('pathLength', `${pathLength}`);
            proxy.setAttribute('draw', `${start} ${end}`);
          }

          return /** @type {DrawableSVGGeometry} */ (proxy);
        };

        /**
         * Creates drawable proxies for multiple SVG elements.
         * @param {TargetsParam} selector - CSS selector, SVG element, or array of elements and selectors
         * @param {number} [start=0] - Starting position (0-1)
         * @param {number} [end=0] - Ending position (0-1)
         * @return {Array<DrawableSVGGeometry>} - Array of proxied elements with drawing functionality
         */
        const createDrawable = (selector, start = 0, end = 0) => {
          const els = parseTargets(selector);
          return els.map(($el) =>
            createDrawableProxy(
              /** @type {SVGGeometryElement} */ ($el),
              start,
              end,
            ),
          );
        };

        // Motion path animation

        /**
         * @param {SVGGeometryElement} $path
         * @param {Number} progress
         * @param {Number}lookup
         * @return {DOMPoint}
         */
        const getPathPoint = ($path, progress, lookup = 0) => {
          return $path.getPointAtLength(
            progress + lookup >= 1 ? progress + lookup : 0,
          );
        };

        /**
         * @param {SVGGeometryElement} $path
         * @param {String} pathProperty
         * @return {FunctionValue}
         */
        const getPathProgess = ($path, pathProperty) => {
          return ($el) => {
            const totalLength = +$path.getTotalLength();
            const inSvg = $el[isSvgSymbol];
            const ctm = $path.getCTM();
            /** @type {TweenObjectValue} */
            return {
              from: 0,
              to: totalLength,
              /** @type {TweenModifier} */
              modifier: (progress) => {
                if (pathProperty === 'a') {
                  const p0 = getPathPoint($path, progress, -1);
                  const p1 = getPathPoint($path, progress, 1);
                  return (atan2(p1.y - p0.y, p1.x - p0.x) * 180) / PI;
                } else {
                  const p = getPathPoint($path, progress, 0);
                  return pathProperty === 'x'
                    ? inSvg || !ctm
                      ? p.x
                      : p.x * ctm.a + p.y * ctm.c + ctm.e
                    : inSvg || !ctm
                      ? p.y
                      : p.x * ctm.b + p.y * ctm.d + ctm.f;
                }
              },
            };
          };
        };

        /**
         * @param {TargetsParam} path
         */
        const createMotionPath = (path) => {
          const $path = getPath(path);
          if (!$path) return;
          return {
            translateX: getPathProgess($path, 'x'),
            translateY: getPathProgess($path, 'y'),
            rotate: getPathProgess($path, 'a'),
          };
        };

        // Check for valid SVG attribute

        const cssReservedProperties = [
          'opacity',
          'rotate',
          'overflow',
          'color',
        ];

        /**
         * @param  {Target} el
         * @param  {String} propertyName
         * @return {Boolean}
         */
        const isValidSVGAttribute = (el, propertyName) => {
          // Return early and use CSS opacity animation instead (already better default values (opacity: 1 instead of 0)) and rotate should be considered a transform
          if (cssReservedProperties.includes(propertyName)) return false;
          if (el.getAttribute(propertyName) || propertyName in el) {
            if (propertyName === 'scale') {
              // Scale
              const elParentNode = /** @type {SVGGeometryElement} */ (
                /** @type {DOMTarget} */ (el).parentNode
              );
              // Only consider scale as a valid SVG attribute on filter element
              return elParentNode && elParentNode.tagName === 'filter';
            }
            return true;
          }
        };

        const svg = {
          morphTo,
          createMotionPath,
          createDrawable,
        };

        /**
         * RGB / RGBA Color value string -> RGBA values array
         * @param  {String} rgbValue
         * @return {ColorArray}
         */
        const rgbToRgba = (rgbValue) => {
          const rgba = rgbExecRgx.exec(rgbValue) || rgbaExecRgx.exec(rgbValue);
          const a = !isUnd(rgba[4]) ? +rgba[4] : 1;
          return [+rgba[1], +rgba[2], +rgba[3], a];
        };

        /**
         * HEX3 / HEX3A / HEX6 / HEX6A Color value string -> RGBA values array
         * @param  {String} hexValue
         * @return {ColorArray}
         */
        const hexToRgba = (hexValue) => {
          const hexLength = hexValue.length;
          const isShort = hexLength === 4 || hexLength === 5;
          return [
            +('0x' + hexValue[1] + hexValue[isShort ? 1 : 2]),
            +('0x' + hexValue[isShort ? 2 : 3] + hexValue[isShort ? 2 : 4]),
            +('0x' + hexValue[isShort ? 3 : 5] + hexValue[isShort ? 3 : 6]),
            hexLength === 5 || hexLength === 9
              ? +(
                  +(
                    '0x' +
                    hexValue[isShort ? 4 : 7] +
                    hexValue[isShort ? 4 : 8]
                  ) / 255
                ).toFixed(3)
              : 1,
          ];
        };

        /**
         * @param  {Number} p
         * @param  {Number} q
         * @param  {Number} t
         * @return {Number}
         */
        const hue2rgb = (p, q, t) => {
          if (t < 0) t += 1;
          if (t > 1) t -= 1;
          return t < 1 / 6
            ? p + (q - p) * 6 * t
            : t < 1 / 2
              ? q
              : t < 2 / 3
                ? p + (q - p) * (2 / 3 - t) * 6
                : p;
        };

        /**
         * HSL / HSLA Color value string -> RGBA values array
         * @param  {String} hslValue
         * @return {ColorArray}
         */
        const hslToRgba = (hslValue) => {
          const hsla = hslExecRgx.exec(hslValue) || hslaExecRgx.exec(hslValue);
          const h = +hsla[1] / 360;
          const s = +hsla[2] / 100;
          const l = +hsla[3] / 100;
          const a = !isUnd(hsla[4]) ? +hsla[4] : 1;
          let r, g, b;
          if (s === 0) {
            r = g = b = l;
          } else {
            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            const p = 2 * l - q;
            r = round(hue2rgb(p, q, h + 1 / 3) * 255, 0);
            g = round(hue2rgb(p, q, h) * 255, 0);
            b = round(hue2rgb(p, q, h - 1 / 3) * 255, 0);
          }
          return [r, g, b, a];
        };

        /**
         * All in one color converter that converts a color string value into an array of RGBA values
         * @param  {String} colorString
         * @return {ColorArray}
         */
        const convertColorStringValuesToRgbaArray = (colorString) => {
          return isRgb(colorString)
            ? rgbToRgba(colorString)
            : isHex(colorString)
              ? hexToRgba(colorString)
              : isHsl(colorString)
                ? hslToRgba(colorString)
                : [0, 0, 0, 1];
        };

        /**
         * @template T, D
         * @param {T|undefined} targetValue
         * @param {D} defaultValue
         * @return {T|D}
         */
        const setValue = (targetValue, defaultValue) => {
          return isUnd(targetValue) ? defaultValue : targetValue;
        };

        /**
         * @param  {TweenPropValue} value
         * @param  {Target} target
         * @param  {Number} index
         * @param  {Number} total
         * @param  {Object} [store]
         * @return {any}
         */
        const getFunctionValue = (value, target, index, total, store) => {
          if (isFnc(value)) {
            const func = () => {
              const computed = /** @type {Function} */ (value)(
                target,
                index,
                total,
              );
              // Fallback to 0 if the function returns undefined / NaN / null / false / 0
              return !isNaN(+computed) ? +computed : computed || 0;
            };
            if (store) {
              store.func = func;
            }
            return func();
          } else {
            return value;
          }
        };

        /**
         * @param  {Target} target
         * @param  {String} prop
         * @return {tweenTypes}
         */
        const getTweenType = (target, prop) => {
          return !target[isDomSymbol]
            ? tweenTypes.OBJECT
            : // Handle SVG attributes
              target[isSvgSymbol] && isValidSVGAttribute(target, prop)
              ? tweenTypes.ATTRIBUTE
              : // Handle CSS Transform properties differently than CSS to allow individual animations
                validTransforms.includes(prop) || shortTransforms.get(prop)
                ? tweenTypes.TRANSFORM
                : // CSS variables
                  stringStartsWith(prop, '--')
                  ? tweenTypes.CSS_VAR
                  : // All other CSS properties
                    prop in /** @type {DOMTarget} */ (target).style
                    ? tweenTypes.CSS
                    : // Handle other DOM Attributes
                      prop in target
                      ? tweenTypes.OBJECT
                      : tweenTypes.ATTRIBUTE;
        };

        /**
         * @param  {DOMTarget} target
         * @param  {String} propName
         * @param  {Object} animationInlineStyles
         * @return {String}
         */
        const getCSSValue = (target, propName, animationInlineStyles) => {
          const inlineStyles = target.style[propName];
          if (inlineStyles && animationInlineStyles) {
            animationInlineStyles[propName] = inlineStyles;
          }
          const value =
            inlineStyles ||
            getComputedStyle(
              target[proxyTargetSymbol] || target,
            ).getPropertyValue(propName);
          return value === 'auto' ? '0' : value;
        };

        /**
         * @param {Target} target
         * @param {String} propName
         * @param {tweenTypes} [tweenType]
         * @param {Object|void} [animationInlineStyles]
         * @return {String|Number}
         */
        const getOriginalAnimatableValue = (
          target,
          propName,
          tweenType,
          animationInlineStyles,
        ) => {
          const type = !isUnd(tweenType)
            ? tweenType
            : getTweenType(target, propName);
          return type === tweenTypes.OBJECT
            ? target[propName] || 0
            : type === tweenTypes.ATTRIBUTE
              ? /** @type {DOMTarget} */ (target).getAttribute(propName)
              : type === tweenTypes.TRANSFORM
                ? parseInlineTransforms(
                    /** @type {DOMTarget} */ (target),
                    propName,
                    animationInlineStyles,
                  )
                : type === tweenTypes.CSS_VAR
                  ? getCSSValue(
                      /** @type {DOMTarget} */ (target),
                      propName,
                      animationInlineStyles,
                    ).trimStart()
                  : getCSSValue(
                      /** @type {DOMTarget} */ (target),
                      propName,
                      animationInlineStyles,
                    );
        };

        /**
         * @param  {Number} x
         * @param  {Number} y
         * @param  {String} operator
         * @return {Number}
         */
        const getRelativeValue = (x, y, operator) => {
          return operator === '-' ? x - y : operator === '+' ? x + y : x * y;
        };

        /** @return {TweenDecomposedValue} */
        const createDecomposedValueTargetObject = () => {
          return {
            /** @type {valueTypes} */
            t: valueTypes.NUMBER,
            n: 0,
            u: null,
            o: null,
            d: null,
            s: null,
          };
        };

        /**
         * @param  {String|Number} rawValue
         * @param  {TweenDecomposedValue} targetObject
         * @return {TweenDecomposedValue}
         */
        const decomposeRawValue = (rawValue, targetObject) => {
          /** @type {valueTypes} */
          targetObject.t = valueTypes.NUMBER;
          targetObject.n = 0;
          targetObject.u = null;
          targetObject.o = null;
          targetObject.d = null;
          targetObject.s = null;
          if (!rawValue) return targetObject;
          const num = +rawValue;
          if (!isNaN(num)) {
            // It's a number
            targetObject.n = num;
            return targetObject;
          } else {
            // let str = /** @type {String} */(rawValue).trim();
            let str = /** @type {String} */ (rawValue);
            // Parsing operators (+=, -=, *=) manually is much faster than using regex here
            if (str[1] === '=') {
              targetObject.o = str[0];
              str = str.slice(2);
            }
            // Skip exec regex if the value type is complex or color to avoid long regex backtracking
            const unitMatch = str.includes(' ')
              ? false
              : unitsExecRgx.exec(str);
            if (unitMatch) {
              // Has a number and a unit
              targetObject.t = valueTypes.UNIT;
              targetObject.n = +unitMatch[1];
              targetObject.u = unitMatch[2];
              return targetObject;
            } else if (targetObject.o) {
              // Has an operator (+=, -=, *=)
              targetObject.n = +str;
              return targetObject;
            } else if (isCol(str)) {
              // Is a color
              targetObject.t = valueTypes.COLOR;
              targetObject.d = convertColorStringValuesToRgbaArray(str);
              return targetObject;
            } else {
              // Is a more complex string (generally svg coords, calc() or filters CSS values)
              const matchedNumbers = str.match(digitWithExponentRgx);
              targetObject.t = valueTypes.COMPLEX;
              targetObject.d = matchedNumbers ? matchedNumbers.map(Number) : [];
              targetObject.s = str.split(digitWithExponentRgx) || [];
              return targetObject;
            }
          }
        };

        /**
         * @param  {Tween} tween
         * @param  {TweenDecomposedValue} targetObject
         * @return {TweenDecomposedValue}
         */
        const decomposeTweenValue = (tween, targetObject) => {
          targetObject.t = tween._valueType;
          targetObject.n = tween._toNumber;
          targetObject.u = tween._unit;
          targetObject.o = null;
          targetObject.d = cloneArray(tween._toNumbers);
          targetObject.s = cloneArray(tween._strings);
          return targetObject;
        };

        const decomposedOriginalValue = createDecomposedValueTargetObject();

        const lookups = {
          /** @type {TweenReplaceLookups} */
          _rep: new WeakMap(),
          /** @type {TweenAdditiveLookups} */
          _add: new Map(),
        };

        /**
         * @param  {Target} target
         * @param  {String} property
         * @param  {String} lookup
         * @return {TweenPropertySiblings}
         */
        const getTweenSiblings = (target, property, lookup = '_rep') => {
          const lookupMap = lookups[lookup];
          let targetLookup = lookupMap.get(target);
          if (!targetLookup) {
            targetLookup = {};
            lookupMap.set(target, targetLookup);
          }
          return targetLookup[property]
            ? targetLookup[property]
            : (targetLookup[property] = {
                _head: null,
                _tail: null,
              });
        };

        /**
         * @param  {Tween} p
         * @param  {Tween} c
         * @return {Number|Boolean}
         */
        const addTweenSortMethod = (p, c) => {
          return p._isOverridden || p._absoluteStartTime > c._absoluteStartTime;
        };

        /**
         * @param {Tween} tween
         */
        const overrideTween = (tween) => {
          tween._isOverlapped = 1;
          tween._isOverridden = 1;
          tween._changeDuration = minValue;
          tween._currentTime = minValue;
        };

        /**
         * @param  {Tween} tween
         * @param  {TweenPropertySiblings} siblings
         * @return {Tween}
         */
        const composeTween = (tween, siblings) => {
          const tweenCompositionType = tween._composition;

          // Handle replaced tweens

          if (tweenCompositionType === compositionTypes.replace) {
            const tweenAbsStartTime = tween._absoluteStartTime;

            addChild(
              siblings,
              tween,
              addTweenSortMethod,
              '_prevRep',
              '_nextRep',
            );

            const prevSibling = tween._prevRep;

            // Update the previous siblings for composition replace tweens

            if (prevSibling) {
              const prevParent = prevSibling.parent;
              const prevAbsEndTime =
                prevSibling._absoluteStartTime + prevSibling._changeDuration;

              // Handle looped animations tween

              if (
                // Check if the previous tween is from a different animation
                tween.parent.id !== prevParent.id &&
                // Check if the animation has loops
                prevParent.iterationCount > 1 &&
                // Check if _absoluteChangeEndTime of last loop overlaps the current tween
                prevAbsEndTime +
                  (prevParent.duration - prevParent.iterationDuration) >
                  tweenAbsStartTime
              ) {
                // TODO: Find a way to only override the iterations overlapping with the tween
                overrideTween(prevSibling);

                let prevPrevSibling = prevSibling._prevRep;

                // If the tween was part of a set of keyframes, override its siblings
                while (
                  prevPrevSibling &&
                  prevPrevSibling.parent.id === prevParent.id
                ) {
                  overrideTween(prevPrevSibling);
                  prevPrevSibling = prevPrevSibling._prevRep;
                }
              }

              const absoluteUpdateStartTime = tweenAbsStartTime - tween._delay;

              if (prevAbsEndTime > absoluteUpdateStartTime) {
                const prevChangeStartTime = prevSibling._startTime;
                const prevTLOffset =
                  prevAbsEndTime -
                  (prevChangeStartTime + prevSibling._updateDuration);

                prevSibling._changeDuration =
                  absoluteUpdateStartTime - prevTLOffset - prevChangeStartTime;
                prevSibling._currentTime = prevSibling._changeDuration;
                prevSibling._isOverlapped = 1;

                if (prevSibling._changeDuration < minValue) {
                  overrideTween(prevSibling);
                }
              }

              // Pause (and cancel) the parent if it only contains overlapped tweens

              let pausePrevParentAnimation = true;

              forEachChildren(prevParent, (/** @type Tween */ t) => {
                if (!t._isOverlapped) pausePrevParentAnimation = false;
              });

              if (pausePrevParentAnimation) {
                const prevParentTL = prevParent.parent;
                if (prevParentTL) {
                  let pausePrevParentTL = true;
                  forEachChildren(
                    prevParentTL,
                    (/** @type JSAnimation */ a) => {
                      if (a !== prevParent) {
                        forEachChildren(a, (/** @type Tween */ t) => {
                          if (!t._isOverlapped) pausePrevParentTL = false;
                        });
                      }
                    },
                  );
                  if (pausePrevParentTL) {
                    prevParentTL.cancel();
                  }
                } else {
                  prevParent.cancel();
                  // Previously, calling .cancel() on a timeline child would affect the render order of other children
                  // Worked around this by marking it as .completed and using .pause() for safe removal in the engine loop
                  // This is no longer needed since timeline tween composition is now handled separatly
                  // Keeping this here for reference
                  // prevParent.completed = true;
                  // prevParent.pause();
                }
              }
            }

            // let nextSibling = tween._nextRep;

            // // All the next siblings are automatically overridden

            // if (nextSibling && nextSibling._absoluteStartTime >= tweenAbsStartTime) {
            //   while (nextSibling) {
            //     overrideTween(nextSibling);
            //     nextSibling = nextSibling._nextRep;
            //   }
            // }

            // if (nextSibling && nextSibling._absoluteStartTime < tweenAbsStartTime) {
            //   while (nextSibling) {
            //     overrideTween(nextSibling);
            //     console.log(tween.id, nextSibling.id);
            //     nextSibling = nextSibling._nextRep;
            //   }
            // }

            // Handle additive tweens composition
          } else if (tweenCompositionType === compositionTypes.blend) {
            const additiveTweenSiblings = getTweenSiblings(
              tween.target,
              tween.property,
              '_add',
            );
            const additiveAnimation = addAdditiveAnimation(lookups._add);

            let lookupTween = additiveTweenSiblings._head;

            if (!lookupTween) {
              lookupTween = { ...tween };
              lookupTween._composition = compositionTypes.replace;
              lookupTween._updateDuration = minValue;
              lookupTween._startTime = 0;
              lookupTween._numbers = cloneArray(tween._fromNumbers);
              lookupTween._number = 0;
              lookupTween._next = null;
              lookupTween._prev = null;
              addChild(additiveTweenSiblings, lookupTween);
              addChild(additiveAnimation, lookupTween);
            }

            // Convert the values of TO to FROM and set TO to 0

            const toNumber = tween._toNumber;
            tween._fromNumber = lookupTween._fromNumber - toNumber;
            tween._toNumber = 0;
            tween._numbers = cloneArray(tween._fromNumbers);
            tween._number = 0;
            lookupTween._fromNumber = toNumber;

            if (tween._toNumbers) {
              const toNumbers = cloneArray(tween._toNumbers);
              if (toNumbers) {
                toNumbers.forEach((value, i) => {
                  tween._fromNumbers[i] = lookupTween._fromNumbers[i] - value;
                  tween._toNumbers[i] = 0;
                });
              }
              lookupTween._fromNumbers = toNumbers;
            }

            addChild(
              additiveTweenSiblings,
              tween,
              null,
              '_prevAdd',
              '_nextAdd',
            );
          }

          return tween;
        };

        /**
         * @param  {Tween} tween
         * @return {Tween}
         */
        const removeTweenSliblings = (tween) => {
          const tweenComposition = tween._composition;
          if (tweenComposition !== compositionTypes.none) {
            const tweenTarget = tween.target;
            const tweenProperty = tween.property;
            const replaceTweensLookup = lookups._rep;
            const replaceTargetProps = replaceTweensLookup.get(tweenTarget);
            const tweenReplaceSiblings = replaceTargetProps[tweenProperty];
            removeChild(tweenReplaceSiblings, tween, '_prevRep', '_nextRep');
            if (tweenComposition === compositionTypes.blend) {
              const addTweensLookup = lookups._add;
              const addTargetProps = addTweensLookup.get(tweenTarget);
              if (!addTargetProps) return;
              const additiveTweenSiblings = addTargetProps[tweenProperty];
              const additiveAnimation = additive.animation;
              removeChild(additiveTweenSiblings, tween, '_prevAdd', '_nextAdd');
              // If only one tween is left in the additive lookup, it's the tween lookup
              const lookupTween = additiveTweenSiblings._head;
              if (lookupTween && lookupTween === additiveTweenSiblings._tail) {
                removeChild(
                  additiveTweenSiblings,
                  lookupTween,
                  '_prevAdd',
                  '_nextAdd',
                );
                removeChild(additiveAnimation, lookupTween);
                let shouldClean = true;
                for (let prop in addTargetProps) {
                  if (addTargetProps[prop]._head) {
                    shouldClean = false;
                    break;
                  }
                }
                if (shouldClean) {
                  addTweensLookup.delete(tweenTarget);
                }
              }
            }
          }
          return tween;
        };

        /**
         * @param  {Timer} timer
         * @return {Timer}
         */
        const resetTimerProperties = (timer) => {
          timer.paused = true;
          timer.began = false;
          timer.completed = false;
          return timer;
        };

        /**
         * @param  {Timer} timer
         * @return {Timer}
         */
        const reviveTimer = (timer) => {
          if (!timer._cancelled) return timer;
          if (timer._hasChildren) {
            forEachChildren(timer, reviveTimer);
          } else {
            forEachChildren(timer, (/** @type {Tween} tween*/ tween) => {
              if (tween._composition !== compositionTypes.none) {
                composeTween(
                  tween,
                  getTweenSiblings(tween.target, tween.property),
                );
              }
            });
          }
          timer._cancelled = 0;
          return timer;
        };

        let timerId = 0;

        /**
         * Base class used to create Timers, Animations and Timelines
         */
        class Timer extends Clock {
          /**
           * @param {TimerParams} [parameters]
           * @param {Timeline} [parent]
           * @param {Number} [parentPosition]
           */
          constructor(parameters = {}, parent = null, parentPosition = 0) {
            super(0);

            const {
              id,
              delay,
              duration,
              reversed,
              alternate,
              loop,
              loopDelay,
              autoplay,
              frameRate,
              playbackRate,
              onComplete,
              onLoop,
              onPause,
              onBegin,
              onBeforeUpdate,
              onUpdate,
            } = parameters;

            if (globals.scope) globals.scope.revertibles.push(this);

            const timerInitTime = parent ? 0 : engine._elapsedTime;
            const timerDefaults = parent ? parent.defaults : globals.defaults;
            const timerDelay = /** @type {Number} */ (
              isFnc(delay) || isUnd(delay) ? timerDefaults.delay : +delay
            );
            const timerDuration =
              isFnc(duration) || isUnd(duration) ? Infinity : +duration;
            const timerLoop = setValue(loop, timerDefaults.loop);
            const timerLoopDelay = setValue(loopDelay, timerDefaults.loopDelay);
            const timerIterationCount =
              timerLoop === true ||
              timerLoop === Infinity ||
              /** @type {Number} */ (timerLoop) < 0
                ? Infinity
                : /** @type {Number} */ (timerLoop) + 1;

            let offsetPosition = 0;

            if (parent) {
              offsetPosition = parentPosition;
            } else {
              let startTime = now();
              // Make sure to tick the engine once if suspended to avoid big gaps with the following offsetPosition calculation
              if (engine.paused) {
                engine.requestTick(startTime);
                startTime = engine._elapsedTime;
              }
              offsetPosition = startTime - engine._startTime;
            }

            // Timer's parameters
            this.id = !isUnd(id) ? id : ++timerId;
            /** @type {Timeline} */
            this.parent = parent;
            // Total duration of the timer
            this.duration =
              clampInfinity(
                (timerDuration + timerLoopDelay) * timerIterationCount -
                  timerLoopDelay,
              ) || minValue;
            /** @type {Boolean} */
            this.backwards = false;
            /** @type {Boolean} */
            this.paused = true;
            /** @type {Boolean} */
            this.began = false;
            /** @type {Boolean} */
            this.completed = false;
            /** @type {Callback<this>} */
            this.onBegin = onBegin || timerDefaults.onBegin;
            /** @type {Callback<this>} */
            this.onBeforeUpdate =
              onBeforeUpdate || timerDefaults.onBeforeUpdate;
            /** @type {Callback<this>} */
            this.onUpdate = onUpdate || timerDefaults.onUpdate;
            /** @type {Callback<this>} */
            this.onLoop = onLoop || timerDefaults.onLoop;
            /** @type {Callback<this>} */
            this.onPause = onPause || timerDefaults.onPause;
            /** @type {Callback<this>} */
            this.onComplete = onComplete || timerDefaults.onComplete;
            /** @type {Number} */
            this.iterationDuration = timerDuration; // Duration of one loop
            /** @type {Number} */
            this.iterationCount = timerIterationCount; // Number of loops
            /** @type {Boolean|ScrollObserver} */
            this._autoplay = parent
              ? false
              : setValue(autoplay, timerDefaults.autoplay);
            /** @type {Number} */
            this._offset = offsetPosition;
            /** @type {Number} */
            this._delay = timerDelay;
            /** @type {Number} */
            this._loopDelay = timerLoopDelay;
            /** @type {Number} */
            this._iterationTime = 0;
            /** @type {Number} */
            this._currentIteration = 0; // Current loop index
            /** @type {Function} */
            this._resolve = noop; // Used by .then()
            /** @type {Boolean} */
            this._running = false;
            /** @type {Number} */
            this._reversed = +setValue(reversed, timerDefaults.reversed);
            /** @type {Number} */
            this._reverse = this._reversed;
            /** @type {Number} */
            this._cancelled = 0;
            /** @type {Boolean} */
            this._alternate = setValue(alternate, timerDefaults.alternate);
            /** @type {Renderable} */
            this._prev = null;
            /** @type {Renderable} */
            this._next = null;

            // Clock's parameters
            /** @type {Number} */
            this._elapsedTime = timerInitTime;
            /** @type {Number} */
            this._startTime = timerInitTime;
            /** @type {Number} */
            this._lastTime = timerInitTime;
            /** @type {Number} */
            this._fps = setValue(frameRate, timerDefaults.frameRate);
            /** @type {Number} */
            this._speed = setValue(playbackRate, timerDefaults.playbackRate);
          }

          get cancelled() {
            return !!this._cancelled;
          }

          /** @param {Boolean} cancelled  */
          set cancelled(cancelled) {
            cancelled ? this.cancel() : this.reset(1).play();
          }

          get currentTime() {
            return clamp(
              round(this._currentTime, globals.precision),
              -this._delay,
              this.duration,
            );
          }

          /** @param {Number} time  */
          set currentTime(time) {
            const paused = this.paused;
            // Pausing the timer is necessary to avoid time jumps on a running instance
            this.pause().seek(+time);
            if (!paused) this.resume();
          }

          get iterationCurrentTime() {
            return round(this._iterationTime, globals.precision);
          }

          /** @param {Number} time  */
          set iterationCurrentTime(time) {
            this.currentTime =
              this.iterationDuration * this._currentIteration + time;
          }

          get progress() {
            return clamp(round(this._currentTime / this.duration, 5), 0, 1);
          }

          /** @param {Number} progress  */
          set progress(progress) {
            this.currentTime = this.duration * progress;
          }

          get iterationProgress() {
            return clamp(
              round(this._iterationTime / this.iterationDuration, 5),
              0,
              1,
            );
          }

          /** @param {Number} progress  */
          set iterationProgress(progress) {
            const iterationDuration = this.iterationDuration;
            this.currentTime =
              iterationDuration * this._currentIteration +
              iterationDuration * progress;
          }

          get currentIteration() {
            return this._currentIteration;
          }

          /** @param {Number} iterationCount  */
          set currentIteration(iterationCount) {
            this.currentTime =
              this.iterationDuration *
              clamp(+iterationCount, 0, this.iterationCount - 1);
          }

          get reversed() {
            return !!this._reversed;
          }

          /** @param {Boolean} reverse  */
          set reversed(reverse) {
            reverse ? this.reverse() : this.play();
          }

          get speed() {
            return super.speed;
          }

          /** @param {Number} playbackRate  */
          set speed(playbackRate) {
            super.speed = playbackRate;
            this.resetTime();
          }

          /**
           * @param  {Number} internalRender
           * @return {this}
           */
          reset(internalRender = 0) {
            // If cancelled, revive the timer before rendering in order to have propertly composed tweens siblings
            reviveTimer(this);
            if (this._reversed && !this._reverse) this.reversed = false;
            // Rendering before updating the completed flag to prevent skips and to make sure the properties are not overridden
            // Setting the iterationTime at the end to force the rendering to happend backwards, otherwise calling .reset() on Timelines might not render children in the right order
            // NOTE: This is only required for Timelines and might be better to move to the Timeline class?
            this._iterationTime = this.iterationDuration;
            // Set tickMode to tickModes.FORCE to force rendering
            tick(this, 0, 1, internalRender, tickModes.FORCE);
            // Reset timer properties after revive / render to make sure the props are not updated again
            resetTimerProperties(this);
            // Also reset children properties
            if (this._hasChildren) {
              forEachChildren(this, resetTimerProperties);
            }
            return this;
          }

          /**
           * @param  {Number} internalRender
           * @return {this}
           */
          init(internalRender = 0) {
            this.fps = this._fps;
            this.speed = this._speed;
            // Manually calling .init() on timelines should render all children intial state
            // Forces all children to render once then render to 0 when reseted
            if (!internalRender && this._hasChildren) {
              tick(this, this.duration, 1, internalRender, tickModes.FORCE);
            }
            this.reset(internalRender);
            // Make sure to set autoplay to false to child timers so it doesn't attempt to autoplay / link
            const autoplay = this._autoplay;
            if (autoplay === true) {
              this.resume();
            } else if (
              autoplay &&
              !isUnd(/** @type {ScrollObserver} */ (autoplay).linked)
            ) {
              /** @type {ScrollObserver} */ (autoplay).link(this);
            }
            return this;
          }

          /** @return {this} */
          resetTime() {
            const timeScale = 1 / (this._speed * engine._speed);
            this._startTime =
              now() - (this._currentTime + this._delay) * timeScale;
            return this;
          }

          /** @return {this} */
          pause() {
            if (this.paused) return this;
            this.paused = true;
            this.onPause(this);
            return this;
          }

          /** @return {this} */
          resume() {
            if (!this.paused) return this;
            this.paused = false;
            // We can safely imediatly render a timer that has no duration and no children
            if (this.duration <= minValue && !this._hasChildren) {
              tick(this, minValue, 0, 0, tickModes.FORCE);
            } else {
              if (!this._running) {
                addChild(engine, this);
                engine._hasChildren = true;
                this._running = true;
              }
              this.resetTime();
              // Forces the timer to advance by at least one frame when the next tick occurs
              this._startTime -= 12;
              engine.wake();
            }
            return this;
          }

          /** @return {this} */
          restart() {
            return this.reset(0).resume();
          }

          /**
           * @param  {Number} time
           * @param  {Boolean|Number} [muteCallbacks]
           * @param  {Boolean|Number} [internalRender]
           * @return {this}
           */
          seek(time, muteCallbacks = 0, internalRender = 0) {
            // Recompose the tween siblings in case the timer has been cancelled
            reviveTimer(this);
            // If you seek a completed animation, otherwise the next play will starts at 0
            this.completed = false;
            const isPaused = this.paused;
            this.paused = true;
            // timer, time, muteCallbacks, internalRender, tickMode
            tick(
              this,
              time + this._delay,
              ~~muteCallbacks,
              ~~internalRender,
              tickModes.AUTO,
            );
            return isPaused ? this : this.resume();
          }

          /** @return {this} */
          alternate() {
            const reversed = this._reversed;
            const count = this.iterationCount;
            const duration = this.iterationDuration;
            // Calculate the maximum iterations possible given the iteration duration
            const iterations =
              count === Infinity ? floor(maxValue / duration) : count;
            this._reversed = +(this._alternate && !(iterations % 2)
              ? reversed
              : !reversed);
            if (count === Infinity) {
              // Handle infinite loops to loop on themself
              this.iterationProgress = this._reversed
                ? 1 - this.iterationProgress
                : this.iterationProgress;
            } else {
              this.seek(duration * iterations - this._currentTime);
            }
            this.resetTime();
            return this;
          }

          /** @return {this} */
          play() {
            if (this._reversed) this.alternate();
            return this.resume();
          }

          /** @return {this} */
          reverse() {
            if (!this._reversed) this.alternate();
            return this.resume();
          }

          // TODO: Move all the animation / tweens / children related code to Animation / Timeline

          /** @return {this} */
          cancel() {
            if (this._hasChildren) {
              forEachChildren(
                this,
                (/** @type {Renderable} */ child) => child.cancel(),
                true,
              );
            } else {
              forEachChildren(this, removeTweenSliblings);
            }
            this._cancelled = 1;
            // Pausing the timer removes it from the engine
            return this.pause();
          }

          /**
           * @param  {Number} newDuration
           * @return {this}
           */
          stretch(newDuration) {
            const currentDuration = this.duration;
            const normlizedDuration = normalizeTime(newDuration);
            if (currentDuration === normlizedDuration) return this;
            const timeScale = newDuration / currentDuration;
            const isSetter = newDuration <= minValue;
            this.duration = isSetter ? minValue : normlizedDuration;
            this.iterationDuration = isSetter
              ? minValue
              : normalizeTime(this.iterationDuration * timeScale);
            this._offset *= timeScale;
            this._delay *= timeScale;
            this._loopDelay *= timeScale;
            return this;
          }

          /**
           * Cancels the timer by seeking it back to 0 and reverting the attached scroller if necessary
           * @return {this}
           */
          revert() {
            tick(this, 0, 1, 0, tickModes.AUTO);
            const ap = /** @type {ScrollObserver} */ (this._autoplay);
            if (ap && ap.linked && ap.linked === this) ap.revert();
            return this.cancel();
          }

          /**
           * Imediatly completes the timer, cancels it and triggers the onComplete callback
           * @return {this}
           */
          complete() {
            return this.seek(this.duration).cancel();
          }

          /**
           * @param  {Callback<this>} [callback]
           * @return {Promise}
           */
          then(callback = noop) {
            const then = this.then;
            const onResolve = () => {
              // this.then = null prevents infinite recursion if returned by an async function
              // https://github.com/juliangarnierorg/anime-beta/issues/26
              this.then = null;
              callback(this);
              this.then = then;
              this._resolve = noop;
            };
            return new Promise((r) => {
              this._resolve = () => r(onResolve());
              // Make sure to resolve imediatly if the timer has already completed
              if (this.completed) this._resolve();
              return this;
            });
          }
        }

        /**
         * @param {TimerParams} [parameters]
         * @return {Timer}
         */
        const createTimer = (parameters) =>
          new Timer(parameters, null, 0).init();

        /** @type {EasingFunction} */
        const none = (t) => t;

        // Cubic Bezier solver adapted from https://github.com/gre/bezier-ease © Gaëtan Renaudeau

        /**
         * @param  {Number} aT
         * @param  {Number} aA1
         * @param  {Number} aA2
         * @return {Number}
         */
        const calcBezier = (aT, aA1, aA2) =>
          (((1 - 3 * aA2 + 3 * aA1) * aT + (3 * aA2 - 6 * aA1)) * aT +
            3 * aA1) *
          aT;

        /**
         * @param  {Number} aX
         * @param  {Number} mX1
         * @param  {Number} mX2
         * @return {Number}
         */
        const binarySubdivide = (aX, mX1, mX2) => {
          let aA = 0,
            aB = 1,
            currentX,
            currentT,
            i = 0;
          do {
            currentT = aA + (aB - aA) / 2;
            currentX = calcBezier(currentT, mX1, mX2) - aX;
            if (currentX > 0) {
              aB = currentT;
            } else {
              aA = currentT;
            }
          } while (abs(currentX) > 0.0000001 && ++i < 100);
          return currentT;
        };

        /**
         * @param  {Number} [mX1]
         * @param  {Number} [mY1]
         * @param  {Number} [mX2]
         * @param  {Number} [mY2]
         * @return {EasingFunction}
         */

        const cubicBezier = (mX1 = 0.5, mY1 = 0.0, mX2 = 0.5, mY2 = 1.0) =>
          mX1 === mY1 && mX2 === mY2
            ? none
            : (t) =>
                t === 0 || t === 1
                  ? t
                  : calcBezier(binarySubdivide(t, mX1, mX2), mY1, mY2);

        /**
         * Steps ease implementation https://developer.mozilla.org/fr/docs/Web/CSS/transition-timing-function
         * Only covers 'end' and 'start' jumpterms
         * @param  {Number} steps
         * @param  {Boolean} [fromStart]
         * @return {EasingFunction}
         */
        const steps = (steps = 10, fromStart) => {
          const roundMethod = fromStart ? ceil : floor;
          return (t) => roundMethod(clamp(t, 0, 1) * steps) * (1 / steps);
        };

        /**
         * Without parameters, the linear function creates a non-eased transition.
         * Parameters, if used, creates a piecewise linear easing by interpolating linearly between the specified points.
         * @param  {...String|Number} [args] - Points
         * @return {EasingFunction}
         */
        const linear = (...args) => {
          const argsLength = args.length;
          if (!argsLength) return none;
          const totalPoints = argsLength - 1;
          const firstArg = args[0];
          const lastArg = args[totalPoints];
          const xPoints = [0];
          const yPoints = [parseNumber(firstArg)];
          for (let i = 1; i < totalPoints; i++) {
            const arg = args[i];
            const splitValue = isStr(arg)
              ? /** @type {String} */ (arg).trim().split(' ')
              : [arg];
            const value = splitValue[0];
            const percent = splitValue[1];
            xPoints.push(
              !isUnd(percent) ? parseNumber(percent) / 100 : i / totalPoints,
            );
            yPoints.push(parseNumber(value));
          }
          yPoints.push(parseNumber(lastArg));
          xPoints.push(1);
          return function easeLinear(t) {
            for (let i = 1, l = xPoints.length; i < l; i++) {
              const currentX = xPoints[i];
              if (t <= currentX) {
                const prevX = xPoints[i - 1];
                const prevY = yPoints[i - 1];
                return (
                  prevY +
                  ((yPoints[i] - prevY) * (t - prevX)) / (currentX - prevX)
                );
              }
            }
            return yPoints[yPoints.length - 1];
          };
        };

        /**
         * Generate random steps
         * @param  {Number} [length] - The number of steps
         * @param  {Number} [randomness] - How strong the randomness is
         * @return {EasingFunction}
         */
        const irregular = (length = 10, randomness = 1) => {
          const values = [0];
          const total = length - 1;
          for (let i = 1; i < total; i++) {
            const previousValue = values[i - 1];
            const spacing = i / total;
            const segmentEnd = (i + 1) / total;
            const randomVariation =
              spacing + (segmentEnd - spacing) * Math.random();
            // Mix the even spacing and random variation based on the randomness parameter
            const randomValue =
              spacing * (1 - randomness) + randomVariation * randomness;
            values.push(clamp(randomValue, previousValue, 1));
          }
          values.push(1);
          return linear(...values);
        };

        // Easing functions adapted from http://www.robertpenner.com/ease © Robert Penner

        /**
         * @callback PowerEasing
         * @param {Number|String} [power=1.675]
         * @return {EasingFunction}
         */

        /**
         * @callback BackEasing
         * @param {Number|String} [overshoot=1.70158]
         * @return {EasingFunction}
         */

        /**
         * @callback ElasticEasing
         * @param {Number|String} [amplitude=1]
         * @param {Number|String} [period=.3]
         * @return {EasingFunction}
         */

        /**
         * @callback EaseFactory
         * @param {Number|String} [paramA]
         * @param {Number|String} [paramB]
         * @return {EasingFunction|Number}
         */

        /** @typedef {PowerEasing|BackEasing|ElasticEasing} EasesFactory */

        const halfPI = PI / 2;
        const doublePI = PI * 2;
        /** @type {PowerEasing} */
        const easeInPower =
          (p = 1.68) =>
          (t) =>
            pow(t, +p);

        /** @type {Record<String, EasesFactory|EasingFunction>} */
        const easeInFunctions = {
          [emptyString]: easeInPower,
          Quad: easeInPower(2),
          Cubic: easeInPower(3),
          Quart: easeInPower(4),
          Quint: easeInPower(5),
          /** @type {EasingFunction} */
          Sine: (t) => 1 - cos(t * halfPI),
          /** @type {EasingFunction} */
          Circ: (t) => 1 - sqrt(1 - t * t),
          /** @type {EasingFunction} */
          Expo: (t) => (t ? pow(2, 10 * t - 10) : 0),
          /** @type {EasingFunction} */
          Bounce: (t) => {
            let pow2,
              b = 4;
            while (t < ((pow2 = pow(2, --b)) - 1) / 11);
            return 1 / pow(4, 3 - b) - 7.5625 * pow((pow2 * 3 - 2) / 22 - t, 2);
          },
          /** @type {BackEasing} */
          Back:
            (overshoot = 1.70158) =>
            (t) =>
              (+overshoot + 1) * t * t * t - +overshoot * t * t,
          /** @type {ElasticEasing} */
          Elastic: (amplitude = 1, period = 0.3) => {
            const a = clamp(+amplitude, 1, 10);
            const p = clamp(+period, minValue, 2);
            const s = (p / doublePI) * asin(1 / a);
            const e = doublePI / p;
            return (t) =>
              t === 0 || t === 1
                ? t
                : -a * pow(2, -10 * (1 - t)) * sin((1 - t - s) * e);
          },
        };

        /**
         * @callback EaseType
         * @param {EasingFunction} Ease
         * @return {EasingFunction}
         */

        /** @type {Record<String, EaseType>} */
        const easeTypes = {
          in: (easeIn) => (t) => easeIn(t),
          out: (easeIn) => (t) => 1 - easeIn(1 - t),
          inOut: (easeIn) => (t) =>
            t < 0.5 ? easeIn(t * 2) / 2 : 1 - easeIn(t * -2 + 2) / 2,
          outIn: (easeIn) => (t) =>
            t < 0.5 ? (1 - easeIn(1 - t * 2)) / 2 : (easeIn(t * 2 - 1) + 1) / 2,
        };

        /**
         * @param  {String} string
         * @param  {Record<String, EasesFactory|EasingFunction>} easesFunctions
         * @param  {Object} easesLookups
         * @return {EasingFunction}
         */
        const parseEaseString = (string, easesFunctions, easesLookups) => {
          if (easesLookups[string]) return easesLookups[string];
          if (string.indexOf('(') <= -1) {
            const hasParams =
              easeTypes[string] ||
              string.includes('Back') ||
              string.includes('Elastic');
            const parsedFn = /** @type {EasingFunction} */ (
              hasParams
                ? /** @type {EasesFactory} */ (easesFunctions[string])()
                : easesFunctions[string]
            );
            return parsedFn ? (easesLookups[string] = parsedFn) : none;
          } else {
            const split = string.slice(0, -1).split('(');
            const parsedFn = /** @type {EasesFactory} */ (
              easesFunctions[split[0]]
            );
            return parsedFn
              ? (easesLookups[string] = parsedFn(...split[1].split(',')))
              : none;
          }
        };

        /**
         * @typedef  {Object} EasesFunctions
         * @property {typeof linear} linear
         * @property {typeof irregular} irregular
         * @property {typeof steps} steps
         * @property {typeof cubicBezier} cubicBezier
         * @property {PowerEasing} in
         * @property {PowerEasing} out
         * @property {PowerEasing} inOut
         * @property {PowerEasing} outIn
         * @property {EasingFunction} inQuad
         * @property {EasingFunction} outQuad
         * @property {EasingFunction} inOutQuad
         * @property {EasingFunction} outInQuad
         * @property {EasingFunction} inCubic
         * @property {EasingFunction} outCubic
         * @property {EasingFunction} inOutCubic
         * @property {EasingFunction} outInCubic
         * @property {EasingFunction} inQuart
         * @property {EasingFunction} outQuart
         * @property {EasingFunction} inOutQuart
         * @property {EasingFunction} outInQuart
         * @property {EasingFunction} inQuint
         * @property {EasingFunction} outQuint
         * @property {EasingFunction} inOutQuint
         * @property {EasingFunction} outInQuint
         * @property {EasingFunction} inSine
         * @property {EasingFunction} outSine
         * @property {EasingFunction} inOutSine
         * @property {EasingFunction} outInSine
         * @property {EasingFunction} inCirc
         * @property {EasingFunction} outCirc
         * @property {EasingFunction} inOutCirc
         * @property {EasingFunction} outInCirc
         * @property {EasingFunction} inExpo
         * @property {EasingFunction} outExpo
         * @property {EasingFunction} inOutExpo
         * @property {EasingFunction} outInExpo
         * @property {EasingFunction} inBounce
         * @property {EasingFunction} outBounce
         * @property {EasingFunction} inOutBounce
         * @property {EasingFunction} outInBounce
         * @property {BackEasing} inBack
         * @property {BackEasing} outBack
         * @property {BackEasing} inOutBack
         * @property {BackEasing} outInBack
         * @property {ElasticEasing} inElastic
         * @property {ElasticEasing} outElastic
         * @property {ElasticEasing} inOutElastic
         * @property {ElasticEasing} outInElastic
         */

        const eases = /*#__PURE__*/ (() => {
          const list = { linear, irregular, steps, cubicBezier };
          for (let type in easeTypes) {
            for (let name in easeInFunctions) {
              const easeIn = easeInFunctions[name];
              const easeType = easeTypes[type];
              list[type + name] = /** @type {EasesFactory|EasingFunction} */ (
                name === emptyString || name === 'Back' || name === 'Elastic'
                  ? (a, b) =>
                      easeType(/** @type {EasesFactory} */ (easeIn)(a, b))
                  : easeType(/** @type {EasingFunction} */ (easeIn))
              );
            }
          }
          return /** @type {EasesFunctions} */ (list);
        })();

        /** @type {Record<String, EasingFunction>} */
        const JSEasesLookups = { linear: none };

        /**
         * @param  {EasingParam} ease
         * @return {EasingFunction}
         */
        const parseEasings = (ease) =>
          isFnc(ease)
            ? ease
            : isStr(ease)
              ? parseEaseString(
                  /** @type {String} */ (ease),
                  eases,
                  JSEasesLookups,
                )
              : none;

        const propertyNamesCache = {};

        /**
         * @param  {String} propertyName
         * @param  {Target} target
         * @param  {tweenTypes} tweenType
         * @return {String}
         */
        const sanitizePropertyName = (propertyName, target, tweenType) => {
          if (tweenType === tweenTypes.TRANSFORM) {
            const t = shortTransforms.get(propertyName);
            return t ? t : propertyName;
          } else if (
            tweenType === tweenTypes.CSS ||
            // Handle special cases where properties like "strokeDashoffset" needs to be set as "stroke-dashoffset"
            // but properties like "baseFrequency" should stay in lowerCamelCase
            (tweenType === tweenTypes.ATTRIBUTE &&
              isSvg(target) &&
              propertyName in /** @type {DOMTarget} */ (target).style)
          ) {
            const cachedPropertyName = propertyNamesCache[propertyName];
            if (cachedPropertyName) {
              return cachedPropertyName;
            } else {
              const lowerCaseName = propertyName
                ? toLowerCase(propertyName)
                : propertyName;
              propertyNamesCache[propertyName] = lowerCaseName;
              return lowerCaseName;
            }
          } else {
            return propertyName;
          }
        };

        const angleUnitsMap = { deg: 1, rad: 180 / PI, turn: 360 };
        const convertedValuesCache = {};

        /**
         * @param  {DOMTarget} el
         * @param  {TweenDecomposedValue} decomposedValue
         * @param  {String} unit
         * @param  {Boolean} [force]
         * @return {TweenDecomposedValue}
         */
        const convertValueUnit = (el, decomposedValue, unit, force = false) => {
          const currentUnit = decomposedValue.u;
          const currentNumber = decomposedValue.n;
          if (decomposedValue.t === valueTypes.UNIT && currentUnit === unit) {
            // TODO: Check if checking against the same unit string is necessary
            return decomposedValue;
          }
          const cachedKey = currentNumber + currentUnit + unit;
          const cached = convertedValuesCache[cachedKey];
          if (!isUnd(cached) && !force) {
            decomposedValue.n = cached;
          } else {
            let convertedValue;
            if (currentUnit in angleUnitsMap) {
              convertedValue =
                (currentNumber * angleUnitsMap[currentUnit]) /
                angleUnitsMap[unit];
            } else {
              const baseline = 100;
              const tempEl = /** @type {DOMTarget} */ (el.cloneNode());
              const parentNode = el.parentNode;
              const parentEl =
                parentNode && parentNode !== doc ? parentNode : doc.body;
              parentEl.appendChild(tempEl);
              const elStyle = tempEl.style;
              elStyle.width = baseline + currentUnit;
              const currentUnitWidth =
                /** @type {HTMLElement} */ (tempEl).offsetWidth || baseline;
              elStyle.width = baseline + unit;
              const newUnitWidth =
                /** @type {HTMLElement} */ (tempEl).offsetWidth || baseline;
              const factor = currentUnitWidth / newUnitWidth;
              parentEl.removeChild(tempEl);
              convertedValue = factor * currentNumber;
            }
            decomposedValue.n = convertedValue;
            convertedValuesCache[cachedKey] = convertedValue;
          }
          decomposedValue.t === valueTypes.UNIT;
          decomposedValue.u = unit;
          return decomposedValue;
        };

        /**
         * @template {Renderable} T
         * @param {T} renderable
         * @return {T}
         */
        const cleanInlineStyles = (renderable) => {
          // Allow cleanInlineStyles() to be called on timelines
          if (renderable._hasChildren) {
            forEachChildren(renderable, cleanInlineStyles, true);
          } else {
            const animation = /** @type {JSAnimation} */ (renderable);
            animation.pause();
            forEachChildren(animation, (/** @type {Tween} */ tween) => {
              const tweenProperty = tween.property;
              const tweenTarget = tween.target;
              if (tweenTarget[isDomSymbol]) {
                const targetStyle = /** @type {DOMTarget} */ (tweenTarget)
                  .style;
                const originalInlinedValue =
                  animation._inlineStyles[tweenProperty];
                if (tween._tweenType === tweenTypes.TRANSFORM) {
                  const cachedTransforms = tweenTarget[transformsSymbol];
                  if (
                    isUnd(originalInlinedValue) ||
                    originalInlinedValue === emptyString
                  ) {
                    delete cachedTransforms[tweenProperty];
                  } else {
                    cachedTransforms[tweenProperty] = originalInlinedValue;
                  }
                  if (tween._renderTransforms) {
                    if (!Object.keys(cachedTransforms).length) {
                      targetStyle.removeProperty('transform');
                    } else {
                      let str = emptyString;
                      for (let key in cachedTransforms) {
                        str +=
                          transformsFragmentStrings[key] +
                          cachedTransforms[key] +
                          ') ';
                      }
                      targetStyle.transform = str;
                    }
                  }
                } else {
                  if (
                    isUnd(originalInlinedValue) ||
                    originalInlinedValue === emptyString
                  ) {
                    targetStyle.removeProperty(tweenProperty);
                  } else {
                    targetStyle[tweenProperty] = originalInlinedValue;
                  }
                }
                if (animation._tail === tween) {
                  animation.targets.forEach((t) => {
                    if (
                      t.getAttribute &&
                      t.getAttribute('style') === emptyString
                    ) {
                      t.removeAttribute('style');
                    }
                  });
                }
              }
            });
          }
          return renderable;
        };

        // Defines decomposed values target objects only once and mutate their properties later to avoid GC
        // TODO: Maybe move the objects creation to values.js and use the decompose function to create the base object
        const fromTargetObject = createDecomposedValueTargetObject();
        const toTargetObject = createDecomposedValueTargetObject();
        const toFunctionStore = { func: null };
        const keyframesTargetArray = [null];
        const fastSetValuesArray = [null, null];
        /** @type {TweenKeyValue} */
        const keyObjectTarget = { to: null };

        let tweenId = 0;
        let keyframes;
        /** @type {TweenParamsOptions & TweenValues} */
        let key;

        /**
         * @param {DurationKeyframes | PercentageKeyframes} keyframes
         * @param {AnimationParams} parameters
         * @return {AnimationParams}
         */
        const generateKeyframes = (keyframes, parameters) => {
          /** @type {AnimationParams} */
          const properties = {};
          if (isArr(keyframes)) {
            const propertyNames = []
              .concat(
                .../** @type {DurationKeyframes} */ (keyframes).map((key) =>
                  Object.keys(key),
                ),
              )
              .filter(isKey);
            for (let i = 0, l = propertyNames.length; i < l; i++) {
              const propName = propertyNames[i];
              const propArray = /** @type {DurationKeyframes} */ (
                keyframes
              ).map((key) => {
                /** @type {TweenKeyValue} */
                const newKey = {};
                for (let p in key) {
                  const keyValue = /** @type {TweenPropValue} */ (key[p]);
                  if (isKey(p)) {
                    if (p === propName) {
                      newKey.to = keyValue;
                    }
                  } else {
                    newKey[p] = keyValue;
                  }
                }
                return newKey;
              });
              properties[propName] = /** @type {ArraySyntaxValue} */ (
                propArray
              );
            }
          } else {
            const totalDuration = /** @type {Number} */ (
              setValue(parameters.duration, globals.defaults.duration)
            );
            const keys = Object.keys(keyframes)
              .map((key) => {
                return { o: parseFloat(key) / 100, p: keyframes[key] };
              })
              .sort((a, b) => a.o - b.o);
            keys.forEach((key) => {
              const offset = key.o;
              const prop = key.p;
              for (let name in prop) {
                if (isKey(name)) {
                  let propArray = /** @type {Array} */ (properties[name]);
                  if (!propArray) propArray = properties[name] = [];
                  const duration = offset * totalDuration;
                  let length = propArray.length;
                  let prevKey = propArray[length - 1];
                  const keyObj = { to: prop[name] };
                  let durProgress = 0;
                  for (let i = 0; i < length; i++) {
                    durProgress += propArray[i].duration;
                  }
                  if (length === 1) {
                    keyObj.from = prevKey.to;
                  }
                  if (prop.ease) {
                    keyObj.ease = prop.ease;
                  }
                  keyObj.duration = duration - (length ? durProgress : 0);
                  propArray.push(keyObj);
                }
              }
              return key;
            });

            for (let name in properties) {
              const propArray = /** @type {Array} */ (properties[name]);
              let prevEase;
              // let durProgress = 0
              for (let i = 0, l = propArray.length; i < l; i++) {
                const prop = propArray[i];
                // Emulate WAPPI easing parameter position
                const currentEase = prop.ease;
                prop.ease = prevEase ? prevEase : undefined;
                prevEase = currentEase;
                // durProgress += prop.duration;
                // if (i === l - 1 && durProgress !== totalDuration) {
                //   propArray.push({ from: prop.to, ease: prop.ease, duration: totalDuration - durProgress })
                // }
              }
              if (!propArray[0].duration) {
                propArray.shift();
              }
            }
          }

          return properties;
        };

        class JSAnimation extends Timer {
          /**
           * @param {TargetsParam} targets
           * @param {AnimationParams} parameters
           * @param {Timeline} [parent]
           * @param {Number} [parentPosition]
           * @param {Boolean} [fastSet=false]
           * @param {Number} [index=0]
           * @param {Number} [length=0]
           */
          constructor(
            targets,
            parameters,
            parent,
            parentPosition,
            fastSet = false,
            index = 0,
            length = 0,
          ) {
            super(
              /** @type {TimerParams&AnimationParams} */ (parameters),
              parent,
              parentPosition,
            );

            const parsedTargets = registerTargets(targets);
            const targetsLength = parsedTargets.length;

            // If the parameters object contains a "keyframes" property, convert all the keyframes values to regular properties

            const kfParams = /** @type {AnimationParams} */ (parameters)
              .keyframes;
            const params = /** @type {AnimationParams} */ (
              kfParams
                ? mergeObjects(
                    generateKeyframes(
                      /** @type {DurationKeyframes} */ (kfParams),
                      parameters,
                    ),
                    parameters,
                  )
                : parameters
            );

            const {
              delay,
              duration,
              ease,
              playbackEase,
              modifier,
              composition,
              onRender,
            } = params;

            const animDefaults = parent ? parent.defaults : globals.defaults;
            const animaPlaybackEase = setValue(
              playbackEase,
              animDefaults.playbackEase,
            );
            const animEase = animaPlaybackEase
              ? parseEasings(animaPlaybackEase)
              : null;
            const hasSpring =
              !isUnd(ease) && !isUnd(/** @type {Spring} */ (ease).ease);
            const tEasing = hasSpring
              ? /** @type {Spring} */ (ease).ease
              : setValue(ease, animEase ? 'linear' : animDefaults.ease);
            const tDuration = hasSpring
              ? /** @type {Spring} */ (ease).duration
              : setValue(duration, animDefaults.duration);
            const tDelay = setValue(delay, animDefaults.delay);
            const tModifier = modifier || animDefaults.modifier;
            // If no composition is defined and the targets length is high (>= 1000) set the composition to 'none' (0) for faster tween creation
            const tComposition =
              isUnd(composition) && targetsLength >= K
                ? compositionTypes.none
                : !isUnd(composition)
                  ? composition
                  : animDefaults.composition;
            // TODO: Do not create an empty object until we know the animation will generate inline styles
            const animInlineStyles = {};
            // const absoluteOffsetTime = this._offset;
            const absoluteOffsetTime =
              this._offset + (parent ? parent._offset : 0);

            let iterationDuration = NaN;
            let iterationDelay = NaN;
            let animationAnimationLength = 0;
            let shouldTriggerRender = 0;

            for (
              let targetIndex = 0;
              targetIndex < targetsLength;
              targetIndex++
            ) {
              const target = parsedTargets[targetIndex];
              const ti = index || targetIndex;
              const tl = length || targetsLength;

              let lastTransformGroupIndex = NaN;
              let lastTransformGroupLength = NaN;

              for (let p in params) {
                if (isKey(p)) {
                  const tweenType = getTweenType(target, p);

                  const propName = sanitizePropertyName(p, target, tweenType);

                  let propValue = params[p];

                  const isPropValueArray = isArr(propValue);

                  if (fastSet && !isPropValueArray) {
                    fastSetValuesArray[0] = propValue;
                    fastSetValuesArray[1] = propValue;
                    propValue = fastSetValuesArray;
                  }

                  // TODO: Allow nested keyframes inside ObjectValue value (prop: { to: [.5, 1, .75, 2, 3] })
                  // Normalize property values to valid keyframe syntax:
                  // [x, y] to [{to: [x, y]}] or {to: x} to [{to: x}] or keep keys syntax [{}, {}, {}...]
                  // const keyframes = isArr(propValue) ? propValue.length === 2 && !isObj(propValue[0]) ? [{ to: propValue }] : propValue : [propValue];
                  if (isPropValueArray) {
                    const arrayLength = /** @type {Array} */ (propValue).length;
                    const isNotObjectValue = !isObj(propValue[0]);
                    // Convert [x, y] to [{to: [x, y]}]
                    if (arrayLength === 2 && isNotObjectValue) {
                      keyObjectTarget.to = /** @type {TweenParamValue} */ (
                        /** @type {unknown} */ (propValue)
                      );
                      keyframesTargetArray[0] = keyObjectTarget;
                      keyframes = keyframesTargetArray;
                      // Convert [x, y, z] to [[x, y], z]
                    } else if (arrayLength > 2 && isNotObjectValue) {
                      keyframes = [];
                      /** @type {Array.<Number>} */ (propValue).forEach(
                        (v, i) => {
                          if (!i) {
                            fastSetValuesArray[0] = v;
                          } else if (i === 1) {
                            fastSetValuesArray[1] = v;
                            keyframes.push(fastSetValuesArray);
                          } else {
                            keyframes.push(v);
                          }
                        },
                      );
                    } else {
                      keyframes = /** @type {Array.<TweenKeyValue>} */ (
                        propValue
                      );
                    }
                  } else {
                    keyframesTargetArray[0] = propValue;
                    keyframes = keyframesTargetArray;
                  }

                  let siblings = null;
                  let prevTween = null;
                  let firstTweenChangeStartTime = NaN;
                  let lastTweenChangeEndTime = 0;
                  let tweenIndex = 0;

                  for (let l = keyframes.length; tweenIndex < l; tweenIndex++) {
                    const keyframe = keyframes[tweenIndex];

                    if (isObj(keyframe)) {
                      key = keyframe;
                    } else {
                      keyObjectTarget.to = /** @type {TweenParamValue} */ (
                        keyframe
                      );
                      key = keyObjectTarget;
                    }

                    toFunctionStore.func = null;

                    const computedToValue = getFunctionValue(
                      key.to,
                      target,
                      ti,
                      tl,
                      toFunctionStore,
                    );

                    let tweenToValue;
                    // Allows function based values to return an object syntax value ({to: v})
                    if (isObj(computedToValue) && !isUnd(computedToValue.to)) {
                      key = computedToValue;
                      tweenToValue = computedToValue.to;
                    } else {
                      tweenToValue = computedToValue;
                    }
                    const tweenFromValue = getFunctionValue(
                      key.from,
                      target,
                      ti,
                      tl,
                    );
                    const keyEasing = key.ease;
                    const hasSpring =
                      !isUnd(keyEasing) &&
                      !isUnd(/** @type {Spring} */ (keyEasing).ease);
                    // Easing are treated differently and don't accept function based value to prevent having to pass a function wrapper that returns an other function all the time
                    const tweenEasing = hasSpring
                      ? /** @type {Spring} */ (keyEasing).ease
                      : keyEasing || tEasing;
                    // Calculate default individual keyframe duration by dividing the tl of keyframes
                    const tweenDuration = hasSpring
                      ? /** @type {Spring} */ (keyEasing).duration
                      : getFunctionValue(
                          setValue(
                            key.duration,
                            l > 1
                              ? getFunctionValue(tDuration, target, ti, tl) / l
                              : tDuration,
                          ),
                          target,
                          ti,
                          tl,
                        );
                    // Default delay value should only be applied to the first tween
                    const tweenDelay = getFunctionValue(
                      setValue(key.delay, !tweenIndex ? tDelay : 0),
                      target,
                      ti,
                      tl,
                    );
                    const computedComposition = getFunctionValue(
                      setValue(key.composition, tComposition),
                      target,
                      ti,
                      tl,
                    );
                    const tweenComposition = isNum(computedComposition)
                      ? computedComposition
                      : compositionTypes[computedComposition];
                    // Modifiers are treated differently and don't accept function based value to prevent having to pass a function wrapper
                    const tweenModifier = key.modifier || tModifier;
                    const hasFromvalue = !isUnd(tweenFromValue);
                    const hasToValue = !isUnd(tweenToValue);
                    const isFromToArray = isArr(tweenToValue);
                    const isFromToValue =
                      isFromToArray || (hasFromvalue && hasToValue);
                    const tweenStartTime = prevTween
                      ? lastTweenChangeEndTime + tweenDelay
                      : tweenDelay;
                    const absoluteStartTime =
                      absoluteOffsetTime + tweenStartTime;

                    // Force a onRender callback if the animation contains at least one from value and autoplay is set to false
                    if (!shouldTriggerRender && (hasFromvalue || isFromToArray))
                      shouldTriggerRender = 1;

                    let prevSibling = prevTween;

                    if (tweenComposition !== compositionTypes.none) {
                      if (!siblings)
                        siblings = getTweenSiblings(target, propName);
                      let nextSibling = siblings._head;
                      // Iterate trough all the next siblings until we find a sibling with an equal or inferior start time
                      while (
                        nextSibling &&
                        !nextSibling._isOverridden &&
                        nextSibling._absoluteStartTime <= absoluteStartTime
                      ) {
                        prevSibling = nextSibling;
                        nextSibling = nextSibling._nextRep;
                        // Overrides all the next siblings if the next sibling starts at the same time of after as the new tween start time
                        if (
                          nextSibling &&
                          nextSibling._absoluteStartTime >= absoluteStartTime
                        ) {
                          while (nextSibling) {
                            overrideTween(nextSibling);
                            // This will ends both the current while loop and the upper one once all the next sibllings have been overriden
                            nextSibling = nextSibling._nextRep;
                          }
                        }
                      }
                    }

                    // Decompose values
                    if (isFromToValue) {
                      decomposeRawValue(
                        isFromToArray
                          ? getFunctionValue(tweenToValue[0], target, ti, tl)
                          : tweenFromValue,
                        fromTargetObject,
                      );
                      decomposeRawValue(
                        isFromToArray
                          ? getFunctionValue(
                              tweenToValue[1],
                              target,
                              ti,
                              tl,
                              toFunctionStore,
                            )
                          : tweenToValue,
                        toTargetObject,
                      );
                      if (fromTargetObject.t === valueTypes.NUMBER) {
                        if (prevSibling) {
                          if (prevSibling._valueType === valueTypes.UNIT) {
                            fromTargetObject.t = valueTypes.UNIT;
                            fromTargetObject.u = prevSibling._unit;
                          }
                        } else {
                          decomposeRawValue(
                            getOriginalAnimatableValue(
                              target,
                              propName,
                              tweenType,
                              animInlineStyles,
                            ),
                            decomposedOriginalValue,
                          );
                          if (decomposedOriginalValue.t === valueTypes.UNIT) {
                            fromTargetObject.t = valueTypes.UNIT;
                            fromTargetObject.u = decomposedOriginalValue.u;
                          }
                        }
                      }
                    } else {
                      if (hasToValue) {
                        decomposeRawValue(tweenToValue, toTargetObject);
                      } else {
                        if (prevTween) {
                          decomposeTweenValue(prevTween, toTargetObject);
                        } else {
                          // No need to get and parse the original value if the tween is part of a timeline and has a previous sibling part of the same timeline
                          decomposeRawValue(
                            parent &&
                              prevSibling &&
                              prevSibling.parent.parent === parent
                              ? prevSibling._value
                              : getOriginalAnimatableValue(
                                  target,
                                  propName,
                                  tweenType,
                                  animInlineStyles,
                                ),
                            toTargetObject,
                          );
                        }
                      }
                      if (hasFromvalue) {
                        decomposeRawValue(tweenFromValue, fromTargetObject);
                      } else {
                        if (prevTween) {
                          decomposeTweenValue(prevTween, fromTargetObject);
                        } else {
                          decomposeRawValue(
                            parent &&
                              prevSibling &&
                              prevSibling.parent.parent === parent
                              ? prevSibling._value
                              : // No need to get and parse the original value if the tween is part of a timeline and has a previous sibling part of the same timeline
                                getOriginalAnimatableValue(
                                  target,
                                  propName,
                                  tweenType,
                                  animInlineStyles,
                                ),
                            fromTargetObject,
                          );
                        }
                      }
                    }

                    // Apply operators
                    if (fromTargetObject.o) {
                      fromTargetObject.n = getRelativeValue(
                        !prevSibling
                          ? decomposeRawValue(
                              getOriginalAnimatableValue(
                                target,
                                propName,
                                tweenType,
                                animInlineStyles,
                              ),
                              decomposedOriginalValue,
                            ).n
                          : prevSibling._toNumber,
                        fromTargetObject.n,
                        fromTargetObject.o,
                      );
                    }

                    if (toTargetObject.o) {
                      toTargetObject.n = getRelativeValue(
                        fromTargetObject.n,
                        toTargetObject.n,
                        toTargetObject.o,
                      );
                    }

                    // Values omogenisation in cases of type difference between "from" and "to"
                    if (fromTargetObject.t !== toTargetObject.t) {
                      if (
                        fromTargetObject.t === valueTypes.COMPLEX ||
                        toTargetObject.t === valueTypes.COMPLEX
                      ) {
                        const complexValue =
                          fromTargetObject.t === valueTypes.COMPLEX
                            ? fromTargetObject
                            : toTargetObject;
                        const notComplexValue =
                          fromTargetObject.t === valueTypes.COMPLEX
                            ? toTargetObject
                            : fromTargetObject;
                        notComplexValue.t = valueTypes.COMPLEX;
                        notComplexValue.s = cloneArray(complexValue.s);
                        notComplexValue.d = complexValue.d.map(
                          () => notComplexValue.n,
                        );
                      } else if (
                        fromTargetObject.t === valueTypes.UNIT ||
                        toTargetObject.t === valueTypes.UNIT
                      ) {
                        const unitValue =
                          fromTargetObject.t === valueTypes.UNIT
                            ? fromTargetObject
                            : toTargetObject;
                        const notUnitValue =
                          fromTargetObject.t === valueTypes.UNIT
                            ? toTargetObject
                            : fromTargetObject;
                        notUnitValue.t = valueTypes.UNIT;
                        notUnitValue.u = unitValue.u;
                      } else if (
                        fromTargetObject.t === valueTypes.COLOR ||
                        toTargetObject.t === valueTypes.COLOR
                      ) {
                        const colorValue =
                          fromTargetObject.t === valueTypes.COLOR
                            ? fromTargetObject
                            : toTargetObject;
                        const notColorValue =
                          fromTargetObject.t === valueTypes.COLOR
                            ? toTargetObject
                            : fromTargetObject;
                        notColorValue.t = valueTypes.COLOR;
                        notColorValue.s = colorValue.s;
                        notColorValue.d = [0, 0, 0, 1];
                      }
                    }

                    // Unit conversion
                    if (fromTargetObject.u !== toTargetObject.u) {
                      let valueToConvert = toTargetObject.u
                        ? fromTargetObject
                        : toTargetObject;
                      valueToConvert = convertValueUnit(
                        /** @type {DOMTarget} */ (target),
                        valueToConvert,
                        toTargetObject.u
                          ? toTargetObject.u
                          : fromTargetObject.u,
                        false,
                      );
                      // TODO:
                      // convertValueUnit(target, to.u ? from : to, to.u ? to.u : from.u);
                    }

                    // Fill in non existing complex values
                    if (
                      toTargetObject.d &&
                      fromTargetObject.d &&
                      toTargetObject.d.length !== fromTargetObject.d.length
                    ) {
                      const longestValue =
                        fromTargetObject.d.length > toTargetObject.d.length
                          ? fromTargetObject
                          : toTargetObject;
                      const shortestValue =
                        longestValue === fromTargetObject
                          ? toTargetObject
                          : fromTargetObject;
                      // TODO: Check if n should be used instead of 0 for default complex values
                      shortestValue.d = longestValue.d.map((_, i) =>
                        isUnd(shortestValue.d[i]) ? 0 : shortestValue.d[i],
                      );
                      shortestValue.s = cloneArray(longestValue.s);
                    }

                    // Tween factory

                    // Rounding is necessary here to minimize floating point errors
                    const tweenUpdateDuration = round(
                      +tweenDuration || minValue,
                      12,
                    );

                    /** @type {Tween} */
                    const tween = {
                      parent: this,
                      id: tweenId++,
                      property: propName,
                      target: target,
                      _value: null,
                      _func: toFunctionStore.func,
                      _ease: parseEasings(tweenEasing),
                      _fromNumbers: cloneArray(fromTargetObject.d),
                      _toNumbers: cloneArray(toTargetObject.d),
                      _strings: cloneArray(toTargetObject.s),
                      _fromNumber: fromTargetObject.n,
                      _toNumber: toTargetObject.n,
                      _numbers: cloneArray(fromTargetObject.d), // For additive tween and animatables
                      _number: fromTargetObject.n, // For additive tween and animatables
                      _unit: toTargetObject.u,
                      _modifier: tweenModifier,
                      _currentTime: 0,
                      _startTime: tweenStartTime,
                      _delay: +tweenDelay,
                      _updateDuration: tweenUpdateDuration,
                      _changeDuration: tweenUpdateDuration,
                      _absoluteStartTime: absoluteStartTime,
                      // NOTE: Investigate bit packing to stores ENUM / BOOL
                      _tweenType: tweenType,
                      _valueType: toTargetObject.t,
                      _composition: tweenComposition,
                      _isOverlapped: 0,
                      _isOverridden: 0,
                      _renderTransforms: 0,
                      _prevRep: null, // For replaced tween
                      _nextRep: null, // For replaced tween
                      _prevAdd: null, // For additive tween
                      _nextAdd: null, // For additive tween
                      _prev: null,
                      _next: null,
                    };

                    if (tweenComposition !== compositionTypes.none) {
                      composeTween(tween, siblings);
                    }

                    if (isNaN(firstTweenChangeStartTime)) {
                      firstTweenChangeStartTime = tween._startTime;
                    }
                    // Rounding is necessary here to minimize floating point errors
                    lastTweenChangeEndTime = round(
                      tweenStartTime + tweenUpdateDuration,
                      12,
                    );
                    prevTween = tween;
                    animationAnimationLength++;

                    addChild(this, tween);
                  }

                  // Update animation timings with the added tweens properties

                  if (
                    isNaN(iterationDelay) ||
                    firstTweenChangeStartTime < iterationDelay
                  ) {
                    iterationDelay = firstTweenChangeStartTime;
                  }

                  if (
                    isNaN(iterationDuration) ||
                    lastTweenChangeEndTime > iterationDuration
                  ) {
                    iterationDuration = lastTweenChangeEndTime;
                  }

                  // TODO: Find a way to inline tween._renderTransforms = 1 here
                  if (tweenType === tweenTypes.TRANSFORM) {
                    lastTransformGroupIndex =
                      animationAnimationLength - tweenIndex;
                    lastTransformGroupLength = animationAnimationLength;
                  }
                }
              }

              // Set _renderTransforms to last transform property to correctly render the transforms list
              if (!isNaN(lastTransformGroupIndex)) {
                let i = 0;
                forEachChildren(this, (/** @type {Tween} */ tween) => {
                  if (
                    i >= lastTransformGroupIndex &&
                    i < lastTransformGroupLength
                  ) {
                    tween._renderTransforms = 1;
                    if (tween._composition === compositionTypes.blend) {
                      forEachChildren(
                        additive.animation,
                        (/** @type {Tween} */ additiveTween) => {
                          if (additiveTween.id === tween.id) {
                            additiveTween._renderTransforms = 1;
                          }
                        },
                      );
                    }
                  }
                  i++;
                });
              }
            }

            if (!targetsLength) {
              console.warn(
                `No target found. Make sure the element you're trying to animate is accessible before creating your animation.`,
              );
            }

            if (iterationDelay) {
              forEachChildren(this, (/** @type {Tween} */ tween) => {
                // If (startTime - delay) equals 0, this means the tween is at the begining of the animation so we need to trim the delay too
                if (!(tween._startTime - tween._delay)) {
                  tween._delay -= iterationDelay;
                }
                tween._startTime -= iterationDelay;
              });
              iterationDuration -= iterationDelay;
            } else {
              iterationDelay = 0;
            }

            // Prevents iterationDuration to be NaN if no valid animatable props have been provided
            // Prevents _iterationCount to be NaN if no valid animatable props have been provided
            if (!iterationDuration) {
              iterationDuration = minValue;
              this.iterationCount = 0;
            }
            /** @type {TargetsArray} */
            this.targets = parsedTargets;
            /** @type {Number} */
            this.duration =
              iterationDuration === minValue
                ? minValue
                : clampInfinity(
                    (iterationDuration + this._loopDelay) *
                      this.iterationCount -
                      this._loopDelay,
                  ) || minValue;
            /** @type {Callback<this>} */
            this.onRender = onRender || animDefaults.onRender;
            /** @type {EasingFunction} */
            this._ease = animEase;
            /** @type {Number} */
            this._delay = iterationDelay;
            // NOTE: I'm keeping delay values separated from offsets in timelines because delays can override previous tweens and it could be confusing to debug a timeline with overridden tweens and no associated visible delays.
            // this._delay = parent ? 0 : iterationDelay;
            // this._offset += parent ? iterationDelay : 0;
            /** @type {Number} */
            this.iterationDuration = iterationDuration;
            /** @type {{}} */
            this._inlineStyles = animInlineStyles;

            if (!this._autoplay && shouldTriggerRender) this.onRender(this);
          }

          /**
           * @param  {Number} newDuration
           * @return {this}
           */
          stretch(newDuration) {
            const currentDuration = this.duration;
            if (currentDuration === normalizeTime(newDuration)) return this;
            const timeScale = newDuration / currentDuration;
            // NOTE: Find a better way to handle the stretch of an animation after stretch = 0
            forEachChildren(this, (/** @type {Tween} */ tween) => {
              // Rounding is necessary here to minimize floating point errors
              tween._updateDuration = normalizeTime(
                tween._updateDuration * timeScale,
              );
              tween._changeDuration = normalizeTime(
                tween._changeDuration * timeScale,
              );
              tween._currentTime *= timeScale;
              tween._startTime *= timeScale;
              tween._absoluteStartTime *= timeScale;
            });
            return super.stretch(newDuration);
          }

          /**
           * @return {this}
           */
          refresh() {
            forEachChildren(this, (/** @type {Tween} */ tween) => {
              const ogValue = getOriginalAnimatableValue(
                tween.target,
                tween.property,
                tween._tweenType,
              );
              decomposeRawValue(ogValue, decomposedOriginalValue);
              tween._fromNumbers = cloneArray(decomposedOriginalValue.d);
              tween._fromNumber = decomposedOriginalValue.n;
              if (tween._func) {
                decomposeRawValue(tween._func(), toTargetObject);
                tween._toNumbers = cloneArray(toTargetObject.d);
                tween._strings = cloneArray(toTargetObject.s);
                tween._toNumber = toTargetObject.n;
              }
            });
            return this;
          }

          /**
           * Cancel the animation and revert all the values affected by this animation to their original state
           * @return {this}
           */
          revert() {
            super.revert();
            return cleanInlineStyles(this);
          }

          /**
           * @param  {Callback<this>} [callback]
           * @return {Promise}
           */
          then(callback) {
            return super.then(callback);
          }
        }

        /**
         * @param {TargetsParam} targets
         * @param {AnimationParams} parameters
         * @return {JSAnimation}
         */
        const animate = (targets, parameters) =>
          new JSAnimation(targets, parameters, null, 0, false).init();

        /**
         * Converts an easing function into a valid CSS linear() timing function string
         * @param {EasingFunction} fn
         * @param {number} [samples=100]
         * @returns {string} CSS linear() timing function
         */
        const easingToLinear = (fn, samples = 100) => {
          const points = [];
          for (let i = 0; i <= samples; i++) points.push(fn(i / samples));
          return `linear(${points.join(', ')})`;
        };

        const WAAPIEasesLookups = {
          in: 'ease-in',
          out: 'ease-out',
          inOut: 'ease-in-out',
        };

        const WAAPIeases = /*#__PURE__*/ (() => {
          const list = {};
          for (let type in easeTypes)
            list[type] = (a) => easeTypes[type](easeInPower(a));
          return /** @type {Record<String, EasingFunction>} */ (list);
        })();

        /**
         * @param  {EasingParam} ease
         * @return {String}
         */
        const parseWAAPIEasing = (ease) => {
          let parsedEase = WAAPIEasesLookups[ease];
          if (parsedEase) return parsedEase;
          parsedEase = 'linear';
          if (isStr(ease)) {
            if (
              stringStartsWith(ease, 'linear') ||
              stringStartsWith(ease, 'cubic-') ||
              stringStartsWith(ease, 'steps') ||
              stringStartsWith(ease, 'ease')
            ) {
              parsedEase = ease;
            } else if (stringStartsWith(ease, 'cubicB')) {
              parsedEase = toLowerCase(ease);
            } else {
              const parsed = parseEaseString(
                ease,
                WAAPIeases,
                WAAPIEasesLookups,
              );
              if (isFnc(parsed))
                parsedEase =
                  parsed === none ? 'linear' : easingToLinear(parsed);
            }
            WAAPIEasesLookups[ease] = parsedEase;
          } else if (isFnc(ease)) {
            const easing = easingToLinear(ease);
            if (easing) parsedEase = easing;
          } else if (/** @type {Spring} */ (ease).ease) {
            parsedEase = easingToLinear(/** @type {Spring} */ (ease).ease);
          }
          return parsedEase;
        };

        /**
         * @typedef {String|Number|Array<String>|Array<Number>} WAAPITweenValue
         */

        /**
         * @callback WAAPIFunctionvalue
         * @param {DOMTarget} target - The animated target
         * @param {Number} index - The target index
         * @param {Number} length - The total number of animated targets
         * @return {WAAPITweenValue}
         */

        /**
         * @typedef {WAAPITweenValue|WAAPIFunctionvalue|Array<String|Number|WAAPIFunctionvalue>} WAAPIKeyframeValue
         */

        /**
         * @typedef {(animation: WAAPIAnimation) => void} WAAPICallback
         */

        /**
         * @typedef {Object} WAAPITweenOptions
         * @property {WAAPIKeyframeValue} [to]
         * @property {WAAPIKeyframeValue} [from]
         * @property {Number|WAAPIFunctionvalue} [duration]
         * @property {Number|WAAPIFunctionvalue} [delay]
         * @property {EasingParam} [ease]
         * @property {CompositeOperation} [composition]
         */

        /**
         * @typedef {Object} WAAPIAnimationOptions
         * @property {Number|Boolean} [loop]
         * @property {Boolean} [Reversed]
         * @property {Boolean} [Alternate]
         * @property {Boolean|ScrollObserver} [autoplay]
         * @property {Number} [playbackRate]
         * @property {Number|WAAPIFunctionvalue} [duration]
         * @property {Number|WAAPIFunctionvalue} [delay]
         * @property {EasingParam} [ease]
         * @property {CompositeOperation} [composition]
         * @property {WAAPICallback} [onComplete]
         */

        /**
         * @typedef {Record<String, WAAPIKeyframeValue | WAAPIAnimationOptions | Boolean | ScrollObserver | WAAPICallback | EasingParam | WAAPITweenOptions> & WAAPIAnimationOptions} WAAPIAnimationParams
         */

        const transformsShorthands = ['x', 'y', 'z'];
        const commonDefaultPXProperties = [
          'perspective',
          'width',
          'height',
          'margin',
          'padding',
          'top',
          'right',
          'bottom',
          'left',
          'borderWidth',
          'fontSize',
          'borderRadius',
          ...transformsShorthands,
        ];

        const validIndividualTransforms = [
          ...transformsShorthands,
          ...validTransforms.filter((t) =>
            ['X', 'Y', 'Z'].some((axis) => t.endsWith(axis)),
          ),
        ];

        // Setting it to true in case CSS.registerProperty is not supported will automatically skip the registration and fallback to no animation
        let transformsPropertiesRegistered =
          isBrowser &&
          (isUnd(CSS) || !Object.hasOwnProperty.call(CSS, 'registerProperty'));

        const registerTransformsProperties = () => {
          if (transformsPropertiesRegistered) return;
          validTransforms.forEach((t) => {
            const isSkew = stringStartsWith(t, 'skew');
            const isScale = stringStartsWith(t, 'scale');
            const isRotate = stringStartsWith(t, 'rotate');
            const isTranslate = stringStartsWith(t, 'translate');
            const isAngle = isRotate || isSkew;
            const syntax = isAngle
              ? '<angle>'
              : isScale
                ? '<number>'
                : isTranslate
                  ? '<length-percentage>'
                  : '*';
            try {
              CSS.registerProperty({
                name: '--' + t,
                syntax,
                inherits: false,
                initialValue: isTranslate
                  ? '0px'
                  : isAngle
                    ? '0deg'
                    : isScale
                      ? '1'
                      : '0',
              });
            } catch {}
          });
          transformsPropertiesRegistered = true;
        };

        const WAAPIAnimationsLookups = {
          _head: null,
          _tail: null,
        };

        /**
         * @param {DOMTarget} $el
         * @param {String} [property]
         * @param {WAAPIAnimation} [parent]
         */
        const removeWAAPIAnimation = ($el, property, parent) => {
          let nextLookup = WAAPIAnimationsLookups._head;
          while (nextLookup) {
            const next = nextLookup._next;
            const matchTarget = nextLookup.$el === $el;
            const matchProperty = !property || nextLookup.property === property;
            const matchParent = !parent || nextLookup.parent === parent;
            if (matchTarget && matchProperty && matchParent) {
              const anim = nextLookup.animation;
              try {
                anim.commitStyles();
              } catch {}
              anim.cancel();
              removeChild(WAAPIAnimationsLookups, nextLookup);
              const lookupParent = nextLookup.parent;
              if (lookupParent) {
                lookupParent._completed++;
                if (
                  lookupParent.animations.length === lookupParent._completed
                ) {
                  lookupParent.completed = true;
                  if (!lookupParent.muteCallbacks) {
                    lookupParent.paused = true;
                    lookupParent.onComplete(lookupParent);
                    lookupParent._resolve(lookupParent);
                  }
                }
              }
            }
            nextLookup = next;
          }
        };

        /**
         * @param {WAAPIAnimation} parent
         * @param {DOMTarget} $el
         * @param {String} property
         * @param {PropertyIndexedKeyframes} keyframes
         * @param {KeyframeAnimationOptions} params
         * @retun {Animation}
         */
        const addWAAPIAnimation = (
          parent,
          $el,
          property,
          keyframes,
          params,
        ) => {
          const animation = $el.animate(keyframes, params);
          const animTotalDuration =
            params.delay + +params.duration * params.iterations;
          animation.playbackRate = parent._speed;
          if (parent.paused) animation.pause();
          if (parent.duration < animTotalDuration) {
            parent.duration = animTotalDuration;
            parent.controlAnimation = animation;
          }
          parent.animations.push(animation);
          removeWAAPIAnimation($el, property);
          addChild(WAAPIAnimationsLookups, {
            parent,
            animation,
            $el,
            property,
            _next: null,
            _prev: null,
          });
          const handleRemove = () => {
            removeWAAPIAnimation($el, property, parent);
          };
          animation.onremove = handleRemove;
          animation.onfinish = handleRemove;
          return animation;
        };

        /**
         * @param  {String} propName
         * @param  {WAAPIKeyframeValue} value
         * @param  {DOMTarget} $el
         * @param  {Number} i
         * @param  {Number} targetsLength
         * @return {String}
         */
        const normalizeTweenValue = (
          propName,
          value,
          $el,
          i,
          targetsLength,
        ) => {
          let v = getFunctionValue(
            /** @type {any} */ (value),
            $el,
            i,
            targetsLength,
          );
          if (!isNum(v)) return v;
          if (
            commonDefaultPXProperties.includes(propName) ||
            stringStartsWith(propName, 'translate')
          )
            return `${v}px`;
          if (
            stringStartsWith(propName, 'rotate') ||
            stringStartsWith(propName, 'skew')
          )
            return `${v}deg`;
          return `${v}`;
        };

        /**
         * @param  {DOMTarget} $el
         * @param  {String} propName
         * @param  {WAAPIKeyframeValue} from
         * @param  {WAAPIKeyframeValue} to
         * @param  {Number} i
         * @param  {Number} targetsLength
         * @return {WAAPITweenValue}
         */
        const parseIndividualTweenValue = (
          $el,
          propName,
          from,
          to,
          i,
          targetsLength,
        ) => {
          /** @type {WAAPITweenValue} */
          let tweenValue = '0';
          const computedTo = !isUnd(to)
            ? normalizeTweenValue(propName, to, $el, i, targetsLength)
            : getComputedStyle($el)[propName];
          if (!isUnd(from)) {
            const computedFrom = normalizeTweenValue(
              propName,
              from,
              $el,
              i,
              targetsLength,
            );
            tweenValue = [computedFrom, computedTo];
          } else {
            tweenValue = isArr(to)
              ? to.map((/** @type {any} */ v) =>
                  normalizeTweenValue(propName, v, $el, i, targetsLength),
                )
              : computedTo;
          }
          return tweenValue;
        };

        class WAAPIAnimation {
          /**
           * @param {DOMTargetsParam} targets
           * @param {WAAPIAnimationParams} params
           */
          constructor(targets, params) {
            if (globals.scope) globals.scope.revertibles.push(this);

            registerTransformsProperties();

            const parsedTargets = registerTargets(targets);
            const targetsLength = parsedTargets.length;

            if (!targetsLength) {
              console.warn(
                `No target found. Make sure the element you're trying to animate is accessible before creating your animation.`,
              );
            }

            const ease = setValue(
              params.ease,
              parseWAAPIEasing(globals.defaults.ease),
            );
            const spring = /** @type {Spring} */ (ease).ease && ease;
            const autoplay = setValue(
              params.autoplay,
              globals.defaults.autoplay,
            );
            const scroll =
              autoplay && /** @type {ScrollObserver} */ (autoplay).link
                ? autoplay
                : false;
            const alternate =
              params.alternate &&
              /** @type {Boolean} */ (params.alternate) === true;
            const reversed =
              params.reversed &&
              /** @type {Boolean} */ (params.reversed) === true;
            const loop = setValue(params.loop, globals.defaults.loop);
            const iterations = /** @type {Number} */ (
              loop === true || loop === Infinity
                ? Infinity
                : isNum(loop)
                  ? loop + 1
                  : 1
            );
            /** @type {PlaybackDirection} */
            const direction = alternate
              ? reversed
                ? 'alternate-reverse'
                : 'alternate'
              : reversed
                ? 'reverse'
                : 'normal';
            /** @type {FillMode} */
            const fill = 'forwards';
            /** @type {String} */
            const easing = parseWAAPIEasing(ease);
            const timeScale = globals.timeScale === 1 ? 1 : K;

            /** @type {DOMTargetsArray}] */
            this.targets = parsedTargets;
            /** @type {Array<globalThis.Animation>}] */
            this.animations = [];
            /** @type {globalThis.Animation}] */
            this.controlAnimation = null;
            /** @type {Callback<this>} */
            this.onComplete = params.onComplete || noop;
            /** @type {Number} */
            this.duration = 0;
            /** @type {Boolean} */
            this.muteCallbacks = false;
            /** @type {Boolean} */
            this.completed = false;
            /** @type {Boolean} */
            this.paused = !autoplay || scroll !== false;
            /** @type {Boolean} */
            this.reversed = reversed;
            /** @type {Boolean|ScrollObserver} */
            this.autoplay = autoplay;
            /** @type {Number} */
            this._speed = setValue(
              params.playbackRate,
              globals.defaults.playbackRate,
            );
            /** @type {Function} */
            this._resolve = noop; // Used by .then()
            /** @type {Number} */
            this._completed = 0;
            /** @type {Array<Object>}] */
            this._inlineStyles = parsedTargets.map(($el) =>
              $el.getAttribute('style'),
            );

            parsedTargets.forEach(($el, i) => {
              const cachedTransforms = $el[transformsSymbol];

              const hasIndividualTransforms = validIndividualTransforms.some(
                (t) => params.hasOwnProperty(t),
              );

              /** @type {Number} */
              const duration =
                (spring
                  ? /** @type {Spring} */ (spring).duration
                  : getFunctionValue(
                      setValue(params.duration, globals.defaults.duration),
                      $el,
                      i,
                      targetsLength,
                    )) * timeScale;
              /** @type {Number} */
              const delay =
                getFunctionValue(
                  setValue(params.delay, globals.defaults.delay),
                  $el,
                  i,
                  targetsLength,
                ) * timeScale;
              /** @type {CompositeOperation} */
              const composite = /** @type {CompositeOperation} */ (
                setValue(params.composition, 'replace')
              );

              for (let name in params) {
                if (!isKey(name)) continue;
                /** @type {PropertyIndexedKeyframes} */
                const keyframes = {};
                /** @type {KeyframeAnimationOptions} */
                const tweenParams = {
                  iterations,
                  direction,
                  fill,
                  easing,
                  duration,
                  delay,
                  composite,
                };
                const propertyValue = params[name];
                const individualTransformProperty = hasIndividualTransforms
                  ? validTransforms.includes(name)
                    ? name
                    : shortTransforms.get(name)
                  : false;
                let parsedPropertyValue;
                if (isObj(propertyValue)) {
                  const tweenOptions = /** @type {WAAPITweenOptions} */ (
                    propertyValue
                  );
                  const tweenOptionsEase = setValue(tweenOptions.ease, ease);
                  const tweenOptionsSpring =
                    /** @type {Spring} */ (tweenOptionsEase).ease &&
                    tweenOptionsEase;
                  const to = /** @type {WAAPITweenOptions} */ (tweenOptions).to;
                  const from = /** @type {WAAPITweenOptions} */ (tweenOptions)
                    .from;
                  /** @type {Number} */
                  tweenParams.duration =
                    (tweenOptionsSpring
                      ? /** @type {Spring} */ (tweenOptionsSpring).duration
                      : getFunctionValue(
                          setValue(tweenOptions.duration, duration),
                          $el,
                          i,
                          targetsLength,
                        )) * timeScale;
                  /** @type {Number} */
                  tweenParams.delay =
                    getFunctionValue(
                      setValue(tweenOptions.delay, delay),
                      $el,
                      i,
                      targetsLength,
                    ) * timeScale;
                  /** @type {CompositeOperation} */
                  tweenParams.composite = /** @type {CompositeOperation} */ (
                    setValue(tweenOptions.composition, composite)
                  );
                  /** @type {String} */
                  tweenParams.easing = parseWAAPIEasing(tweenOptionsEase);
                  parsedPropertyValue = parseIndividualTweenValue(
                    $el,
                    name,
                    from,
                    to,
                    i,
                    targetsLength,
                  );
                  if (individualTransformProperty) {
                    keyframes[`--${individualTransformProperty}`] =
                      parsedPropertyValue;
                    cachedTransforms[individualTransformProperty] =
                      parsedPropertyValue;
                  } else {
                    keyframes[name] = parseIndividualTweenValue(
                      $el,
                      name,
                      from,
                      to,
                      i,
                      targetsLength,
                    );
                  }
                  addWAAPIAnimation(this, $el, name, keyframes, tweenParams);
                  if (!isUnd(from)) {
                    if (!individualTransformProperty) {
                      $el.style[name] = keyframes[name][0];
                    } else {
                      const key = `--${individualTransformProperty}`;
                      $el.style.setProperty(key, keyframes[key][0]);
                    }
                  }
                } else {
                  parsedPropertyValue = isArr(propertyValue)
                    ? propertyValue.map((/** @type {any} */ v) =>
                        normalizeTweenValue(name, v, $el, i, targetsLength),
                      )
                    : normalizeTweenValue(
                        name,
                        /** @type {any} */ (propertyValue),
                        $el,
                        i,
                        targetsLength,
                      );
                  if (individualTransformProperty) {
                    keyframes[`--${individualTransformProperty}`] =
                      parsedPropertyValue;
                    cachedTransforms[individualTransformProperty] =
                      parsedPropertyValue;
                  } else {
                    keyframes[name] = parsedPropertyValue;
                  }
                  addWAAPIAnimation(this, $el, name, keyframes, tweenParams);
                }
              }
              if (hasIndividualTransforms) {
                let transforms = emptyString;
                for (let t in cachedTransforms) {
                  transforms += `${transformsFragmentStrings[t]}var(--${t})) `;
                }
                $el.style.transform = transforms;
              }
            });

            if (scroll) {
              /** @type {ScrollObserver} */ (this.autoplay).link(this);
            }
          }

          /**
           * @callback forEachCallback
           * @param {globalThis.Animation} animation
           */

          /**
           * @param  {forEachCallback|String} callback
           * @return {this}
           */
          forEach(callback) {
            const cb = isStr(callback) ? (a) => a[callback]() : callback;
            this.animations.forEach(cb);
            return this;
          }

          get speed() {
            return this._speed;
          }

          /** @param {Number} speed */
          set speed(speed) {
            this._speed = +speed;
            this.forEach((anim) => (anim.playbackRate = speed));
          }

          get currentTime() {
            const controlAnimation = this.controlAnimation;
            const timeScale = globals.timeScale;
            return this.completed
              ? this.duration
              : controlAnimation
                ? +controlAnimation.currentTime *
                  (timeScale === 1 ? 1 : timeScale)
                : 0;
          }

          /** @param {Number} time */
          set currentTime(time) {
            const t = time * (globals.timeScale === 1 ? 1 : K);
            this.forEach((anim) => {
              // Make sure the animation playState is not 'paused' in order to properly trigger an onfinish callback.
              // The "paused" play state supersedes the "finished" play state; if the animation is both paused and finished, the "paused" state is the one that will be reported.
              // https://developer.mozilla.org/en-US/docs/Web/API/Animation/finish_event
              if (t >= this.duration) anim.play();
              anim.currentTime = t;
            });
          }

          get progress() {
            return this.currentTime / this.duration;
          }

          /** @param {Number} progress */
          set progress(progress) {
            this.forEach(
              (anim) => (anim.currentTime = progress * this.duration || 0),
            );
          }

          resume() {
            if (!this.paused) return this;
            this.paused = false;
            // TODO: Store the current time, and seek back to the last position
            return this.forEach('play');
          }

          pause() {
            if (this.paused) return this;
            this.paused = true;
            return this.forEach('pause');
          }

          alternate() {
            this.reversed = !this.reversed;
            this.forEach('reverse');
            if (this.paused) this.forEach('pause');
            return this;
          }

          play() {
            if (this.reversed) this.alternate();
            return this.resume();
          }

          reverse() {
            if (!this.reversed) this.alternate();
            return this.resume();
          }

          /**
           * @param {Number} time
           * @param {Boolean} muteCallbacks
           */
          seek(time, muteCallbacks = false) {
            if (muteCallbacks) this.muteCallbacks = true;
            if (time < this.duration) this.completed = false;
            this.currentTime = time;
            this.muteCallbacks = false;
            if (this.paused) this.pause();
            return this;
          }

          restart() {
            this.completed = false;
            return this.seek(0, true).resume();
          }

          commitStyles() {
            return this.forEach('commitStyles');
          }

          complete() {
            return this.seek(this.duration);
          }

          cancel() {
            this.forEach('cancel');
            return this.pause();
          }

          revert() {
            this.cancel();
            this.targets.forEach(($el, i) =>
              $el.setAttribute('style', this._inlineStyles[i]),
            );
            return this;
          }

          /**
           * @param  {WAAPICallback} [callback]
           * @return {Promise}
           */
          then(callback = noop) {
            const then = this.then;
            const onResolve = () => {
              this.then = null;
              callback(this);
              this.then = then;
              this._resolve = noop;
            };
            return new Promise((r) => {
              this._resolve = () => r(onResolve());
              if (this.completed) this._resolve();
              return this;
            });
          }
        }

        const waapi = {
          /**
           * @param {DOMTargetsParam} targets
           * @param {WAAPIAnimationParams} params
           * @return {WAAPIAnimation}
           */
          animate: (targets, params) => new WAAPIAnimation(targets, params),
          convertEase: easingToLinear,
        };

        /**
         * @param  {Callback<Timer>} [callback]
         * @return {Timer}
         */
        const sync = (callback = noop) => {
          return new Timer(
            { duration: 1 * globals.timeScale, onComplete: callback },
            null,
            0,
          ).resume();
        };

        /**
         * @overload
         * @param  {DOMTargetSelector} targetSelector
         * @param  {String}            propName
         * @return {String}
         *
         * @overload
         * @param  {JSTargetsParam} targetSelector
         * @param  {String}         propName
         * @return {Number|String}
         *
         * @overload
         * @param  {DOMTargetsParam} targetSelector
         * @param  {String}          propName
         * @param  {String}          unit
         * @return {String}
         *
         * @overload
         * @param  {TargetsParam} targetSelector
         * @param  {String}       propName
         * @param  {Boolean}      unit
         * @return {Number}
         *
         * @param  {TargetsParam}   targetSelector
         * @param  {String}         propName
         * @param  {String|Boolean} [unit]
         */
        function getTargetValue(targetSelector, propName, unit) {
          const targets = registerTargets(targetSelector);
          if (!targets.length) return;
          const [target] = targets;
          const tweenType = getTweenType(target, propName);
          const normalizePropName = sanitizePropertyName(
            propName,
            target,
            tweenType,
          );
          let originalValue = getOriginalAnimatableValue(
            target,
            normalizePropName,
          );
          if (isUnd(unit)) {
            return originalValue;
          } else {
            decomposeRawValue(originalValue, decomposedOriginalValue);
            if (
              decomposedOriginalValue.t === valueTypes.NUMBER ||
              decomposedOriginalValue.t === valueTypes.UNIT
            ) {
              if (unit === false) {
                return decomposedOriginalValue.n;
              } else {
                const convertedValue = convertValueUnit(
                  /** @type {DOMTarget} */ (target),
                  decomposedOriginalValue,
                  /** @type {String} */ (unit),
                  false,
                );
                return `${round(convertedValue.n, globals.precision)}${convertedValue.u}`;
              }
            }
          }
        }

        /**
         * @param  {TargetsParam}    targets
         * @param  {AnimationParams} parameters
         * @return {JSAnimation}
         */
        const setTargetValues = (targets, parameters) => {
          if (isUnd(parameters)) return;
          parameters.duration = minValue;
          // Do not overrides currently active tweens by default
          parameters.composition = setValue(
            parameters.composition,
            compositionTypes.none,
          );
          // Skip init() and force rendering by playing the animation
          return new JSAnimation(targets, parameters, null, 0, true).resume();
        };

        /**
         * @param  {TargetsArray} targetsArray
         * @param  {JSAnimation}    animation
         * @param  {String}       [propertyName]
         * @return {Boolean}
         */
        const removeTargetsFromAnimation = (
          targetsArray,
          animation,
          propertyName,
        ) => {
          let tweensMatchesTargets = false;
          forEachChildren(
            animation,
            (/**@type {Tween} */ tween) => {
              const tweenTarget = tween.target;
              if (targetsArray.includes(tweenTarget)) {
                const tweenName = tween.property;
                const tweenType = tween._tweenType;
                const normalizePropName = sanitizePropertyName(
                  propertyName,
                  tweenTarget,
                  tweenType,
                );
                if (
                  !normalizePropName ||
                  (normalizePropName && normalizePropName === tweenName)
                ) {
                  // Make sure to flag the previous CSS transform tween to renderTransform
                  if (
                    tween.parent._tail === tween &&
                    tween._tweenType === tweenTypes.TRANSFORM &&
                    tween._prev &&
                    tween._prev._tweenType === tweenTypes.TRANSFORM
                  ) {
                    tween._prev._renderTransforms = 1;
                  }
                  // Removes the tween from the selected animation
                  removeChild(animation, tween);
                  // Detach the tween from its siblings to make sure blended tweens are correctlly removed
                  removeTweenSliblings(tween);
                  tweensMatchesTargets = true;
                }
              }
            },
            true,
          );
          return tweensMatchesTargets;
        };

        /**
         * @param  {TargetsParam} targets
         * @param  {Renderable|WAAPIAnimation} [renderable]
         * @param  {String}                    [propertyName]
         * @return {TargetsArray}
         */
        const remove = (targets, renderable, propertyName) => {
          const targetsArray = parseTargets(targets);
          const parent = /** @type {Renderable|typeof engine} **/ (
            renderable ? renderable : engine
          );
          const waapiAnimation =
            renderable &&
            /** @type {WAAPIAnimation} */ (renderable).controlAnimation &&
            /** @type {WAAPIAnimation} */ (renderable);
          for (let i = 0, l = targetsArray.length; i < l; i++) {
            const $el = /** @type {DOMTarget}  */ (targetsArray[i]);
            removeWAAPIAnimation($el, propertyName, waapiAnimation);
          }
          let removeMatches;
          if (parent._hasChildren) {
            let iterationDuration = 0;
            forEachChildren(
              parent,
              (/** @type {Renderable} */ child) => {
                if (!child._hasChildren) {
                  removeMatches = removeTargetsFromAnimation(
                    targetsArray,
                    /** @type {JSAnimation} */ (child),
                    propertyName,
                  );
                  // Remove the child from its parent if no tweens and no children left after the removal
                  if (removeMatches && !child._head) {
                    child.cancel();
                    removeChild(parent, child);
                  } else {
                    // Calculate the new iterationDuration value to handle onComplete with last child in render()
                    const childTLOffset = child._offset + child._delay;
                    const childDur = childTLOffset + child.duration;
                    if (childDur > iterationDuration) {
                      iterationDuration = childDur;
                    }
                  }
                }
                // Make sure to also remove engine's children targets
                // NOTE: Avoid recursion?
                if (child._head) {
                  remove(targets, child, propertyName);
                } else {
                  child._hasChildren = false;
                }
              },
              true,
            );
            // Update iterationDuration value to handle onComplete with last child in render()
            if (!isUnd(/** @type {Renderable} */ (parent).iterationDuration)) {
              /** @type {Renderable} */ (parent).iterationDuration =
                iterationDuration;
            }
          } else {
            removeMatches = removeTargetsFromAnimation(
              targetsArray,
              /** @type {JSAnimation} */ (parent),
              propertyName,
            );
          }

          if (removeMatches && !parent._head) {
            parent._hasChildren = false;
            // Cancel the parent if there are no tweens and no children left after the removal
            // We have to check if the .cancel() method exist to handle cases where the parent is the engine itself
            if (/** @type {Renderable} */ (parent).cancel)
              /** @type {Renderable} */ (parent).cancel();
          }

          return targetsArray;
        };

        /**
         * @param  {Number} min
         * @param  {Number} max
         * @param  {Number} [decimalLength]
         * @return {Number}
         */
        const random = (min, max, decimalLength) => {
          const m = 10 ** (decimalLength || 0);
          return floor((Math.random() * (max - min + 1 / m) + min) * m) / m;
        };

        /**
         * @param  {String|Array} items
         * @return {any}
         */
        const randomPick = (items) => items[random(0, items.length - 1)];

        /**
         * Adapted from https://bost.ocks.org/mike/shuffle/
         * @param  {Array} items
         * @return {Array}
         */
        const shuffle = (items) => {
          let m = items.length,
            t,
            i;
          while (m) {
            i = random(0, --m);
            t = items[m];
            items[m] = items[i];
            items[i] = t;
          }
          return items;
        };

        /**
         * @param  {Number|String} v
         * @param  {Number} decimalLength
         * @return {String}
         */
        const roundPad = (v, decimalLength) => (+v).toFixed(decimalLength);

        /**
         * @param  {Number} v
         * @param  {Number} totalLength
         * @param  {String} padString
         * @return {String}
         */
        const padStart = (v, totalLength, padString) =>
          `${v}`.padStart(totalLength, padString);

        /**
         * @param  {Number} v
         * @param  {Number} totalLength
         * @param  {String} padString
         * @return {String}
         */
        const padEnd = (v, totalLength, padString) =>
          `${v}`.padEnd(totalLength, padString);

        /**
         * @param  {Number} v
         * @param  {Number} min
         * @param  {Number} max
         * @return {Number}
         */
        const wrap = (v, min, max) =>
          ((((v - min) % (max - min)) + (max - min)) % (max - min)) + min;

        /**
         * @param  {Number} value
         * @param  {Number} inLow
         * @param  {Number} inHigh
         * @param  {Number} outLow
         * @param  {Number} outHigh
         * @return {Number}
         */
        const mapRange = (value, inLow, inHigh, outLow, outHigh) =>
          outLow + ((value - inLow) / (inHigh - inLow)) * (outHigh - outLow);

        /**
         * @param  {Number} degrees
         * @return {Number}
         */
        const degToRad = (degrees) => (degrees * PI) / 180;

        /**
         * @param  {Number} radians
         * @return {Number}
         */
        const radToDeg = (radians) => (radians * 180) / PI;

        /**
         * https://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
         * @param  {Number} start
         * @param  {Number} end
         * @param  {Number} amount
         * @param  {Renderable|Boolean} [renderable]
         * @return {Number}
         */
        const lerp = (start, end, amount, renderable) => {
          let dt = K / globals.defaults.frameRate;
          if (renderable !== false) {
            const ticker =
              /** @type Renderable */
              (renderable) || (engine._hasChildren && engine);
            if (ticker && ticker.deltaTime) {
              dt = ticker.deltaTime;
            }
          }
          const t = 1 - Math.exp(-amount * dt * 0.1);
          return !amount
            ? start
            : amount === 1
              ? end
              : (1 - t) * start + t * end;
        };

        // Chain-able utilities

        /**
         * @callback UtilityFunction
         * @param {...*} args
         * @return {Number|String}
         *
         * @param {UtilityFunction} fn
         * @param {Number} [last=0]
         * @return {function(...(Number|String)): function(Number|String): (Number|String)}
         */
        const curry =
          (fn, last = 0) =>
          (...args) =>
            last ? (v) => fn(...args, v) : (v) => fn(v, ...args);

        /**
         * @param {Function} fn
         * @return {function(...(Number|String))}
         */
        const chain = (fn) => {
          return (...args) => {
            const result = fn(...args);
            return new Proxy(noop, {
              apply: (_, __, [v]) => result(v),
              get: (_, prop) =>
                chain(
                  /**@param {...Number|String} nextArgs */ (...nextArgs) => {
                    const nextResult = utils[prop](...nextArgs);
                    return (/**@type {Number|String} */ v) =>
                      nextResult(result(v));
                  },
                ),
            });
          };
        };

        /**
         * @param {UtilityFunction} fn
         * @param {Number} [right]
         * @return {function(...(Number|String)): UtilityFunction}
         */
        const makeChainable =
          (fn, right = 0) =>
          (...args) =>
            (args.length < fn.length ? chain(curry(fn, right)) : fn)(...args);

        /**
         * @callback ChainedUtilsResult
         * @param {Number} value
         * @return {Number}
         *
         * @typedef {Object} ChainableUtils
         * @property {ChainedClamp} clamp
         * @property {ChainedRound} round
         * @property {ChainedSnap} snap
         * @property {ChainedWrap} wrap
         * @property {ChainedInterpolate} interpolate
         * @property {ChainedMapRange} mapRange
         * @property {ChainedRoundPad} roundPad
         * @property {ChainedPadStart} padStart
         * @property {ChainedPadEnd} padEnd
         * @property {ChainedDegToRad} degToRad
         * @property {ChainedRadToDeg} radToDeg
         *
         * @typedef {ChainableUtils & ChainedUtilsResult} ChainableUtil
         *
         * @callback ChainedClamp
         * @param {Number} min
         * @param {Number} max
         * @return {ChainableUtil}
         *
         * @callback ChainedRound
         * @param {Number} decimalLength
         * @return {ChainableUtil}
         *
         * @callback ChainedSnap
         * @param {Number} increment
         * @return {ChainableUtil}
         *
         * @callback ChainedWrap
         * @param {Number} min
         * @param {Number} max
         * @return {ChainableUtil}
         *
         * @callback ChainedInterpolate
         * @param {Number} start
         * @param {Number} end
         * @return {ChainableUtil}
         *
         * @callback ChainedMapRange
         * @param {Number} inLow
         * @param {Number} inHigh
         * @param {Number} outLow
         * @param {Number} outHigh
         * @return {ChainableUtil}
         *
         * @callback ChainedRoundPad
         * @param {Number} decimalLength
         * @return {ChainableUtil}
         *
         * @callback ChainedPadStart
         * @param {Number} totalLength
         * @param {String} padString
         * @return {ChainableUtil}
         *
         * @callback ChainedPadEnd
         * @param {Number} totalLength
         * @param {String} padString
         * @return {ChainableUtil}
         *
         * @callback ChainedDegToRad
         * @return {ChainableUtil}
         *
         * @callback ChainedRadToDeg
         * @return {ChainableUtil}
         */

        const utils = {
          $: registerTargets,
          get: getTargetValue,
          set: setTargetValues,
          remove,
          cleanInlineStyles,
          random,
          randomPick,
          shuffle,
          lerp,
          sync,
          clamp: /** @type {typeof clamp & ChainedClamp} */ (
            makeChainable(clamp)
          ),
          round: /** @type {typeof round & ChainedRound} */ (
            makeChainable(round)
          ),
          snap: /** @type {typeof snap & ChainedSnap} */ (makeChainable(snap)),
          wrap: /** @type {typeof wrap & ChainedWrap} */ (makeChainable(wrap)),
          interpolate: /** @type {typeof interpolate & ChainedInterpolate} */ (
            makeChainable(interpolate, 1)
          ),
          mapRange: /** @type {typeof mapRange & ChainedMapRange} */ (
            makeChainable(mapRange)
          ),
          roundPad: /** @type {typeof roundPad & ChainedRoundPad} */ (
            makeChainable(roundPad)
          ),
          padStart: /** @type {typeof padStart & ChainedPadStart} */ (
            makeChainable(padStart)
          ),
          padEnd: /** @type {typeof padEnd & ChainedPadEnd} */ (
            makeChainable(padEnd)
          ),
          degToRad: /** @type {typeof degToRad & ChainedDegToRad} */ (
            makeChainable(degToRad)
          ),
          radToDeg: /** @type {typeof radToDeg & ChainedRadToDeg} */ (
            makeChainable(radToDeg)
          ),
        };

        /**
         * @typedef {Number|String|Function} TimePosition
         */

        /**
         * Timeline's children offsets positions parser
         * @param  {Timeline} timeline
         * @param  {String} timePosition
         * @return {Number}
         */
        const getPrevChildOffset = (timeline, timePosition) => {
          if (stringStartsWith(timePosition, '<')) {
            const goToPrevAnimationOffset = timePosition[1] === '<';
            const prevAnimation = /** @type {Tickable} */ (timeline._tail);
            const prevOffset = prevAnimation
              ? prevAnimation._offset + prevAnimation._delay
              : 0;
            return goToPrevAnimationOffset
              ? prevOffset
              : prevOffset + prevAnimation.duration;
          }
        };

        /**
         * @param  {Timeline} timeline
         * @param  {TimePosition} [timePosition]
         * @return {Number}
         */
        const parseTimelinePosition = (timeline, timePosition) => {
          let tlDuration = timeline.iterationDuration;
          if (tlDuration === minValue) tlDuration = 0;
          if (isUnd(timePosition)) return tlDuration;
          if (isNum(+timePosition)) return +timePosition;
          const timePosStr = /** @type {String} */ (timePosition);
          const tlLabels = timeline ? timeline.labels : null;
          const hasLabels = !isNil(tlLabels);
          const prevOffset = getPrevChildOffset(timeline, timePosStr);
          const hasSibling = !isUnd(prevOffset);
          const matchedRelativeOperator =
            relativeValuesExecRgx.exec(timePosStr);
          if (matchedRelativeOperator) {
            const fullOperator = matchedRelativeOperator[0];
            const split = timePosStr.split(fullOperator);
            const labelOffset =
              hasLabels && split[0] ? tlLabels[split[0]] : tlDuration;
            const parsedOffset = hasSibling
              ? prevOffset
              : hasLabels
                ? labelOffset
                : tlDuration;
            const parsedNumericalOffset = +split[1];
            return getRelativeValue(
              parsedOffset,
              parsedNumericalOffset,
              fullOperator[0],
            );
          } else {
            return hasSibling
              ? prevOffset
              : hasLabels
                ? !isUnd(tlLabels[timePosStr])
                  ? tlLabels[timePosStr]
                  : tlDuration
                : tlDuration;
          }
        };

        /**
         * @param {Timeline} tl
         * @return {Number}
         */
        function getTimelineTotalDuration(tl) {
          return (
            clampInfinity(
              (tl.iterationDuration + tl._loopDelay) * tl.iterationCount -
                tl._loopDelay,
            ) || minValue
          );
        }

        /**
         * @overload
         * @param  {TimerParams} childParams
         * @param  {Timeline} tl
         * @param  {Number} timePosition
         * @return {Timeline}
         *
         * @overload
         * @param  {AnimationParams} childParams
         * @param  {Timeline} tl
         * @param  {Number} timePosition
         * @param  {TargetsParam} targets
         * @param  {Number} [index]
         * @param  {Number} [length]
         * @return {Timeline}
         *
         * @param  {TimerParams|AnimationParams} childParams
         * @param  {Timeline} tl
         * @param  {Number} timePosition
         * @param  {TargetsParam} [targets]
         * @param  {Number} [index]
         * @param  {Number} [length]
         */
        function addTlChild(
          childParams,
          tl,
          timePosition,
          targets,
          index,
          length,
        ) {
          const isSetter =
            isNum(childParams.duration) &&
            /** @type {Number} */ (childParams.duration) <= minValue;
          // Offset the tl position with -minValue for 0 duration animations or .set() calls in order to align their end value with the defined position
          const adjustedPosition = isSetter
            ? timePosition - minValue
            : timePosition;
          tick(tl, adjustedPosition, 1, 1, tickModes.AUTO);
          const tlChild = targets
            ? new JSAnimation(
                targets,
                /** @type {AnimationParams} */ (childParams),
                tl,
                adjustedPosition,
                false,
                index,
                length,
              )
            : new Timer(
                /** @type {TimerParams} */ (childParams),
                tl,
                adjustedPosition,
              );
          tlChild.init(1);
          // TODO: Might be better to insert at a position relative to startTime?
          addChild(tl, tlChild);
          forEachChildren(tl, (/** @type {Renderable} */ child) => {
            const childTLOffset = child._offset + child._delay;
            const childDur = childTLOffset + child.duration;
            if (childDur > tl.iterationDuration)
              tl.iterationDuration = childDur;
          });
          tl.duration = getTimelineTotalDuration(tl);
          return tl;
        }

        class Timeline extends Timer {
          /**
           * @param {TimelineParams} [parameters]
           */
          constructor(parameters = {}) {
            super(
              /** @type {TimerParams&TimelineParams} */ (parameters),
              null,
              0,
            );
            /** @type {Number} */
            this.duration = 0; // TL duration starts at 0 and grows when adding children
            /** @type {Record<String, Number>} */
            this.labels = {};
            const defaultsParams = parameters.defaults;
            const globalDefaults = globals.defaults;
            /** @type {DefaultsParams} */
            this.defaults = defaultsParams
              ? mergeObjects(defaultsParams, globalDefaults)
              : globalDefaults;
            /** @type {Callback<this>} */
            this.onRender = parameters.onRender || globalDefaults.onRender;
            const tlPlaybackEase = setValue(
              parameters.playbackEase,
              globalDefaults.playbackEase,
            );
            this._ease = tlPlaybackEase ? parseEasings(tlPlaybackEase) : null;
            /** @type {Number} */
            this.iterationDuration = 0;
          }

          /**
           * @overload
           * @param {TargetsParam} a1
           * @param {AnimationParams} a2
           * @param {TimePosition} [a3]
           * @return {this}
           *
           * @overload
           * @param {TimerParams} a1
           * @param {TimePosition} [a2]
           * @return {this}
           *
           * @param {TargetsParam|TimerParams} a1
           * @param {AnimationParams|TimePosition} a2
           * @param {TimePosition} [a3]
           */
          add(a1, a2, a3) {
            const isAnim = isObj(a2);
            const isTimer = isObj(a1);
            if (isAnim || isTimer) {
              this._hasChildren = true;
              if (isAnim) {
                const childParams = /** @type {AnimationParams} */ (a2);
                // Check for function for children stagger positions
                if (isFnc(a3)) {
                  const staggeredPosition = /** @type {Function} */ (a3);
                  const parsedTargetsArray = parseTargets(
                    /** @type {TargetsParam} */ (a1),
                  );
                  // Store initial duration before adding new children that will change the duration
                  const tlDuration = this.duration;
                  // Store initial _iterationDuration before adding new children that will change the duration
                  const tlIterationDuration = this.iterationDuration;
                  // Store the original id in order to add specific indexes to the new animations ids
                  const id = childParams.id;
                  let i = 0;
                  const parsedLength = parsedTargetsArray.length;
                  parsedTargetsArray.forEach((/** @type {Target} */ target) => {
                    // Create a new parameter object for each staggered children
                    const staggeredChildParams = { ...childParams };
                    // Reset the duration of the timeline iteration before each stagger to prevent wrong start value calculation
                    this.duration = tlDuration;
                    this.iterationDuration = tlIterationDuration;
                    if (!isUnd(id)) staggeredChildParams.id = id + '-' + i;
                    addTlChild(
                      staggeredChildParams,
                      this,
                      staggeredPosition(target, i, parsedLength, this),
                      target,
                      i,
                      parsedLength,
                    );
                    i++;
                  });
                } else {
                  addTlChild(
                    childParams,
                    this,
                    parseTimelinePosition(this, a3),
                    /** @type {TargetsParam} */ (a1),
                  );
                }
              } else {
                // It's a Timer
                addTlChild(
                  /** @type TimerParams */ (a1),
                  this,
                  parseTimelinePosition(this, /** @type TimePosition */ (a2)),
                );
              }
              return this.init(1); // 1 = internalRender
            }
          }

          /**
           * @overload
           * @param {Tickable} [synced]
           * @param {TimePosition} [position]
           * @return {this}
           *
           * @overload
           * @param {globalThis.Animation} [synced]
           * @param {TimePosition} [position]
           * @return {this}
           *
           * @overload
           * @param {WAAPIAnimation} [synced]
           * @param {TimePosition} [position]
           * @return {this}
           *
           * @param {Tickable|WAAPIAnimation|globalThis.Animation} [synced]
           * @param {TimePosition} [position]
           */
          sync(synced, position) {
            if (isUnd(synced) || (synced && isUnd(synced.pause))) return this;
            synced.pause();
            const duration = +(
              /** @type {globalThis.Animation} */ ((synced).effect
                ? /** @type {globalThis.Animation} */ (
                    synced
                  ).effect.getTiming().duration
                : /** @type {Tickable} */ (synced).duration)
            );
            return this.add(
              synced,
              { currentTime: [0, duration], duration, ease: 'linear' },
              position,
            );
          }

          /**
           * @param  {TargetsParam} targets
           * @param  {AnimationParams} parameters
           * @param  {TimePosition} [position]
           * @return {this}
           */
          set(targets, parameters, position) {
            if (isUnd(parameters)) return this;
            parameters.duration = minValue;
            parameters.composition = compositionTypes.replace;
            return this.add(targets, parameters, position);
          }

          /**
           * @param {Callback<Timer>} callback
           * @param {TimePosition} [position]
           * @return {this}
           */
          call(callback, position) {
            if (isUnd(callback) || (callback && !isFnc(callback))) return this;
            return this.add(
              { duration: 0, onComplete: () => callback(this) },
              position,
            );
          }

          /**
           * @param {String} labelName
           * @param {TimePosition} [position]
           * @return {this}
           *
           */
          label(labelName, position) {
            if (isUnd(labelName) || (labelName && !isStr(labelName)))
              return this;
            this.labels[labelName] = parseTimelinePosition(
              this,
              /** @type TimePosition */ (position),
            );
            return this;
          }

          /**
           * @param  {TargetsParam} targets
           * @param  {String} [propertyName]
           * @return {this}
           */
          remove(targets, propertyName) {
            remove(targets, this, propertyName);
            return this;
          }

          /**
           * @param  {Number} newDuration
           * @return {this}
           */
          stretch(newDuration) {
            const currentDuration = this.duration;
            if (currentDuration === normalizeTime(newDuration)) return this;
            const timeScale = newDuration / currentDuration;
            const labels = this.labels;
            forEachChildren(this, (/** @type {JSAnimation} */ child) =>
              child.stretch(child.duration * timeScale),
            );
            for (let labelName in labels) labels[labelName] *= timeScale;
            return super.stretch(newDuration);
          }

          /**
           * @return {this}
           */
          refresh() {
            forEachChildren(this, (/** @type {JSAnimation} */ child) => {
              if (child.refresh) child.refresh();
            });
            return this;
          }

          /**
           * @return {this}
           */
          revert() {
            super.revert();
            forEachChildren(
              this,
              (/** @type {JSAnimation} */ child) => child.revert,
              true,
            );
            return cleanInlineStyles(this);
          }

          /**
           * @param  {Callback<this>} [callback]
           * @return {Promise}
           */
          then(callback) {
            return super.then(callback);
          }
        }

        /**
         * @param {TimelineParams} [parameters]
         * @return {Timeline}
         */
        const createTimeline = (parameters) => new Timeline(parameters).init();

        class Animatable {
          /**
           * @param {TargetsParam} targets
           * @param {AnimatableParams} parameters
           */
          constructor(targets, parameters) {
            if (globals.scope) globals.scope.revertibles.push(this);
            /** @type {AnimationParams} */
            const globalParams = {};
            const properties = {};
            this.targets = [];
            this.animations = {};
            if (isUnd(targets) || isUnd(parameters)) return;
            for (let propName in parameters) {
              const paramValue = parameters[propName];
              if (isKey(propName)) {
                properties[propName] = paramValue;
              } else {
                globalParams[propName] = paramValue;
              }
            }
            for (let propName in properties) {
              const propValue = properties[propName];
              const isObjValue = isObj(propValue);
              /** @type {TweenParamsOptions} */
              let propParams = {};
              let to = '+=0';
              if (isObjValue) {
                const unit = propValue.unit;
                if (isStr(unit)) to += unit;
              } else {
                propParams.duration = propValue;
              }
              propParams[propName] = isObjValue
                ? mergeObjects({ to }, propValue)
                : to;
              const animParams = mergeObjects(globalParams, propParams);
              animParams.composition = compositionTypes.replace;
              animParams.autoplay = false;
              const animation = (this.animations[propName] = new JSAnimation(
                targets,
                animParams,
                null,
                0,
                false,
              ).init());
              if (!this.targets.length) this.targets.push(...animation.targets);
              /** @type {AnimatableProperty} */
              this[propName] = (to, duration, ease) => {
                const tween = /** @type {Tween} */ (animation._head);
                if (isUnd(to) && tween) {
                  const numbers = tween._numbers;
                  if (numbers && numbers.length) {
                    return numbers;
                  } else {
                    return tween._modifier(tween._number);
                  }
                } else {
                  forEachChildren(animation, (/** @type {Tween} */ tween) => {
                    if (isArr(to)) {
                      for (
                        let i = 0, l = /** @type {Array} */ (to).length;
                        i < l;
                        i++
                      ) {
                        if (!isUnd(tween._numbers[i])) {
                          tween._fromNumbers[i] = /** @type {Number} */ (
                            tween._modifier(tween._numbers[i])
                          );
                          tween._toNumbers[i] = to[i];
                        }
                      }
                    } else {
                      tween._fromNumber = /** @type {Number} */ (
                        tween._modifier(tween._number)
                      );
                      tween._toNumber = /** @type {Number} */ (to);
                    }
                    if (!isUnd(ease)) tween._ease = parseEasings(ease);
                    tween._currentTime = 0;
                  });
                  if (!isUnd(duration)) animation.stretch(duration);
                  animation.reset(1).resume();
                  return this;
                }
              };
            }
          }

          revert() {
            for (let propName in this.animations) {
              this[propName] = noop;
              this.animations[propName].revert();
            }
            this.animations = {};
            this.targets.length = 0;
            return this;
          }
        }

        /**
         * @param {TargetsParam} targets
         * @param {AnimatableParams} parameters
         * @return {AnimatableObject}
         */
        const createAnimatable = (targets, parameters) =>
          /** @type {AnimatableObject} */ (new Animatable(targets, parameters));

        /*
         * Spring ease solver adapted from https://webkit.org/demos/spring/spring.js
         * Webkit Copyright © 2016 Apple Inc
         */

        /**
         * @typedef {Object} SpringParams
         * @property {Number} [mass=1] - Mass, default 1
         * @property {Number} [stiffness=100] - Stiffness, default 100
         * @property {Number} [damping=10] - Damping, default 10
         * @property {Number} [velocity=0] - Initial velocity, default 0
         */

        class Spring {
          /**
           * @param {SpringParams} [parameters]
           */
          constructor(parameters = {}) {
            this.timeStep = 0.02; // Interval fed to the solver to calculate duration
            this.restThreshold = 0.0005; // Values below this threshold are considered resting position
            this.restDuration = 200; // Duration in ms used to check if the spring is resting after reaching restThreshold
            this.maxDuration = 60000; // The maximum allowed spring duration in ms (default 1 min)
            this.maxRestSteps = this.restDuration / this.timeStep / K; // How many steps allowed after reaching restThreshold before stopping the duration calculation
            this.maxIterations = this.maxDuration / this.timeStep / K; // Calculate the maximum iterations allowed based on maxDuration
            this.m = clamp(setValue(parameters.mass, 1), 0, K);
            this.s = clamp(setValue(parameters.stiffness, 100), 1, K);
            this.d = clamp(setValue(parameters.damping, 10), 0.1, K);
            this.v = clamp(setValue(parameters.velocity, 0), -1e3, K);
            this.w0 = 0;
            this.zeta = 0;
            this.wd = 0;
            this.b = 0;
            this.solverDuration = 0;
            this.duration = 0;
            this.compute();
            /** @type {EasingFunction} */
            this.ease = (t) =>
              t === 0 || t === 1 ? t : this.solve(t * this.solverDuration);
          }

          /** @type {EasingFunction} */
          solve(time) {
            const { zeta, w0, wd, b } = this;
            let t = time;
            if (zeta < 1) {
              t = exp(-t * zeta * w0) * (1 * cos(wd * t) + b * sin(wd * t));
            } else {
              t = (1 + b * t) * exp(-t * w0);
            }
            return 1 - t;
          }

          compute() {
            const {
              maxRestSteps,
              maxIterations,
              restThreshold,
              timeStep,
              m,
              d,
              s,
              v,
            } = this;
            const w0 = (this.w0 = clamp(sqrt(s / m), minValue, K));
            const zeta = (this.zeta = d / (2 * sqrt(s * m)));
            const wd = (this.wd = zeta < 1 ? w0 * sqrt(1 - zeta * zeta) : 0);
            this.b = zeta < 1 ? (zeta * w0 + -v) / wd : -v + w0;
            let solverTime = 0;
            let restSteps = 0;
            let iterations = 0;
            while (restSteps < maxRestSteps && iterations < maxIterations) {
              if (abs(1 - this.solve(solverTime)) < restThreshold) {
                restSteps++;
              } else {
                restSteps = 0;
              }
              this.solverDuration = solverTime;
              solverTime += timeStep;
              iterations++;
            }
            this.duration =
              round(this.solverDuration * K, 0) * globals.timeScale;
          }

          get mass() {
            return this.m;
          }

          set mass(v) {
            this.m = clamp(setValue(v, 1), 0, K);
            this.compute();
          }

          get stiffness() {
            return this.s;
          }

          set stiffness(v) {
            this.s = clamp(setValue(v, 100), 1, K);
            this.compute();
          }

          get damping() {
            return this.d;
          }

          set damping(v) {
            this.d = clamp(setValue(v, 10), 0.1, K);
            this.compute();
          }

          get velocity() {
            return this.v;
          }

          set velocity(v) {
            this.v = clamp(setValue(v, 0), -1e3, K);
            this.compute();
          }
        }

        /**
         * @param {SpringParams} [parameters]
         * @returns {Spring}
         */
        const createSpring = (parameters) => new Spring(parameters);

        /**
         * @param {Event} e
         */
        const preventDefault = (e) => {
          if (e.cancelable) e.preventDefault();
        };

        class DOMProxy {
          /** @param {Object} el */
          constructor(el) {
            this.el = el;
            this.zIndex = 0;
            this.parentElement = null;
            this.classList = {
              add: noop,
              remove: noop,
            };
          }

          get x() {
            return this.el.x || 0;
          }
          set x(v) {
            this.el.x = v;
          }

          get y() {
            return this.el.y || 0;
          }
          set y(v) {
            this.el.y = v;
          }

          get width() {
            return this.el.width || 0;
          }
          set width(v) {
            this.el.width = v;
          }

          get height() {
            return this.el.height || 0;
          }
          set height(v) {
            this.el.height = v;
          }

          getBoundingClientRect() {
            return {
              top: this.y,
              right: this.x,
              bottom: this.y + this.height,
              left: this.x + this.width,
            };
          }
        }

        class Transforms {
          /**
           * @param {DOMTarget|DOMProxy} $el
           */
          constructor($el) {
            this.$el = $el;
            this.inlineTransforms = [];
            this.point = new DOMPoint();
            this.inversedMatrix = this.getMatrix().inverse();
          }

          /**
           * @param {Number} x
           * @param {Number} y
           * @return {DOMPoint}
           */
          normalizePoint(x, y) {
            this.point.x = x;
            this.point.y = y;
            return this.point.matrixTransform(this.inversedMatrix);
          }

          /**
           * @callback TraverseParentsCallback
           * @param {DOMTarget} $el
           * @param {Number} i
           */

          /**
           * @param {TraverseParentsCallback} cb
           */
          traverseUp(cb) {
            let $el = /** @type {DOMTarget|Document} */ (
                this.$el.parentElement
              ),
              i = 0;
            while ($el && $el !== doc) {
              cb(/** @type {DOMTarget} */ ($el), i);
              $el = /** @type {DOMTarget} */ ($el.parentElement);
              i++;
            }
          }

          getMatrix() {
            const matrix = new DOMMatrix();
            this.traverseUp(($el) => {
              const transformValue = getComputedStyle($el).transform;
              if (transformValue) {
                const elMatrix = new DOMMatrix(transformValue);
                matrix.preMultiplySelf(elMatrix);
              }
            });
            return matrix;
          }

          remove() {
            this.traverseUp(($el, i) => {
              this.inlineTransforms[i] = $el.style.transform;
              $el.style.transform = 'none';
            });
          }

          revert() {
            this.traverseUp(($el, i) => {
              const ct = this.inlineTransforms[i];
              if (ct === '') {
                $el.style.removeProperty('transform');
              } else {
                $el.style.transform = ct;
              }
            });
          }
        }

        /**
         * @template {Array<Number>|DOMTargetSelector|String|Number|Boolean|Function|DraggableCursorParams} T
         * @param {T | ((draggable: Draggable) => T)} value
         * @param {Draggable} draggable
         * @return {T}
         */
        const parseDraggableFunctionParameter = (value, draggable) =>
          value && isFnc(value)
            ? /** @type {Function} */ (value)(draggable)
            : value;

        let zIndex = 0;

        class Draggable {
          /**
           * @param {TargetsParam} target
           * @param {DraggableParams} [parameters]
           */
          constructor(target, parameters = {}) {
            if (!target) return;
            if (globals.scope) globals.scope.revertibles.push(this);
            const paramX = parameters.x;
            const paramY = parameters.y;
            const trigger = parameters.trigger;
            const modifier = parameters.modifier;
            const ease = parameters.releaseEase;
            const customEase = ease && parseEasings(ease);
            const hasSpring =
              !isUnd(ease) && !isUnd(/** @type {Spring} */ (ease).ease);
            const xProp = /** @type {String} */ (
              isObj(paramX) && !isUnd(/** @type {Object} */ (paramX).mapTo)
                ? /** @type {Object} */ (paramX).mapTo
                : 'translateX'
            );
            const yProp = /** @type {String} */ (
              isObj(paramY) && !isUnd(/** @type {Object} */ (paramY).mapTo)
                ? /** @type {Object} */ (paramY).mapTo
                : 'translateY'
            );
            const container = parseDraggableFunctionParameter(
              parameters.container,
              this,
            );
            this.containerArray = isArr(container) ? container : null;
            this.$container = /** @type {HTMLElement} */ (
              container && !this.containerArray
                ? parseTargets(/** @type {DOMTarget} */ (container))[0]
                : doc.body
            );
            this.useWin = this.$container === doc.body;
            /** @type {Window | HTMLElement} */
            this.$scrollContainer = this.useWin ? win : this.$container;
            this.$target = /** @type {HTMLElement} */ (
              isObj(target) ? new DOMProxy(target) : parseTargets(target)[0]
            );
            this.$trigger = /** @type {HTMLElement} */ (
              parseTargets(trigger ? trigger : target)[0]
            );
            this.fixed = getTargetValue(this.$target, 'position') === 'fixed';
            // Refreshable parameters
            this.isFinePointer = true;
            /** @type {[Number, Number, Number, Number]} */
            this.containerPadding = [0, 0, 0, 0];
            /** @type {Number} */
            this.containerFriction = 0;
            /** @type {Number} */
            this.releaseContainerFriction = 0;
            /** @type {Number|Array<Number>} */
            this.snapX = 0;
            /** @type {Number|Array<Number>} */
            this.snapY = 0;
            /** @type {Number} */
            this.scrollSpeed = 0;
            /** @type {Number} */
            this.scrollThreshold = 0;
            /** @type {Number} */
            this.dragSpeed = 0;
            /** @type {Number} */
            this.maxVelocity = 0;
            /** @type {Number} */
            this.minVelocity = 0;
            /** @type {Number} */
            this.velocityMultiplier = 0;
            /** @type {Boolean|DraggableCursorParams} */
            this.cursor = false;
            /** @type {Spring} */
            this.releaseXSpring = hasSpring
              ? /** @type {Spring} */ (ease)
              : createSpring({
                  mass: setValue(parameters.releaseMass, 1),
                  stiffness: setValue(parameters.releaseStiffness, 80),
                  damping: setValue(parameters.releaseDamping, 20),
                });
            /** @type {Spring} */
            this.releaseYSpring = hasSpring
              ? /** @type {Spring} */ (ease)
              : createSpring({
                  mass: setValue(parameters.releaseMass, 1),
                  stiffness: setValue(parameters.releaseStiffness, 80),
                  damping: setValue(parameters.releaseDamping, 20),
                });
            /** @type {EasingFunction} */
            this.releaseEase = customEase || eases.outQuint;
            /** @type {Boolean} */
            this.hasReleaseSpring = hasSpring;
            /** @type {Callback<this>} */
            this.onGrab = parameters.onGrab || noop;
            /** @type {Callback<this>} */
            this.onDrag = parameters.onDrag || noop;
            /** @type {Callback<this>} */
            this.onRelease = parameters.onRelease || noop;
            /** @type {Callback<this>} */
            this.onUpdate = parameters.onUpdate || noop;
            /** @type {Callback<this>} */
            this.onSettle = parameters.onSettle || noop;
            /** @type {Callback<this>} */
            this.onSnap = parameters.onSnap || noop;
            /** @type {Callback<this>} */
            this.onResize = parameters.onResize || noop;
            /** @type {Callback<this>} */
            this.onAfterResize = parameters.onAfterResize || noop;
            /** @type {[Number, Number]} */
            this.disabled = [0, 0];
            /** @type {AnimatableParams} */
            const animatableParams = {};
            if (modifier) animatableParams.modifier = modifier;
            if (isUnd(paramX) || paramX === true) {
              animatableParams[xProp] = 0;
            } else if (isObj(paramX)) {
              const paramXObject = /** @type {DraggableAxisParam} */ (paramX);
              const animatableXParams = {};
              if (paramXObject.modifier)
                animatableXParams.modifier = paramXObject.modifier;
              if (paramXObject.composition)
                animatableXParams.composition = paramXObject.composition;
              animatableParams[xProp] = animatableXParams;
            } else if (paramX === false) {
              animatableParams[xProp] = 0;
              this.disabled[0] = 1;
            }
            if (isUnd(paramY) || paramY === true) {
              animatableParams[yProp] = 0;
            } else if (isObj(paramY)) {
              const paramYObject = /** @type {DraggableAxisParam} */ (paramY);
              const animatableYParams = {};
              if (paramYObject.modifier)
                animatableYParams.modifier = paramYObject.modifier;
              if (paramYObject.composition)
                animatableYParams.composition = paramYObject.composition;
              animatableParams[yProp] = animatableYParams;
            } else if (paramY === false) {
              animatableParams[yProp] = 0;
              this.disabled[1] = 1;
            }
            /** @type {AnimatableObject} */
            this.animate = /** @type {AnimatableObject} */ (
              new Animatable(this.$target, animatableParams)
            );
            // Internal props
            this.xProp = xProp;
            this.yProp = yProp;
            this.destX = 0;
            this.destY = 0;
            this.deltaX = 0;
            this.deltaY = 0;
            this.scroll = { x: 0, y: 0 };
            /** @type {[Number, Number, Number, Number]} */
            this.coords = [this.x, this.y, 0, 0]; // x, y, temp x, temp y
            /** @type {[Number, Number]} */
            this.snapped = [0, 0]; // x, y
            /** @type {[Number, Number, Number, Number, Number, Number, Number, Number]} */
            this.pointer = [0, 0, 0, 0, 0, 0, 0, 0]; // x1, y1, x2, y2, temp x1, temp y1, temp x2, temp y2
            /** @type {[Number, Number]} */
            this.scrollView = [0, 0]; // w, h
            /** @type {[Number, Number, Number, Number]} */
            this.dragArea = [0, 0, 0, 0]; // x, y, w, h
            /** @type {[Number, Number, Number, Number]} */
            this.containerBounds = [-1e12, maxValue, maxValue, -1e12]; // t, r, b, l
            /** @type {[Number, Number, Number, Number]} */
            this.scrollBounds = [0, 0, 0, 0]; // t, r, b, l
            /** @type {[Number, Number, Number, Number]} */
            this.targetBounds = [0, 0, 0, 0]; // t, r, b, l
            /** @type {[Number, Number]} */
            this.window = [0, 0]; // w, h
            /** @type {[Number, Number, Number]} */
            this.velocityStack = [0, 0, 0];
            /** @type {Number} */
            this.velocityStackIndex = 0;
            /** @type {Number} */
            this.velocityTime = now();
            /** @type {Number} */
            this.velocity = 0;
            /** @type {Number} */
            this.angle = 0;
            /** @type {JSAnimation} */
            this.cursorStyles = null;
            /** @type {JSAnimation} */
            this.triggerStyles = null;
            /** @type {JSAnimation} */
            this.bodyStyles = null;
            /** @type {JSAnimation} */
            this.targetStyles = null;
            /** @type {JSAnimation} */
            this.touchActionStyles = null;
            this.transforms = new Transforms(this.$target);
            this.overshootCoords = { x: 0, y: 0 };
            this.overshootXTicker = new Timer(
              { autoplay: false },
              null,
              0,
            ).init();
            this.overshootYTicker = new Timer(
              { autoplay: false },
              null,
              0,
            ).init();
            this.updateTicker = new Timer({ autoplay: false }, null, 0).init();
            this.overshootXTicker.onUpdate = () => {
              if (this.disabled[0]) return;
              this.updated = true;
              this.manual = true;
              this.animate[this.xProp](this.overshootCoords.x, 0);
            };
            this.overshootXTicker.onComplete = () => {
              if (this.disabled[0]) return;
              this.manual = false;
              this.animate[this.xProp](this.overshootCoords.x, 0);
            };
            this.overshootYTicker.onUpdate = () => {
              if (this.disabled[1]) return;
              this.updated = true;
              this.manual = true;
              this.animate[this.yProp](this.overshootCoords.y, 0);
            };
            this.overshootYTicker.onComplete = () => {
              if (this.disabled[1]) return;
              this.manual = false;
              this.animate[this.yProp](this.overshootCoords.y, 0);
            };
            this.updateTicker.onUpdate = () => this.update();
            this.contained = !isUnd(container);
            this.manual = false;
            this.grabbed = false;
            this.dragged = false;
            this.updated = false;
            this.released = false;
            this.canScroll = false;
            this.enabled = false;
            this.initialized = false;
            this.activeProp = this.disabled[1] ? xProp : yProp;
            this.animate.animations[this.activeProp].onRender = () => {
              const hasUpdated = this.updated;
              const hasMoved = this.grabbed && hasUpdated;
              const hasReleased = !hasMoved && this.released;
              const x = this.x;
              const y = this.y;
              const dx = x - this.coords[2];
              const dy = y - this.coords[3];
              this.deltaX = dx;
              this.deltaY = dy;
              this.coords[2] = x;
              this.coords[3] = y;
              if (hasUpdated) {
                this.onUpdate(this);
              }
              if (!hasReleased) {
                this.updated = false;
              } else {
                this.computeVelocity(dx, dy);
                this.angle = atan2(dy, dx);
              }
            };
            this.animate.animations[this.activeProp].onComplete = () => {
              if (!this.grabbed && this.released) {
                // Set eleased to false before calling onSettle to avoid recursion
                this.released = false;
              }
              if (!this.manual) {
                this.deltaX = 0;
                this.deltaY = 0;
                this.velocity = 0;
                this.velocityStack[0] = 0;
                this.velocityStack[1] = 0;
                this.velocityStack[2] = 0;
                this.velocityStackIndex = 0;
                this.onSettle(this);
              }
            };
            this.resizeTicker = new Timer({
              autoplay: false,
              duration: 150 * globals.timeScale,
              onComplete: () => {
                this.onResize(this);
                this.refresh();
                this.onAfterResize(this);
              },
            }).init();
            this.parameters = parameters;
            this.resizeObserver = new ResizeObserver(() => {
              if (this.initialized) {
                this.resizeTicker.restart();
              } else {
                this.initialized = true;
              }
            });
            this.enable();
            this.refresh();
            this.resizeObserver.observe(this.$container);
            if (!isObj(target)) this.resizeObserver.observe(this.$target);
          }

          /**
           * @param  {Number} dx
           * @param  {Number} dy
           * @return {Number}
           */
          computeVelocity(dx, dy) {
            const prevTime = this.velocityTime;
            const curTime = now();
            const elapsed = curTime - prevTime;
            if (elapsed < 17) return this.velocity;
            this.velocityTime = curTime;
            const velocityStack = this.velocityStack;
            const vMul = this.velocityMultiplier;
            const minV = this.minVelocity;
            const maxV = this.maxVelocity;
            const vi = this.velocityStackIndex;
            velocityStack[vi] = round(
              clamp((sqrt(dx * dx + dy * dy) / elapsed) * vMul, minV, maxV),
              5,
            );
            const velocity = max(
              velocityStack[0],
              velocityStack[1],
              velocityStack[2],
            );
            this.velocity = velocity;
            this.velocityStackIndex = (vi + 1) % 3;
            return velocity;
          }

          /**
           * @param {Number}  x
           * @param {Boolean} [muteUpdateCallback]
           * @return {this}
           */
          setX(x, muteUpdateCallback = false) {
            if (this.disabled[0]) return;
            const v = round(x, 5);
            this.overshootXTicker.pause();
            this.manual = true;
            this.updated = !muteUpdateCallback;
            this.destX = v;
            this.snapped[0] = snap(v, this.snapX);
            this.animate[this.xProp](v, 0);
            this.manual = false;
            return this;
          }

          /**
           * @param {Number}  y
           * @param {Boolean} [muteUpdateCallback]
           * @return {this}
           */
          setY(y, muteUpdateCallback = false) {
            if (this.disabled[1]) return;
            const v = round(y, 5);
            this.overshootYTicker.pause();
            this.manual = true;
            this.updated = !muteUpdateCallback;
            this.destY = v;
            this.snapped[1] = snap(v, this.snapY);
            this.animate[this.yProp](v, 0);
            this.manual = false;
            return this;
          }

          get x() {
            return round(
              /** @type {Number} */ (this.animate[this.xProp]()),
              globals.precision,
            );
          }

          set x(x) {
            this.setX(x, false);
          }

          get y() {
            return round(
              /** @type {Number} */ (this.animate[this.yProp]()),
              globals.precision,
            );
          }

          set y(y) {
            this.setY(y, false);
          }

          get progressX() {
            return mapRange(
              this.x,
              this.containerBounds[3],
              this.containerBounds[1],
              0,
              1,
            );
          }

          set progressX(x) {
            this.setX(
              mapRange(
                x,
                0,
                1,
                this.containerBounds[3],
                this.containerBounds[1],
              ),
              false,
            );
          }

          get progressY() {
            return mapRange(
              this.y,
              this.containerBounds[0],
              this.containerBounds[2],
              0,
              1,
            );
          }

          set progressY(y) {
            this.setY(
              mapRange(
                y,
                0,
                1,
                this.containerBounds[0],
                this.containerBounds[2],
              ),
              false,
            );
          }

          updateScrollCoords() {
            const sx = round(
              this.useWin ? win.scrollX : this.$container.scrollLeft,
              0,
            );
            const sy = round(
              this.useWin ? win.scrollY : this.$container.scrollTop,
              0,
            );
            const [cpt, cpr, cpb, cpl] = this.containerPadding;
            const threshold = this.scrollThreshold;
            this.scroll.x = sx;
            this.scroll.y = sy;
            this.scrollBounds[0] = sy - this.targetBounds[0] + cpt - threshold;
            this.scrollBounds[1] = sx - this.targetBounds[1] - cpr + threshold;
            this.scrollBounds[2] = sy - this.targetBounds[2] - cpb + threshold;
            this.scrollBounds[3] = sx - this.targetBounds[3] + cpl - threshold;
          }

          updateBoundingValues() {
            const $container = this.$container;
            const cx = this.x;
            const cy = this.y;
            const cx2 = this.coords[2];
            const cy2 = this.coords[3];
            // Prevents interfering with the scroll area in cases the target is outside of the container
            // Make sure the temp coords are also adjuset to prevents wrong delta calculation on updates
            this.coords[2] = 0;
            this.coords[3] = 0;
            this.setX(0, true);
            this.setY(0, true);
            this.transforms.remove();
            const iw = (this.window[0] = win.innerWidth);
            const ih = (this.window[1] = win.innerHeight);
            const uw = this.useWin;
            const sw = $container.scrollWidth;
            const sh = $container.scrollHeight;
            const fx = this.fixed;
            const transformContainerRect = $container.getBoundingClientRect();
            const [cpt, cpr, cpb, cpl] = this.containerPadding;
            this.dragArea[0] = uw ? 0 : transformContainerRect.left;
            this.dragArea[1] = uw ? 0 : transformContainerRect.top;
            this.scrollView[0] = uw ? clamp(sw, iw, sw) : sw;
            this.scrollView[1] = uw ? clamp(sh, ih, sh) : sh;
            this.updateScrollCoords();
            const { width, height, left, top, right, bottom } =
              $container.getBoundingClientRect();
            this.dragArea[2] = round(uw ? clamp(width, iw, iw) : width, 0);
            this.dragArea[3] = round(uw ? clamp(height, ih, ih) : height, 0);
            const containerOverflow = getTargetValue($container, 'overflow');
            const visibleOverflow = containerOverflow === 'visible';
            const hiddenOverflow = containerOverflow === 'hidden';
            this.canScroll = fx
              ? false
              : this.contained &&
                (($container === doc.body && visibleOverflow) ||
                  (!hiddenOverflow && !visibleOverflow)) &&
                (sw > this.dragArea[2] + cpl - cpr ||
                  sh > this.dragArea[3] + cpt - cpb) &&
                (!this.containerArray ||
                  (this.containerArray && !isArr(this.containerArray)));
            if (this.contained) {
              const sx = this.scroll.x;
              const sy = this.scroll.y;
              const canScroll = this.canScroll;
              const targetRect = this.$target.getBoundingClientRect();
              const hiddenLeft = canScroll
                ? uw
                  ? 0
                  : $container.scrollLeft
                : 0;
              const hiddenTop = canScroll ? (uw ? 0 : $container.scrollTop) : 0;
              const hiddenRight = canScroll
                ? this.scrollView[0] - hiddenLeft - width
                : 0;
              const hiddenBottom = canScroll
                ? this.scrollView[1] - hiddenTop - height
                : 0;
              this.targetBounds[0] = round(
                targetRect.top + sy - (uw ? 0 : top),
                0,
              );
              this.targetBounds[1] = round(
                targetRect.right + sx - (uw ? iw : right),
                0,
              );
              this.targetBounds[2] = round(
                targetRect.bottom + sy - (uw ? ih : bottom),
                0,
              );
              this.targetBounds[3] = round(
                targetRect.left + sx - (uw ? 0 : left),
                0,
              );
              if (this.containerArray) {
                this.containerBounds[0] = this.containerArray[0] + cpt;
                this.containerBounds[1] = this.containerArray[1] - cpr;
                this.containerBounds[2] = this.containerArray[2] - cpb;
                this.containerBounds[3] = this.containerArray[3] + cpl;
              } else {
                this.containerBounds[0] = -round(
                  targetRect.top -
                    (fx ? clamp(top, 0, ih) : top) +
                    hiddenTop -
                    cpt,
                  0,
                );
                this.containerBounds[1] = -round(
                  targetRect.right -
                    (fx ? clamp(right, 0, iw) : right) -
                    hiddenRight +
                    cpr,
                  0,
                );
                this.containerBounds[2] = -round(
                  targetRect.bottom -
                    (fx ? clamp(bottom, 0, ih) : bottom) -
                    hiddenBottom +
                    cpb,
                  0,
                );
                this.containerBounds[3] = -round(
                  targetRect.left -
                    (fx ? clamp(left, 0, iw) : left) +
                    hiddenLeft -
                    cpl,
                  0,
                );
              }
            }
            this.transforms.revert();
            // Restore coordinates
            this.coords[2] = cx2;
            this.coords[3] = cy2;
            this.setX(cx, true);
            this.setY(cy, true);
          }

          /**
           * Returns 0 if not OB, 1 if x is OB, 2 if y is OB, 3 if both x and y are OB
           *
           * @param  {Array} bounds
           * @param  {Number} x
           * @param  {Number} y
           * @return {Number}
           */
          isOutOfBounds(bounds, x, y) {
            if (!this.contained) return 0;
            const [bt, br, bb, bl] = bounds;
            const [dx, dy] = this.disabled;
            const obx = (!dx && x < bl) || (!dx && x > br);
            const oby = (!dy && y < bt) || (!dy && y > bb);
            return obx && !oby ? 1 : !obx && oby ? 2 : obx && oby ? 3 : 0;
          }

          refresh() {
            const params = this.parameters;
            const paramX = params.x;
            const paramY = params.y;
            const container = parseDraggableFunctionParameter(
              params.container,
              this,
            );
            const cp =
              parseDraggableFunctionParameter(params.containerPadding, this) ||
              0;
            const containerPadding =
              /** @type {[Number, Number, Number, Number]} */ (
                isArr(cp) ? cp : [cp, cp, cp, cp]
              );
            const cx = this.x;
            const cy = this.y;
            const parsedCursorStyles = parseDraggableFunctionParameter(
              params.cursor,
              this,
            );
            const cursorStyles = { onHover: 'grab', onGrab: 'grabbing' };
            if (parsedCursorStyles) {
              const { onHover, onGrab } = /** @type {DraggableCursorParams} */ (
                parsedCursorStyles
              );
              if (onHover) cursorStyles.onHover = onHover;
              if (onGrab) cursorStyles.onGrab = onGrab;
            }
            this.containerArray = isArr(container) ? container : null;
            this.$container = /** @type {HTMLElement} */ (
              container && !this.containerArray
                ? parseTargets(/** @type {DOMTarget} */ (container))[0]
                : doc.body
            );
            this.useWin = this.$container === doc.body;
            /** @type {Window | HTMLElement} */
            this.$scrollContainer = this.useWin ? win : this.$container;
            this.isFinePointer = matchMedia('(pointer:fine)').matches;
            this.containerPadding = setValue(containerPadding, [0, 0, 0, 0]);
            this.containerFriction = clamp(
              setValue(
                parseDraggableFunctionParameter(params.containerFriction, this),
                0.8,
              ),
              0,
              1,
            );
            this.releaseContainerFriction = clamp(
              setValue(
                parseDraggableFunctionParameter(
                  params.releaseContainerFriction,
                  this,
                ),
                this.containerFriction,
              ),
              0,
              1,
            );
            this.snapX = parseDraggableFunctionParameter(
              isObj(paramX) && !isUnd(paramX.snap) ? paramX.snap : params.snap,
              this,
            );
            this.snapY = parseDraggableFunctionParameter(
              isObj(paramY) && !isUnd(paramY.snap) ? paramY.snap : params.snap,
              this,
            );
            this.scrollSpeed = setValue(
              parseDraggableFunctionParameter(params.scrollSpeed, this),
              1.5,
            );
            this.scrollThreshold = setValue(
              parseDraggableFunctionParameter(params.scrollThreshold, this),
              20,
            );
            this.dragSpeed = setValue(
              parseDraggableFunctionParameter(params.dragSpeed, this),
              1,
            );
            this.minVelocity = setValue(
              parseDraggableFunctionParameter(params.minVelocity, this),
              0,
            );
            this.maxVelocity = setValue(
              parseDraggableFunctionParameter(params.maxVelocity, this),
              50,
            );
            this.velocityMultiplier = setValue(
              parseDraggableFunctionParameter(params.velocityMultiplier, this),
              1,
            );
            this.cursor = parsedCursorStyles === false ? false : cursorStyles;
            this.updateBoundingValues();

            // const ob = this.isOutOfBounds(this.containerBounds, this.x, this.y);
            // if (ob === 1 || ob === 3) this.progressX = px;
            // if (ob === 2 || ob === 3) this.progressY = py;

            // if (this.initialized && this.contained) {
            //   if (this.progressX !== px) this.progressX = px;
            //   if (this.progressY !== py) this.progressY = py;
            // }

            const [bt, br, bb, bl] = this.containerBounds;
            this.setX(clamp(cx, bl, br), true);
            this.setY(clamp(cy, bt, bb), true);
          }

          update() {
            this.updateScrollCoords();
            if (this.canScroll) {
              const [cpt, cpr, cpb, cpl] = this.containerPadding;
              const [sw, sh] = this.scrollView;
              const daw = this.dragArea[2];
              const dah = this.dragArea[3];
              const csx = this.scroll.x;
              const csy = this.scroll.y;
              const nsw = this.$container.scrollWidth;
              const nsh = this.$container.scrollHeight;
              const csw = this.useWin ? clamp(nsw, this.window[0], nsw) : nsw;
              const csh = this.useWin ? clamp(nsh, this.window[1], nsh) : nsh;
              const swd = sw - csw;
              const shd = sh - csh;
              // Handle cases where the scrollarea dimensions changes during drag
              if (this.dragged && swd > 0) {
                this.coords[0] -= swd;
                this.scrollView[0] = csw;
              }
              if (this.dragged && shd > 0) {
                this.coords[1] -= shd;
                this.scrollView[1] = csh;
              }
              // Handle autoscroll when target is at the edges of the scroll bounds
              const s = this.scrollSpeed * 10;
              const threshold = this.scrollThreshold;
              const [x, y] = this.coords;
              const [st, sr, sb, sl] = this.scrollBounds;
              const t = round(clamp((y - st + cpt) / threshold, -1, 0) * s, 0);
              const r = round(clamp((x - sr - cpr) / threshold, 0, 1) * s, 0);
              const b = round(clamp((y - sb - cpb) / threshold, 0, 1) * s, 0);
              const l = round(clamp((x - sl + cpl) / threshold, -1, 0) * s, 0);
              if (t || b || l || r) {
                const [nx, ny] = this.disabled;
                let scrollX = csx;
                let scrollY = csy;
                if (!nx) {
                  scrollX = round(clamp(csx + (l || r), 0, sw - daw), 0);
                  this.coords[0] -= csx - scrollX;
                }
                if (!ny) {
                  scrollY = round(clamp(csy + (t || b), 0, sh - dah), 0);
                  this.coords[1] -= csy - scrollY;
                }
                // Note: Safari mobile requires to use different scroll methods depending if using the window or not
                if (this.useWin) {
                  this.$scrollContainer.scrollBy(
                    -(csx - scrollX),
                    -(csy - scrollY),
                  );
                } else {
                  this.$scrollContainer.scrollTo(scrollX, scrollY);
                }
              }
            }
            const [ct, cr, cb, cl] = this.containerBounds;
            const [px1, py1, px2, py2, px3, py3] = this.pointer;
            this.coords[0] += (px1 - px3) * this.dragSpeed;
            this.coords[1] += (py1 - py3) * this.dragSpeed;
            this.pointer[4] = px1;
            this.pointer[5] = py1;
            const [cx, cy] = this.coords;
            const [sx, sy] = this.snapped;
            const cf = (1 - this.containerFriction) * this.dragSpeed;
            this.setX(
              cx > cr
                ? cr + (cx - cr) * cf
                : cx < cl
                  ? cl + (cx - cl) * cf
                  : cx,
              false,
            );
            this.setY(
              cy > cb
                ? cb + (cy - cb) * cf
                : cy < ct
                  ? ct + (cy - ct) * cf
                  : cy,
              false,
            );
            this.computeVelocity(px1 - px3, py1 - py3);
            this.angle = atan2(py1 - py2, px1 - px2);
            const [nsx, nsy] = this.snapped;
            if ((nsx !== sx && this.snapX) || (nsy !== sy && this.snapY)) {
              this.onSnap(this);
            }
          }

          stop() {
            this.updateTicker.pause();
            this.overshootXTicker.pause();
            this.overshootYTicker.pause();
            // Pauses the in bounds onRelease animations
            for (let prop in this.animate.animations)
              this.animate.animations[prop].pause();
            remove(this, null, 'x');
            remove(this, null, 'y');
            remove(this, null, 'progressX');
            remove(this, null, 'progressY');
            remove(this.scroll); // Removes any active animations on the container scroll
            remove(this.overshootCoords); // Removes active overshoot animations
            return this;
          }

          /**
           * @param {Number} [duration]
           * @param {Number} [gap]
           * @param {EasingParam} [ease]
           * @return {this}
           */
          scrollInView(duration, gap = 0, ease = eases.inOutQuad) {
            this.updateScrollCoords();
            const x = this.destX;
            const y = this.destY;
            const scroll = this.scroll;
            const scrollBounds = this.scrollBounds;
            const canScroll = this.canScroll;
            if (
              !this.containerArray &&
              this.isOutOfBounds(scrollBounds, x, y)
            ) {
              const [st, sr, sb, sl] = scrollBounds;
              const t = round(clamp(y - st, -1e12, 0), 0);
              const r = round(clamp(x - sr, 0, maxValue), 0);
              const b = round(clamp(y - sb, 0, maxValue), 0);
              const l = round(clamp(x - sl, -1e12, 0), 0);
              new JSAnimation(scroll, {
                x: round(scroll.x + (l ? l - gap : r ? r + gap : 0), 0),
                y: round(scroll.y + (t ? t - gap : b ? b + gap : 0), 0),
                duration: isUnd(duration) ? 350 * globals.timeScale : duration,
                ease,
                onUpdate: () => {
                  this.canScroll = false;
                  this.$scrollContainer.scrollTo(scroll.x, scroll.y);
                },
              })
                .init()
                .then(() => {
                  this.canScroll = canScroll;
                });
            }
            return this;
          }

          handleHover() {
            if (this.isFinePointer && this.cursor && !this.cursorStyles) {
              this.cursorStyles = setTargetValues(this.$trigger, {
                cursor: /** @type {DraggableCursorParams} */ (this.cursor)
                  .onHover,
              });
            }
          }

          /**
           * @param  {Number} [duration]
           * @param  {Number} [gap]
           * @param  {EasingParam} [ease]
           * @return {this}
           */
          animateInView(duration, gap = 0, ease = eases.inOutQuad) {
            this.stop();
            this.updateBoundingValues();
            const x = this.x;
            const y = this.y;
            const [cpt, cpr, cpb, cpl] = this.containerPadding;
            const bt = this.scroll.y - this.targetBounds[0] + cpt + gap;
            const br = this.scroll.x - this.targetBounds[1] - cpr - gap;
            const bb = this.scroll.y - this.targetBounds[2] - cpb - gap;
            const bl = this.scroll.x - this.targetBounds[3] + cpl + gap;
            const ob = this.isOutOfBounds([bt, br, bb, bl], x, y);
            if (ob) {
              const [disabledX, disabledY] = this.disabled;
              const destX = clamp(snap(x, this.snapX), bl, br);
              const destY = clamp(snap(y, this.snapY), bt, bb);
              const dur = isUnd(duration) ? 350 * globals.timeScale : duration;
              if (!disabledX && (ob === 1 || ob === 3))
                this.animate[this.xProp](destX, dur, ease);
              if (!disabledY && (ob === 2 || ob === 3))
                this.animate[this.yProp](destY, dur, ease);
            }
            return this;
          }

          /**
           * @param {MouseEvent|TouchEvent} e
           */
          handleDown(e) {
            const $eTarget = /** @type {HTMLElement} */ (e.target);
            if (
              this.grabbed ||
              /** @type {HTMLInputElement}  */ ($eTarget).type === 'range'
            )
              return;

            e.stopPropagation();

            this.grabbed = true;
            this.released = false;
            this.stop();
            this.updateBoundingValues();
            const touches = /** @type {TouchEvent} */ (e).changedTouches;
            const eventX = touches
              ? touches[0].clientX
              : /** @type {MouseEvent} */ (e).clientX;
            const eventY = touches
              ? touches[0].clientY
              : /** @type {MouseEvent} */ (e).clientY;
            const { x, y } = this.transforms.normalizePoint(eventX, eventY);
            const [ct, cr, cb, cl] = this.containerBounds;
            const cf = (1 - this.containerFriction) * this.dragSpeed;
            const cx = this.x;
            const cy = this.y;
            this.coords[0] = this.coords[2] = !cf
              ? cx
              : cx > cr
                ? cr + (cx - cr) / cf
                : cx < cl
                  ? cl + (cx - cl) / cf
                  : cx;
            this.coords[1] = this.coords[3] = !cf
              ? cy
              : cy > cb
                ? cb + (cy - cb) / cf
                : cy < ct
                  ? ct + (cy - ct) / cf
                  : cy;
            this.pointer[0] = x;
            this.pointer[1] = y;
            this.pointer[2] = x;
            this.pointer[3] = y;
            this.pointer[4] = x;
            this.pointer[5] = y;
            this.pointer[6] = x;
            this.pointer[7] = y;
            this.deltaX = 0;
            this.deltaY = 0;
            this.velocity = 0;
            this.velocityStack[0] = 0;
            this.velocityStack[1] = 0;
            this.velocityStack[2] = 0;
            this.velocityStackIndex = 0;
            this.angle = 0;
            if (this.targetStyles) {
              this.targetStyles.revert();
              this.targetStyles = null;
            }
            const z = /** @type {Number} */ (
              getTargetValue(this.$target, 'zIndex', false)
            );
            zIndex = (z > zIndex ? z : zIndex) + 1;
            this.targetStyles = setTargetValues(this.$target, { zIndex });
            if (this.triggerStyles) {
              this.triggerStyles.revert();
              this.triggerStyles = null;
            }
            if (this.cursorStyles) {
              this.cursorStyles.revert();
              this.cursorStyles = null;
            }
            if (this.isFinePointer && this.cursor) {
              this.bodyStyles = setTargetValues(doc.body, {
                cursor: /** @type {DraggableCursorParams} */ (this.cursor)
                  .onGrab,
              });
            }
            this.scrollInView(100, 0, eases.out(3));
            this.onGrab(this);

            doc.addEventListener('touchmove', this);
            doc.addEventListener('touchend', this);
            doc.addEventListener('touchcancel', this);
            doc.addEventListener('mousemove', this);
            doc.addEventListener('mouseup', this);
            doc.addEventListener('selectstart', this);
          }

          /**
           * @param {MouseEvent|TouchEvent} e
           */
          handleMove(e) {
            if (!this.grabbed) return;
            const touches = /** @type {TouchEvent} */ (e).changedTouches;
            const eventX = touches
              ? touches[0].clientX
              : /** @type {MouseEvent} */ (e).clientX;
            const eventY = touches
              ? touches[0].clientY
              : /** @type {MouseEvent} */ (e).clientY;
            const { x, y } = this.transforms.normalizePoint(eventX, eventY);
            const movedX = x - this.pointer[6];
            const movedY = y - this.pointer[7];

            let $parent = /** @type {HTMLElement} */ (e.target);
            let isAtTop = false;
            let isAtBottom = false;
            let canTouchScroll = false;

            while (touches && $parent && $parent !== this.$trigger) {
              const overflowY = getTargetValue($parent, 'overflow-y');
              if (overflowY !== 'hidden' && overflowY !== 'visible') {
                const { scrollTop, scrollHeight, clientHeight } = $parent;
                if (scrollHeight > clientHeight) {
                  canTouchScroll = true;
                  isAtTop = scrollTop <= 3;
                  isAtBottom = scrollTop >= scrollHeight - clientHeight - 3;
                  break;
                }
              }
              $parent = /** @type {HTMLElement} */ ($parent.parentNode);
            }

            if (
              canTouchScroll &&
              ((!isAtTop && !isAtBottom) ||
                (isAtTop && movedY < 0) ||
                (isAtBottom && movedY > 0))
            ) {
              this.pointer[0] = x;
              this.pointer[1] = y;
              this.pointer[2] = x;
              this.pointer[3] = y;
              this.pointer[4] = x;
              this.pointer[5] = y;
              this.pointer[6] = x;
              this.pointer[7] = y;
            } else {
              preventDefault(e);

              // Needed to prevents click on handleUp
              if (!this.triggerStyles)
                this.triggerStyles = setTargetValues(this.$trigger, {
                  pointerEvents: 'none',
                });
              // Needed to prevent page scroll while dragging on touch devvice
              this.$trigger.addEventListener('touchstart', preventDefault, {
                passive: false,
              });
              this.$trigger.addEventListener('touchmove', preventDefault, {
                passive: false,
              });
              this.$trigger.addEventListener('touchend', preventDefault);

              if (
                (!this.disabled[0] && abs(movedX) > 3) ||
                (!this.disabled[1] && abs(movedY) > 3)
              ) {
                this.updateTicker.resume();
                this.pointer[2] = this.pointer[0];
                this.pointer[3] = this.pointer[1];
                this.pointer[0] = x;
                this.pointer[1] = y;
                this.dragged = true;
                this.released = false;
                this.onDrag(this);
              }
            }
          }

          handleUp() {
            if (!this.grabbed) return;

            this.updateTicker.pause();

            if (this.triggerStyles) {
              this.triggerStyles.revert();
              this.triggerStyles = null;
            }

            if (this.bodyStyles) {
              this.bodyStyles.revert();
              this.bodyStyles = null;
            }

            const [disabledX, disabledY] = this.disabled;
            const [px1, py1, px2, py2, px3, py3] = this.pointer;
            const [ct, cr, cb, cl] = this.containerBounds;
            const [sx, sy] = this.snapped;
            const springX = this.releaseXSpring;
            const springY = this.releaseYSpring;
            const releaseEase = this.releaseEase;
            const hasReleaseSpring = this.hasReleaseSpring;
            const overshootCoords = this.overshootCoords;
            const cx = this.x;
            const cy = this.y;
            const pv = this.computeVelocity(px1 - px3, py1 - py3);
            const pa = (this.angle = atan2(py1 - py2, px1 - px2));
            const ds = pv * 150;
            const cf = (1 - this.releaseContainerFriction) * this.dragSpeed;
            const nx = cx + cos(pa) * ds;
            const ny = cy + sin(pa) * ds;
            const bx =
              nx > cr
                ? cr + (nx - cr) * cf
                : nx < cl
                  ? cl + (nx - cl) * cf
                  : nx;
            const by =
              ny > cb
                ? cb + (ny - cb) * cf
                : ny < ct
                  ? ct + (ny - ct) * cf
                  : ny;
            const dx = (this.destX = clamp(
              round(snap(bx, this.snapX), 5),
              cl,
              cr,
            ));
            const dy = (this.destY = clamp(
              round(snap(by, this.snapY), 5),
              ct,
              cb,
            ));
            const ob = this.isOutOfBounds(this.containerBounds, nx, ny);

            let durationX = 0;
            let durationY = 0;
            let easeX = releaseEase;
            let easeY = releaseEase;
            let longestReleaseDuration = 0;

            overshootCoords.x = cx;
            overshootCoords.y = cy;

            if (!disabledX) {
              const directionX =
                dx === cr ? (cx > cr ? -1 : 1) : cx < cl ? -1 : 1;
              const distanceX = round(cx - dx, 0);
              springX.velocity =
                disabledY && hasReleaseSpring
                  ? distanceX
                    ? (ds * directionX) / abs(distanceX)
                    : 0
                  : pv;
              const { ease, duration, restDuration } = springX;
              durationX =
                cx === dx
                  ? 0
                  : hasReleaseSpring
                    ? duration
                    : duration - restDuration * globals.timeScale;
              if (hasReleaseSpring) easeX = ease;
              if (durationX > longestReleaseDuration)
                longestReleaseDuration = durationX;
            }

            if (!disabledY) {
              const directionY =
                dy === cb ? (cy > cb ? -1 : 1) : cy < ct ? -1 : 1;
              const distanceY = round(cy - dy, 0);
              springY.velocity =
                disabledX && hasReleaseSpring
                  ? distanceY
                    ? (ds * directionY) / abs(distanceY)
                    : 0
                  : pv;
              const { ease, duration, restDuration } = springY;
              durationY =
                cy === dy
                  ? 0
                  : hasReleaseSpring
                    ? duration
                    : duration - restDuration * globals.timeScale;
              if (hasReleaseSpring) easeY = ease;
              if (durationY > longestReleaseDuration)
                longestReleaseDuration = durationY;
            }

            if (!hasReleaseSpring && ob && cf && (durationX || durationY)) {
              const composition = compositionTypes.blend;

              new JSAnimation(overshootCoords, {
                x: { to: bx, duration: durationX * 0.65 },
                y: { to: by, duration: durationY * 0.65 },
                ease: releaseEase,
                composition,
              }).init();

              new JSAnimation(overshootCoords, {
                x: { to: dx, duration: durationX },
                y: { to: dy, duration: durationY },
                ease: releaseEase,
                composition,
              }).init();

              this.overshootXTicker.stretch(durationX).restart();
              this.overshootYTicker.stretch(durationY).restart();
            } else {
              if (!disabledX) this.animate[this.xProp](dx, durationX, easeX);
              if (!disabledY) this.animate[this.yProp](dy, durationY, easeY);
            }

            this.scrollInView(
              longestReleaseDuration,
              this.scrollThreshold,
              releaseEase,
            );

            let hasSnapped = false;

            if (dx !== sx) {
              this.snapped[0] = dx;
              if (this.snapX) hasSnapped = true;
            }

            if (dy !== sy && this.snapY) {
              this.snapped[1] = dy;
              if (this.snapY) hasSnapped = true;
            }

            if (hasSnapped) this.onSnap(this);

            this.grabbed = false;
            this.dragged = false;
            this.updated = true;
            this.released = true;

            // It's important to trigger the callback after the release animations to be able to cancel them
            this.onRelease(this);

            this.$trigger.removeEventListener('touchstart', preventDefault);
            this.$trigger.removeEventListener('touchmove', preventDefault);
            this.$trigger.removeEventListener('touchend', preventDefault);

            doc.removeEventListener('touchmove', this);
            doc.removeEventListener('touchend', this);
            doc.removeEventListener('touchcancel', this);
            doc.removeEventListener('mousemove', this);
            doc.removeEventListener('mouseup', this);
            doc.removeEventListener('selectstart', this);
          }

          reset() {
            this.stop();
            this.resizeTicker.pause();
            this.grabbed = false;
            this.dragged = false;
            this.updated = false;
            this.released = false;
            this.canScroll = false;
            this.setX(0, true);
            this.setY(0, true);
            this.coords[0] = 0;
            this.coords[1] = 0;
            this.pointer[0] = 0;
            this.pointer[1] = 0;
            this.pointer[2] = 0;
            this.pointer[3] = 0;
            this.pointer[4] = 0;
            this.pointer[5] = 0;
            this.pointer[6] = 0;
            this.pointer[7] = 0;
            this.velocity = 0;
            this.velocityStack[0] = 0;
            this.velocityStack[1] = 0;
            this.velocityStack[2] = 0;
            this.velocityStackIndex = 0;
            this.angle = 0;
            return this;
          }

          enable() {
            if (!this.enabled) {
              this.enabled = true;
              this.$target.classList.remove('is-disabled');
              this.touchActionStyles = setTargetValues(this.$trigger, {
                touchAction: this.disabled[0]
                  ? 'pan-x'
                  : this.disabled[1]
                    ? 'pan-y'
                    : 'none',
              });
              this.$trigger.addEventListener('touchstart', this, {
                passive: true,
              });
              this.$trigger.addEventListener('mousedown', this, {
                passive: true,
              });
              this.$trigger.addEventListener('mouseenter', this);
            }
            return this;
          }

          disable() {
            this.enabled = false;
            this.grabbed = false;
            this.dragged = false;
            this.updated = false;
            this.released = false;
            this.canScroll = false;
            this.touchActionStyles.revert();
            if (this.cursorStyles) {
              this.cursorStyles.revert();
              this.cursorStyles = null;
            }
            if (this.triggerStyles) {
              this.triggerStyles.revert();
              this.triggerStyles = null;
            }
            if (this.bodyStyles) {
              this.bodyStyles.revert();
              this.bodyStyles = null;
            }
            if (this.targetStyles) {
              this.targetStyles.revert();
              this.targetStyles = null;
            }
            this.stop();
            this.$target.classList.add('is-disabled');
            this.$trigger.removeEventListener('touchstart', this);
            this.$trigger.removeEventListener('mousedown', this);
            this.$trigger.removeEventListener('mouseenter', this);
            doc.removeEventListener('touchmove', this);
            doc.removeEventListener('touchend', this);
            doc.removeEventListener('touchcancel', this);
            doc.removeEventListener('mousemove', this);
            doc.removeEventListener('mouseup', this);
            doc.removeEventListener('selectstart', this);
            return this;
          }

          revert() {
            this.reset();
            this.disable();
            this.$target.classList.remove('is-disabled');
            this.updateTicker.revert();
            this.overshootXTicker.revert();
            this.overshootYTicker.revert();
            this.resizeTicker.revert();
            this.animate.revert();
            return this;
          }

          /**
           * @param {Event} e
           */
          handleEvent(e) {
            switch (e.type) {
              case 'mousedown':
                this.handleDown(/** @type {MouseEvent} */ (e));
                break;
              case 'touchstart':
                this.handleDown(/** @type {TouchEvent} */ (e));
                break;
              case 'mousemove':
                this.handleMove(/** @type {MouseEvent} */ (e));
                break;
              case 'touchmove':
                this.handleMove(/** @type {TouchEvent} */ (e));
                break;
              case 'mouseup':
                this.handleUp();
                break;
              case 'touchend':
                this.handleUp();
                break;
              case 'touchcancel':
                this.handleUp();
                break;
              case 'mouseenter':
                this.handleHover();
                break;
              case 'selectstart':
                preventDefault(e);
                break;
            }
          }
        }

        /**
         * @param {TargetsParam} target
         * @param {DraggableParams} [parameters]
         * @return {Draggable}
         */
        const createDraggable = (target, parameters) =>
          new Draggable(target, parameters);

        /**
         * @typedef {Object} ReactRef
         * @property {HTMLElement|SVGElement|null} [current]
         */

        /**
         * @typedef {Object} AngularRef
         * @property {HTMLElement|SVGElement} [nativeElement]
         */

        /**
         * @typedef {Object} ScopeParams
         * @property {DOMTargetSelector|ReactRef|AngularRef} [root]
         * @property {DefaultsParams} [defaults]
         * @property {Record<String, String>} [mediaQueries]
         */

        /**
         * @callback ScopeCleanup
         * @param {Scope} [scope]
         */

        /**
         * @callback ScopeConstructor
         * @param {Scope} [scope]
         * @return {ScopeCleanup|void}
         */

        /**
         * @callback ScopeMethod
         * @param {...*} args
         * @return {ScopeCleanup|void}
         */

        class Scope {
          /** @param {ScopeParams} [parameters] */
          constructor(parameters = {}) {
            if (globals.scope) globals.scope.revertibles.push(this);
            const rootParam = parameters.root;
            /** @type {Document|DOMTarget} */
            let root = doc;
            if (rootParam) {
              root =
                /** @type {ReactRef} */ (rootParam).current ||
                /** @type {AngularRef} */ (rootParam).nativeElement ||
                parseTargets(/** @type {DOMTargetSelector} */ (rootParam))[0] ||
                doc;
            }
            const scopeDefaults = parameters.defaults;
            const globalDefault = globals.defaults;
            const mediaQueries = parameters.mediaQueries;
            /** @type {DefaultsParams} */
            this.defaults = scopeDefaults
              ? mergeObjects(scopeDefaults, globalDefault)
              : globalDefault;
            /** @type {Document|DOMTarget} */
            this.root = root;
            /** @type {Array<ScopeConstructor>} */
            this.constructors = [];
            /** @type {Array<Function>} */
            this.revertConstructors = [];
            /** @type {Array<Revertible>} */
            this.revertibles = [];
            /** @type {Record<String, Function>} */
            this.methods = {};
            /** @type {Record<String, Boolean>} */
            this.matches = {};
            /** @type {Record<String, MediaQueryList>} */
            this.mediaQueryLists = {};
            /** @type {Record<String, any>} */
            this.data = {};
            if (mediaQueries) {
              for (let mq in mediaQueries) {
                const _mq = win.matchMedia(mediaQueries[mq]);
                this.mediaQueryLists[mq] = _mq;
                _mq.addEventListener('change', this);
              }
            }
          }

          /**
           * @callback ScoppedCallback
           * @param {this} scope
           * @return {any}
           *
           * @param {ScoppedCallback} cb
           * @return {this}
           */
          execute(cb) {
            let activeScope = globals.scope;
            let activeRoot = globals.root;
            let activeDefaults = globals.defaults;
            globals.scope = this;
            globals.root = this.root;
            globals.defaults = this.defaults;
            const mqs = this.mediaQueryLists;
            for (let mq in mqs) this.matches[mq] = mqs[mq].matches;
            const returned = cb(this);
            globals.scope = activeScope;
            globals.root = activeRoot;
            globals.defaults = activeDefaults;
            return returned;
          }

          /**
           * @return {this}
           */
          refresh() {
            this.execute(() => {
              let i = this.revertibles.length;
              let y = this.revertConstructors.length;
              while (i--) this.revertibles[i].revert();
              while (y--) this.revertConstructors[y](this);
              this.revertibles.length = 0;
              this.revertConstructors.length = 0;
              this.constructors.forEach((constructor) => {
                const revertConstructor = constructor(this);
                if (revertConstructor) {
                  this.revertConstructors.push(revertConstructor);
                }
              });
            });
            return this;
          }

          /**
           * @callback contructorCallback
           * @param {this} self
           *
           * @overload
           * @param {String} a1
           * @param {ScopeMethod} a2
           * @return {this}
           *
           * @overload
           * @param {contructorCallback} a1
           * @return {this}
           *
           * @param {String|contructorCallback} a1
           * @param {ScopeMethod} [a2]
           */
          add(a1, a2) {
            if (isFnc(a1)) {
              const constructor = /** @type {contructorCallback} */ (a1);
              this.constructors.push(constructor);
              this.execute(() => {
                const revertConstructor = constructor(this);
                if (revertConstructor) {
                  this.revertConstructors.push(revertConstructor);
                }
              });
            } else {
              this.methods[/** @type {String} */ (a1)] = (
                /** @type {any} */ ...args
              ) => this.execute(() => a2(...args));
            }
            return this;
          }

          /**
           * @param {Event} e
           */
          handleEvent(e) {
            switch (e.type) {
              case 'change':
                this.refresh();
                break;
            }
          }

          revert() {
            const revertibles = this.revertibles;
            const revertConstructors = this.revertConstructors;
            const mqs = this.mediaQueryLists;
            let i = revertibles.length;
            let y = revertConstructors.length;
            while (i--) revertibles[i].revert();
            while (y--) revertConstructors[y](this);
            for (let mq in mqs) mqs[mq].removeEventListener('change', this);
            revertibles.length = 0;
            revertConstructors.length = 0;
            this.constructors.length = 0;
            this.matches = {};
            this.methods = {};
            this.mediaQueryLists = {};
            this.data = {};
          }
        }

        /**
         * @param {ScopeParams} [params]
         * @return {Scope}
         */
        const createScope = (params) => new Scope(params);

        /**
         * @typedef {String|Number} ScrollThresholdValue
         */

        /**
         * @return {Number}
         */
        const getMaxViewHeight = () => {
          const $el = document.createElement('div');
          doc.body.appendChild($el);
          $el.style.height = '100lvh';
          const height = $el.offsetHeight;
          doc.body.removeChild($el);
          return height;
        };

        /**
         * @template {ScrollThresholdValue|String|Number|Boolean|Function|Object} T
         * @param {T | ((observer: ScrollObserver) => T)} value
         * @param {ScrollObserver} scroller
         * @return {T}
         */
        const parseScrollObserverFunctionParameter = (value, scroller) =>
          value && isFnc(value)
            ? /** @type {Function} */ (value)(scroller)
            : value;

        const scrollContainers = new Map();

        class ScrollContainer {
          /**
           * @param {HTMLElement} $el
           */
          constructor($el) {
            /** @type {HTMLElement} */
            this.element = $el;
            /** @type {Boolean} */
            this.useWin = this.element === doc.body;
            /** @type {Number} */
            this.winWidth = 0;
            /** @type {Number} */
            this.winHeight = 0;
            /** @type {Number} */
            this.width = 0;
            /** @type {Number} */
            this.height = 0;
            /** @type {Number} */
            this.left = 0;
            /** @type {Number} */
            this.top = 0;
            /** @type {Number} */
            this.zIndex = 0;
            /** @type {Number} */
            this.scrollX = 0;
            /** @type {Number} */
            this.scrollY = 0;
            /** @type {Number} */
            this.prevScrollX = 0;
            /** @type {Number} */
            this.prevScrollY = 0;
            /** @type {Number} */
            this.scrollWidth = 0;
            /** @type {Number} */
            this.scrollHeight = 0;
            /** @type {Number} */
            this.velocity = 0;
            /** @type {Boolean} */
            this.backwardX = false;
            /** @type {Boolean} */
            this.backwardY = false;
            /** @type {Timer} */
            this.scrollTicker = new Timer({
              autoplay: false,
              onBegin: () => this.dataTimer.resume(),
              onUpdate: () => {
                const backwards = this.backwardX || this.backwardY;
                forEachChildren(
                  this,
                  (/** @type {ScrollObserver} */ child) => child.handleScroll(),
                  backwards,
                );
              },
              onComplete: () => this.dataTimer.pause(),
            }).init();
            /** @type {Timer} */
            this.dataTimer = new Timer({
              autoplay: false,
              frameRate: 30,
              onUpdate: (self) => {
                const dt = self.deltaTime;
                const px = this.prevScrollX;
                const py = this.prevScrollY;
                const nx = this.scrollX;
                const ny = this.scrollY;
                const dx = px - nx;
                const dy = py - ny;
                this.prevScrollX = nx;
                this.prevScrollY = ny;
                if (dx) this.backwardX = px > nx;
                if (dy) this.backwardY = py > ny;
                this.velocity = round(
                  dt > 0 ? Math.sqrt(dx * dx + dy * dy) / dt : 0,
                  5,
                );
              },
            }).init();
            /** @type {Timer} */
            this.resizeTicker = new Timer({
              autoplay: false,
              duration: 250 * globals.timeScale,
              onComplete: () => {
                this.updateWindowBounds();
                this.refreshScrollObservers();
                this.handleScroll();
              },
            }).init();
            /** @type {Timer} */
            this.wakeTicker = new Timer({
              autoplay: false,
              duration: 500 * globals.timeScale,
              onBegin: () => {
                this.scrollTicker.resume();
              },
              onComplete: () => {
                this.scrollTicker.pause();
              },
            }).init();
            /** @type {ScrollObserver} */
            this._head = null;
            /** @type {ScrollObserver} */
            this._tail = null;
            this.updateScrollCoords();
            this.updateWindowBounds();
            this.updateBounds();
            this.refreshScrollObservers();
            this.handleScroll();
            this.resizeObserver = new ResizeObserver(() =>
              this.resizeTicker.restart(),
            );
            this.resizeObserver.observe(this.element);
            (this.useWin ? win : this.element).addEventListener(
              'scroll',
              this,
              false,
            );
          }

          updateScrollCoords() {
            const useWin = this.useWin;
            const $el = this.element;
            this.scrollX = round(useWin ? win.scrollX : $el.scrollLeft, 0);
            this.scrollY = round(useWin ? win.scrollY : $el.scrollTop, 0);
          }

          updateWindowBounds() {
            this.winWidth = win.innerWidth;
            this.winHeight = getMaxViewHeight();
          }

          updateBounds() {
            const style = getComputedStyle(this.element);
            const $el = this.element;
            this.scrollWidth =
              $el.scrollWidth +
              parseFloat(style.marginLeft) +
              parseFloat(style.marginRight);
            this.scrollHeight =
              $el.scrollHeight +
              parseFloat(style.marginTop) +
              parseFloat(style.marginBottom);
            this.updateWindowBounds();
            let width, height;
            if (this.useWin) {
              width = this.winWidth;
              height = this.winHeight;
            } else {
              const elRect = $el.getBoundingClientRect();
              width = elRect.width;
              height = elRect.height;
              this.top = elRect.top;
              this.left = elRect.left;
            }
            this.width = width;
            this.height = height;
          }

          refreshScrollObservers() {
            forEachChildren(this, (/** @type {ScrollObserver} */ child) => {
              if (child._debug) {
                child.removeDebug();
              }
            });
            this.updateBounds();
            forEachChildren(this, (/** @type {ScrollObserver} */ child) => {
              child.refresh();
              if (child._debug) {
                child.debug();
              }
            });
          }

          refresh() {
            this.updateWindowBounds();
            this.updateBounds();
            this.refreshScrollObservers();
            this.handleScroll();
          }

          handleScroll() {
            this.updateScrollCoords();
            this.wakeTicker.restart();
          }

          /**
           * @param {Event} e
           */
          handleEvent(e) {
            switch (e.type) {
              case 'scroll':
                this.handleScroll();
                break;
            }
          }

          revert() {
            this.scrollTicker.cancel();
            this.dataTimer.cancel();
            this.resizeTicker.cancel();
            this.wakeTicker.cancel();
            this.resizeObserver.unobserve(this.element);
            (this.useWin ? win : this.element).removeEventListener(
              'scroll',
              this,
            );
            scrollContainers.delete(this.element);
          }
        }

        /**
         * @param {TargetsParam} target
         * @return {ScrollContainer}
         */
        const registerAndGetScrollContainer = (target) => {
          const $el = /** @type {HTMLElement} */ (
            target ? parseTargets(target)[0] || doc.body : doc.body
          );
          let scrollContainer = scrollContainers.get($el);
          if (!scrollContainer) {
            scrollContainer = new ScrollContainer($el);
            scrollContainers.set($el, scrollContainer);
          }
          return scrollContainer;
        };

        /**
         * @param {HTMLElement} $el
         * @param {Number|string} v
         * @param {Number} size
         * @param {Number} [under]
         * @param {Number} [over]
         * @return {Number}
         */
        const convertValueToPx = ($el, v, size, under, over) => {
          const clampMin = v === 'min';
          const clampMax = v === 'max';
          const value =
            v === 'top' || v === 'left' || v === 'start' || clampMin
              ? 0
              : v === 'bottom' || v === 'right' || v === 'end' || clampMax
                ? '100%'
                : v === 'center'
                  ? '50%'
                  : v;
          const { n, u } = decomposeRawValue(value, decomposedOriginalValue);
          let px = n;
          if (u === '%') {
            px = (n / 100) * size;
          } else if (u) {
            px = convertValueUnit($el, decomposedOriginalValue, 'px', true).n;
          }
          if (clampMax && under < 0) px += under;
          if (clampMin && over > 0) px += over;
          return px;
        };

        /**
         * @param {HTMLElement} $el
         * @param {ScrollThresholdValue} v
         * @param {Number} size
         * @param {Number} [under]
         * @param {Number} [over]
         * @return {Number}
         */
        const parseBoundValue = ($el, v, size, under, over) => {
          /** @type {Number} */
          let value;
          if (isStr(v)) {
            const matchedOperator = relativeValuesExecRgx.exec(
              /** @type {String} */ (v),
            );
            if (matchedOperator) {
              const splitter = matchedOperator[0];
              const operator = splitter[0];
              const splitted = /** @type {String} */ (v).split(splitter);
              const clampMin = splitted[0] === 'min';
              const clampMax = splitted[0] === 'max';
              const valueAPx = convertValueToPx(
                $el,
                splitted[0],
                size,
                under,
                over,
              );
              const valueBPx = convertValueToPx(
                $el,
                splitted[1],
                size,
                under,
                over,
              );
              if (clampMin) {
                const min = getRelativeValue(
                  convertValueToPx($el, 'min', size),
                  valueBPx,
                  operator,
                );
                value = min < valueAPx ? valueAPx : min;
              } else if (clampMax) {
                const max = getRelativeValue(
                  convertValueToPx($el, 'max', size),
                  valueBPx,
                  operator,
                );
                value = max > valueAPx ? valueAPx : max;
              } else {
                value = getRelativeValue(valueAPx, valueBPx, operator);
              }
            } else {
              value = convertValueToPx($el, v, size, under, over);
            }
          } else {
            value = /** @type {Number} */ (v);
          }
          return round(value, 0);
        };

        /**
         * @param {JSAnimation} linked
         * @return {HTMLElement}
         */
        const getAnimationDomTarget = (linked) => {
          let $linkedTarget;
          const linkedTargets = linked.targets;
          for (let i = 0, l = linkedTargets.length; i < l; i++) {
            const target = linkedTargets[i];
            if (target[isDomSymbol]) {
              $linkedTarget = /** @type {HTMLElement} */ (target);
              break;
            }
          }
          return $linkedTarget;
        };

        let scrollerIndex = 0;

        const debugColors = [
          '#FF4B4B',
          '#FF971B',
          '#FFC730',
          '#F9F640',
          '#7AFF5A',
          '#18FF74',
          '#17E09B',
          '#3CFFEC',
          '#05DBE9',
          '#33B3F1',
          '#638CF9',
          '#C563FE',
          '#FF4FCF',
          '#F93F8A',
        ];

        /**
         * @typedef {Object} ScrollThresholdParam
         * @property {ScrollThresholdValue} [target]
         * @property {ScrollThresholdValue} [container]
         */

        /**
         * @callback ScrollObserverAxisCallback
         * @param {ScrollObserver} self
         * @return {'x'|'y'}
         */

        /**
         * @callback ScrollThresholdCallback
         * @param {ScrollObserver} self
         * @return {ScrollThresholdValue|ScrollThresholdParam}
         */

        /**
         * @typedef {Object} ScrollObserverParams
         * @property {Number|String} [id]
         * @property {Boolean|Number|String|EasingParam} [sync]
         * @property {TargetsParam} [container]
         * @property {TargetsParam} [target]
         * @property {'x'|'y'|ScrollObserverAxisCallback|((observer: ScrollObserver) => 'x'|'y'|ScrollObserverAxisCallback)} [axis]
         * @property {ScrollThresholdValue|ScrollThresholdParam|ScrollThresholdCallback|((observer: ScrollObserver) => ScrollThresholdValue|ScrollThresholdParam|ScrollThresholdCallback)} [enter]
         * @property {ScrollThresholdValue|ScrollThresholdParam|ScrollThresholdCallback|((observer: ScrollObserver) => ScrollThresholdValue|ScrollThresholdParam|ScrollThresholdCallback)} [leave]
         * @property {Boolean|((observer: ScrollObserver) => Boolean)} [repeat]
         * @property {Boolean} [debug]
         * @property {Callback<ScrollObserver>} [onEnter]
         * @property {Callback<ScrollObserver>} [onLeave]
         * @property {Callback<ScrollObserver>} [onEnterForward]
         * @property {Callback<ScrollObserver>} [onLeaveForward]
         * @property {Callback<ScrollObserver>} [onEnterBackward]
         * @property {Callback<ScrollObserver>} [onLeaveBackward]
         * @property {Callback<ScrollObserver>} [onUpdate]
         * @property {Callback<ScrollObserver>} [onSyncComplete]
         */

        class ScrollObserver {
          /**
           * @param {ScrollObserverParams} parameters
           */
          constructor(parameters = {}) {
            if (globals.scope) globals.scope.revertibles.push(this);
            const syncMode = setValue(parameters.sync, 'play pause');
            const ease = syncMode
              ? parseEasings(/** @type {EasingParam} */ (syncMode))
              : null;
            const isLinear =
              syncMode && (syncMode === 'linear' || syncMode === none);
            const isEase = syncMode && !(ease === none && !isLinear);
            const isSmooth =
              syncMode && (isNum(syncMode) || syncMode === true || isLinear);
            const isMethods =
              syncMode && isStr(syncMode) && !isEase && !isSmooth;
            const syncMethods = isMethods
              ? /** @type {String} */ (syncMode)
                  .split(' ')
                  .map((/** @type {String} */ m) => () => {
                    const linked = this.linked;
                    return linked && linked[m] ? linked[m]() : null;
                  })
              : null;
            const biDirSync = isMethods && syncMethods.length > 2;
            /** @type {Number} */
            this.index = scrollerIndex++;
            /** @type {String|Number} */
            this.id = !isUnd(parameters.id) ? parameters.id : this.index;
            /** @type {ScrollContainer} */
            this.container = registerAndGetScrollContainer(
              parameters.container,
            );
            /** @type {HTMLElement} */
            this.target = null;
            /** @type {Tickable|WAAPIAnimation} */
            this.linked = null;
            /** @type {Boolean} */
            this.repeat = null;
            /** @type {Boolean} */
            this.horizontal = null;
            /** @type {ScrollThresholdParam|ScrollThresholdValue|ScrollThresholdCallback} */
            this.enter = null;
            /** @type {ScrollThresholdParam|ScrollThresholdValue|ScrollThresholdCallback} */
            this.leave = null;
            /** @type {Boolean} */
            this.sync = isEase || isSmooth || !!syncMethods;
            /** @type {EasingFunction} */
            this.syncEase = isEase ? ease : null;
            /** @type {Number} */
            this.syncSmooth = isSmooth
              ? syncMode === true || isLinear
                ? 1
                : /** @type {Number} */ (syncMode)
              : null;
            /** @type {Callback<ScrollObserver>} */
            this.onSyncEnter =
              syncMethods && !biDirSync && syncMethods[0]
                ? syncMethods[0]
                : noop;
            /** @type {Callback<ScrollObserver>} */
            this.onSyncLeave =
              syncMethods && !biDirSync && syncMethods[1]
                ? syncMethods[1]
                : noop;
            /** @type {Callback<ScrollObserver>} */
            this.onSyncEnterForward =
              syncMethods && biDirSync && syncMethods[0]
                ? syncMethods[0]
                : noop;
            /** @type {Callback<ScrollObserver>} */
            this.onSyncLeaveForward =
              syncMethods && biDirSync && syncMethods[1]
                ? syncMethods[1]
                : noop;
            /** @type {Callback<ScrollObserver>} */
            this.onSyncEnterBackward =
              syncMethods && biDirSync && syncMethods[2]
                ? syncMethods[2]
                : noop;
            /** @type {Callback<ScrollObserver>} */
            this.onSyncLeaveBackward =
              syncMethods && biDirSync && syncMethods[3]
                ? syncMethods[3]
                : noop;
            /** @type {Callback<ScrollObserver>} */
            this.onEnter = parameters.onEnter || noop;
            /** @type {Callback<ScrollObserver>} */
            this.onLeave = parameters.onLeave || noop;
            /** @type {Callback<ScrollObserver>} */
            this.onEnterForward = parameters.onEnterForward || noop;
            /** @type {Callback<ScrollObserver>} */
            this.onLeaveForward = parameters.onLeaveForward || noop;
            /** @type {Callback<ScrollObserver>} */
            this.onEnterBackward = parameters.onEnterBackward || noop;
            /** @type {Callback<ScrollObserver>} */
            this.onLeaveBackward = parameters.onLeaveBackward || noop;
            /** @type {Callback<ScrollObserver>} */
            this.onUpdate = parameters.onUpdate || noop;
            /** @type {Callback<ScrollObserver>} */
            this.onSyncComplete = parameters.onSyncComplete || noop;
            /** @type {Boolean} */
            this.reverted = false;
            /** @type {Boolean} */
            this.completed = false;
            /** @type {Boolean} */
            this.began = false;
            /** @type {Boolean} */
            this.isInView = false;
            /** @type {Boolean} */
            this.forceEnter = false;
            /** @type {Boolean} */
            this.hasEntered = false;
            /** @type {Array.<Number>} */
            this.offsets = [];
            /** @type {Number} */
            this.offset = 0;
            /** @type {Number} */
            this.offsetStart = 0;
            /** @type {Number} */
            this.offsetEnd = 0;
            /** @type {Number} */
            this.distance = 0;
            /** @type {Number} */
            this.prevProgress = 0;
            /** @type {Array} */
            this.thresholds = ['start', 'end', 'end', 'start'];
            /** @type {[Number, Number, Number, Number]} */
            this.coords = [0, 0, 0, 0];
            /** @type {JSAnimation} */
            this.debugStyles = null;
            /** @type {HTMLElement} */
            this.$debug = null;
            /** @type {ScrollObserverParams} */
            this._params = parameters;
            /** @type {Boolean} */
            this._debug = setValue(parameters.debug, false);
            /** @type {ScrollObserver} */
            this._next = null;
            /** @type {ScrollObserver} */
            this._prev = null;
            addChild(this.container, this);
            // Wait for the next frame to add to the container in order to handle calls to link()
            sync(() => {
              if (this.reverted) return;
              if (!this.target) {
                const target = /** @type {HTMLElement} */ (
                  parseTargets(parameters.target)[0]
                );
                this.target = target || doc.body;
                this.refresh();
              }
              if (this._debug) this.debug();
            });
          }

          /**
           * @param {Tickable|WAAPIAnimation} linked
           */
          link(linked) {
            if (linked) {
              // Make sure to pause the linked object in case it's added later
              linked.pause();
              this.linked = linked;
              // Try to use a target of the linked object if no target parameters specified
              if (!this._params.target) {
                /** @type {HTMLElement} */
                let $linkedTarget;
                if (!isUnd(/** @type {JSAnimation} */ (linked).targets)) {
                  $linkedTarget = getAnimationDomTarget(
                    /** @type {JSAnimation} */ (linked),
                  );
                } else {
                  forEachChildren(
                    /** @type {Timeline} */ (linked),
                    (/** @type {JSAnimation} */ child) => {
                      if (child.targets && !$linkedTarget) {
                        $linkedTarget = getAnimationDomTarget(
                          /** @type {JSAnimation} */ (child),
                        );
                      }
                    },
                  );
                }
                // Fallback to body if no target found
                this.target = $linkedTarget || doc.body;
                this.refresh();
              }
            }
            return this;
          }

          get velocity() {
            return this.container.velocity;
          }

          get backward() {
            return this.horizontal
              ? this.container.backwardX
              : this.container.backwardY;
          }

          get scroll() {
            return this.horizontal
              ? this.container.scrollX
              : this.container.scrollY;
          }

          get progress() {
            const p = (this.scroll - this.offsetStart) / this.distance;
            return p === Infinity || isNaN(p) ? 0 : round(clamp(p, 0, 1), 6);
          }

          refresh() {
            this.reverted = false;
            const params = this._params;
            this.repeat = setValue(
              parseScrollObserverFunctionParameter(params.repeat, this),
              true,
            );
            this.horizontal =
              setValue(
                parseScrollObserverFunctionParameter(params.axis, this),
                'y',
              ) === 'x';
            this.enter = setValue(
              parseScrollObserverFunctionParameter(params.enter, this),
              'end start',
            );
            this.leave = setValue(
              parseScrollObserverFunctionParameter(params.leave, this),
              'start end',
            );
            this.updateBounds();
            this.handleScroll();
            return this;
          }

          removeDebug() {
            if (this.$debug) {
              this.$debug.parentNode.removeChild(this.$debug);
              this.$debug = null;
            }
            if (this.debugStyles) {
              this.debugStyles.revert();
              this.$debug = null;
            }
            return this;
          }

          debug() {
            this.removeDebug();
            const container = this.container;
            const isHori = this.horizontal;
            const $existingDebug = container.element.querySelector(
              ':scope > .animejs-onscroll-debug',
            );
            const $debug = doc.createElement('div');
            const $thresholds = doc.createElement('div');
            const $triggers = doc.createElement('div');
            const color = debugColors[this.index % debugColors.length];
            const useWin = container.useWin;
            const containerWidth = useWin
              ? container.winWidth
              : container.width;
            const containerHeight = useWin
              ? container.winHeight
              : container.height;
            const scrollWidth = container.scrollWidth;
            const scrollHeight = container.scrollHeight;
            const size = this.container.width > 360 ? 320 : 260;
            const offLeft = isHori ? 0 : 10;
            const offTop = isHori ? 10 : 0;
            const half = isHori ? 24 : size / 2;
            const labelHeight = isHori ? half : 15;
            const labelWidth = isHori ? 60 : half;
            const labelSize = isHori ? labelWidth : labelHeight;
            const repeat = isHori ? 'repeat-x' : 'repeat-y';
            /**
             * @param {Number} v
             * @return {String}
             */
            const gradientOffset = (v) =>
              isHori ? '0px ' + v + 'px' : v + 'px' + ' 2px';
            /**
             * @param {String} c
             * @return {String}
             */
            const lineCSS = (c) =>
              `linear-gradient(${isHori ? 90 : 0}deg, ${c} 2px, transparent 1px)`;
            /**
             * @param {String} p
             * @param {Number} l
             * @param {Number} t
             * @param {Number} w
             * @param {Number} h
             * @return {String}
             */
            const baseCSS = (p, l, t, w, h) =>
              `position:${p};left:${l}px;top:${t}px;width:${w}px;height:${h}px;`;
            $debug.style.cssText = `${baseCSS('absolute', offLeft, offTop, isHori ? scrollWidth : size, isHori ? size : scrollHeight)}
      pointer-events: none;
      z-index: ${this.container.zIndex++};
      display: flex;
      flex-direction: ${isHori ? 'column' : 'row'};
      filter: drop-shadow(0px 1px 0px rgba(0,0,0,.75));
    `;
            $thresholds.style.cssText = `${baseCSS('sticky', 0, 0, isHori ? containerWidth : half, isHori ? half : containerHeight)}`;
            if (!$existingDebug) {
              $thresholds.style.cssText += `background:
        ${lineCSS('#FFFF')}${gradientOffset(half - 10)} / ${isHori ? '100px 100px' : '100px 100px'} ${repeat},
        ${lineCSS('#FFF8')}${gradientOffset(half - 10)} / ${isHori ? '10px 10px' : '10px 10px'} ${repeat};
      `;
            }
            $triggers.style.cssText = `${baseCSS('relative', 0, 0, isHori ? scrollWidth : half, isHori ? half : scrollHeight)}`;
            if (!$existingDebug) {
              $triggers.style.cssText += `background:
        ${lineCSS('#FFFF')}${gradientOffset(0)} / ${isHori ? '100px 10px' : '10px 100px'} ${repeat},
        ${lineCSS('#FFF8')}${gradientOffset(0)} / ${isHori ? '10px 0px' : '0px 10px'} ${repeat};
      `;
            }
            const labels = [' enter: ', ' leave: '];
            this.coords.forEach((v, i) => {
              const isView = i > 1;
              const value = (isView ? 0 : this.offset) + v;
              const isTail = i % 2;
              const isFirst = value < labelSize;
              const isOver =
                value >
                (isView
                  ? isHori
                    ? containerWidth
                    : containerHeight
                  : isHori
                    ? scrollWidth
                    : scrollHeight) -
                  labelSize;
              const isFlip =
                (isView ? isTail && !isFirst : !isTail && !isFirst) || isOver;
              const $label = doc.createElement('div');
              const $text = doc.createElement('div');
              const dirProp = isHori
                ? isFlip
                  ? 'right'
                  : 'left'
                : isFlip
                  ? 'bottom'
                  : 'top';
              const flipOffset = isFlip
                ? (isHori ? labelWidth : labelHeight) +
                  (!isView ? (isHori ? -1 : -2) : isHori ? -1 : isOver ? 0 : -2)
                : !isView
                  ? isHori
                    ? 1
                    : 0
                  : isHori
                    ? 1
                    : 0;
              // $text.innerHTML = `${!isView ? '' : labels[isTail] + ' '}${this.id}: ${this.thresholds[i]} ${isView ? '' : labels[isTail]}`;
              $text.innerHTML = `${this.id}${labels[isTail]}${this.thresholds[i]}`;
              $label.style.cssText = `${baseCSS('absolute', 0, 0, labelWidth, labelHeight)}
        display: flex;
        flex-direction: ${isHori ? 'column' : 'row'};
        justify-content: flex-${isView ? 'start' : 'end'};
        align-items: flex-${isFlip ? 'end' : 'start'};
        border-${dirProp}: 2px ${isTail ? 'solid' : 'solid'} ${color};
      `;
              $text.style.cssText = `
        overflow: hidden;
        max-width: ${size / 2 - 10}px;
        height: ${labelHeight};
        margin-${isHori ? (isFlip ? 'right' : 'left') : isFlip ? 'bottom' : 'top'}: -2px;
        padding: 1px;
        font-family: ui-monospace, monospace;
        font-size: 10px;
        letter-spacing: -.025em;
        line-height: 9px;
        font-weight: 600;
        text-align: ${(isHori && isFlip) || (!isHori && !isView) ? 'right' : 'left'};
        white-space: pre;
        text-overflow: ellipsis;
        color: ${isTail ? color : 'rgba(0,0,0,.75)'};
        background-color: ${isTail ? 'rgba(0,0,0,.65)' : color};
        border: 2px solid ${isTail ? color : 'transparent'};
        border-${isHori ? (isFlip ? 'top-left' : 'top-right') : isFlip ? 'top-left' : 'bottom-left'}-radius: 5px;
        border-${isHori ? (isFlip ? 'bottom-left' : 'bottom-right') : isFlip ? 'top-right' : 'bottom-right'}-radius: 5px;
      `;
              $label.appendChild($text);
              let position = value - flipOffset + (isHori ? 1 : 0);
              $label.style[isHori ? 'left' : 'top'] = `${position}px`;
              // $label.style[isHori ? 'left' : 'top'] = value - flipOffset + (!isFlip && isFirst && !isView ? 1 : isFlip ? 0 : -2) + 'px';
              (isView ? $thresholds : $triggers).appendChild($label);
            });

            $debug.appendChild($thresholds);
            $debug.appendChild($triggers);
            container.element.appendChild($debug);

            if (!$existingDebug) $debug.classList.add('animejs-onscroll-debug');
            this.$debug = $debug;
            const containerPosition = getTargetValue(
              container.element,
              'position',
            );
            if (containerPosition === 'static') {
              this.debugStyles = setTargetValues(container.element, {
                position: 'relative ',
              });
            }
          }

          updateBounds() {
            if (this._debug) {
              this.removeDebug();
            }
            let stickys;
            const $target = this.target;
            const container = this.container;
            const isHori = this.horizontal;
            const linked = this.linked;
            let linkedTime;
            let $el = $target;
            let offsetX = 0;
            let offsetY = 0;
            /** @type {Element} */
            let $offsetParent = $el;
            if (linked) {
              linkedTime = linked.currentTime;
              linked.seek(0, true);
            }
            const isContainerStatic =
              getTargetValue(container.element, 'position') === 'static'
                ? setTargetValues(container.element, { position: 'relative ' })
                : false;
            while ($el && $el !== container.element && $el !== doc.body) {
              const isSticky =
                getTargetValue($el, 'position') === 'sticky'
                  ? setTargetValues($el, { position: 'static' })
                  : false;
              if ($el === $offsetParent) {
                offsetX += $el.offsetLeft || 0;
                offsetY += $el.offsetTop || 0;
                $offsetParent = $el.offsetParent;
              }
              $el = /** @type {HTMLElement} */ ($el.parentElement);
              if (isSticky) {
                if (!stickys) stickys = [];
                stickys.push(isSticky);
              }
            }
            if (isContainerStatic) isContainerStatic.revert();
            const offset = isHori ? offsetX : offsetY;
            const targetSize = isHori
              ? $target.offsetWidth
              : $target.offsetHeight;
            const containerSize = isHori ? container.width : container.height;
            const scrollSize = isHori
              ? container.scrollWidth
              : container.scrollHeight;
            const maxScroll = scrollSize - containerSize;
            const enter = this.enter;
            const leave = this.leave;

            /** @type {ScrollThresholdValue} */
            let enterTarget = 'start';
            /** @type {ScrollThresholdValue} */
            let leaveTarget = 'end';
            /** @type {ScrollThresholdValue} */
            let enterContainer = 'end';
            /** @type {ScrollThresholdValue} */
            let leaveContainer = 'start';

            if (isStr(enter)) {
              const splitted = /** @type {String} */ (enter).split(' ');
              enterContainer = splitted[0];
              enterTarget = splitted.length > 1 ? splitted[1] : enterTarget;
            } else if (isObj(enter)) {
              const e = /** @type {ScrollThresholdParam} */ (enter);
              if (!isUnd(e.container)) enterContainer = e.container;
              if (!isUnd(e.target)) enterTarget = e.target;
            } else if (isNum(enter)) {
              enterContainer = /** @type {Number} */ (enter);
            }

            if (isStr(leave)) {
              const splitted = /** @type {String} */ (leave).split(' ');
              leaveContainer = splitted[0];
              leaveTarget = splitted.length > 1 ? splitted[1] : leaveTarget;
            } else if (isObj(leave)) {
              const t = /** @type {ScrollThresholdParam} */ (leave);
              if (!isUnd(t.container)) leaveContainer = t.container;
              if (!isUnd(t.target)) leaveTarget = t.target;
            } else if (isNum(leave)) {
              leaveContainer = /** @type {Number} */ (leave);
            }

            const parsedEnterTarget = parseBoundValue(
              $target,
              enterTarget,
              targetSize,
            );
            const parsedLeaveTarget = parseBoundValue(
              $target,
              leaveTarget,
              targetSize,
            );
            const under = parsedEnterTarget + offset - containerSize;
            const over = parsedLeaveTarget + offset - maxScroll;
            const parsedEnterContainer = parseBoundValue(
              $target,
              enterContainer,
              containerSize,
              under,
              over,
            );
            const parsedLeaveContainer = parseBoundValue(
              $target,
              leaveContainer,
              containerSize,
              under,
              over,
            );
            const offsetStart =
              parsedEnterTarget + offset - parsedEnterContainer;
            const offsetEnd = parsedLeaveTarget + offset - parsedLeaveContainer;
            const scrollDelta = offsetEnd - offsetStart;
            this.offsets[0] = offsetX;
            this.offsets[1] = offsetY;
            this.offset = offset;
            this.offsetStart = offsetStart;
            this.offsetEnd = offsetEnd;
            this.distance = scrollDelta <= 0 ? 0 : scrollDelta;
            this.thresholds = [
              enterTarget,
              leaveTarget,
              enterContainer,
              leaveContainer,
            ];
            this.coords = [
              parsedEnterTarget,
              parsedLeaveTarget,
              parsedEnterContainer,
              parsedLeaveContainer,
            ];
            if (stickys) {
              stickys.forEach((sticky) => sticky.revert());
            }
            if (linked) {
              linked.seek(linkedTime, true);
            }
            if (this._debug) {
              this.debug();
            }
          }

          handleScroll() {
            const linked = this.linked;
            const sync = this.sync;
            const syncEase = this.syncEase;
            const syncSmooth = this.syncSmooth;
            const shouldSeek = linked && (syncEase || syncSmooth);
            const isHori = this.horizontal;
            const container = this.container;
            const scroll = this.scroll;
            const isBefore = scroll <= this.offsetStart;
            const isAfter = scroll >= this.offsetEnd;
            const isInView = !isBefore && !isAfter;
            const isOnTheEdge =
              scroll === this.offsetStart || scroll === this.offsetEnd;
            const forceEnter = !this.hasEntered && isOnTheEdge;
            const $debug = this._debug && this.$debug;
            let hasUpdated = false;
            let syncCompleted = false;
            let p = this.progress;

            if (isBefore && this.began) {
              this.began = false;
            }

            if (p > 0 && !this.began) {
              this.began = true;
            }

            if (shouldSeek) {
              const lp = linked.progress;
              if (syncSmooth && isNum(syncSmooth)) {
                if (/** @type {Number} */ (syncSmooth) < 1) {
                  const step = 0.0001;
                  const snap =
                    lp < p && p === 1 ? step : lp > p && !p ? -1e-4 : 0;
                  p = round(
                    lerp(
                      lp,
                      p,
                      interpolate(
                        0.01,
                        0.2,
                        /** @type {Number} */ (syncSmooth),
                      ),
                      false,
                    ) + snap,
                    6,
                  );
                }
              } else if (syncEase) {
                p = syncEase(p);
              }
              hasUpdated = p !== this.prevProgress;
              syncCompleted = lp === 1;
              if (hasUpdated && !syncCompleted && syncSmooth && lp) {
                container.wakeTicker.restart();
              }
            }

            if ($debug) {
              const sticky = isHori ? container.scrollY : container.scrollX;
              $debug.style[isHori ? 'top' : 'left'] = sticky + 10 + 'px';
            }

            // Trigger enter callbacks if already in view or when entering the view
            if (
              (isInView && !this.isInView) ||
              (forceEnter && !this.forceEnter && !this.hasEntered)
            ) {
              if (isInView) this.isInView = true;
              if (!this.forceEnter || !this.hasEntered) {
                if ($debug && isInView)
                  $debug.style.zIndex = `${this.container.zIndex++}`;
                this.onSyncEnter(this);
                this.onEnter(this);
                if (this.backward) {
                  this.onSyncEnterBackward(this);
                  this.onEnterBackward(this);
                } else {
                  this.onSyncEnterForward(this);
                  this.onEnterForward(this);
                }
                this.hasEntered = true;
                if (forceEnter) this.forceEnter = true;
              } else if (isInView) {
                this.forceEnter = false;
              }
            }

            if (isInView || (!isInView && this.isInView)) {
              hasUpdated = true;
            }

            if (hasUpdated) {
              if (shouldSeek) linked.seek(linked.duration * p);
              this.onUpdate(this);
            }

            if (!isInView && this.isInView) {
              this.isInView = false;
              this.onSyncLeave(this);
              this.onLeave(this);
              if (this.backward) {
                this.onSyncLeaveBackward(this);
                this.onLeaveBackward(this);
              } else {
                this.onSyncLeaveForward(this);
                this.onLeaveForward(this);
              }
              if (sync && !syncSmooth) {
                syncCompleted = true;
              }
            }

            if (
              p >= 1 &&
              this.began &&
              !this.completed &&
              ((sync && syncCompleted) || !sync)
            ) {
              if (sync) {
                this.onSyncComplete(this);
              }
              this.completed = true;
              if (
                (!this.repeat && !linked) ||
                (!this.repeat && linked && linked.completed)
              ) {
                this.revert();
              }
            }

            if (p < 1 && this.completed) {
              this.completed = false;
            }

            this.prevProgress = p;
          }

          revert() {
            if (this.reverted) return;
            const container = this.container;
            removeChild(container, this);
            if (!container._head) {
              container.revert();
            }
            if (this._debug) {
              this.removeDebug();
            }
            this.reverted = true;
            return this;
          }
        }

        /**
         * @param {ScrollObserverParams} [parameters={}]
         * @return {ScrollObserver}
         */
        const onScroll = (parameters = {}) => new ScrollObserver(parameters);

        /**
         * @typedef  {Object} StaggerParameters
         * @property {Number|String} [start]
         * @property {Number|'first'|'center'|'last'} [from]
         * @property {Boolean} [reversed]
         * @property {Array.<Number>} [grid]
         * @property {('x'|'y')} [axis]
         * @property {EasingParam} [ease]
         * @property {TweenModifier} [modifier]
         */

        /**
         * @callback StaggerFunction
         * @param {Target} [target]
         * @param {Number} [index]
         * @param {Number} [length]
         * @param {Timeline} [tl]
         * @return {Number|String}
         */

        /**
         * @param  {Number|String|[Number|String,Number|String]} val
         * @param  {StaggerParameters} params
         * @return {StaggerFunction}
         */
        const stagger = (val, params = {}) => {
          let values = [];
          let maxValue = 0;
          const from = params.from;
          const reversed = params.reversed;
          const ease = params.ease;
          const hasEasing = !isUnd(ease);
          const hasSpring =
            hasEasing && !isUnd(/** @type {Spring} */ (ease).ease);
          const staggerEase = hasSpring
            ? /** @type {Spring} */ (ease).ease
            : hasEasing
              ? parseEasings(ease)
              : null;
          const grid = params.grid;
          const axis = params.axis;
          const fromFirst = isUnd(from) || from === 0 || from === 'first';
          const fromCenter = from === 'center';
          const fromLast = from === 'last';
          const isRange = isArr(val);
          const val1 = isRange ? parseNumber(val[0]) : parseNumber(val);
          const val2 = isRange ? parseNumber(val[1]) : 0;
          const unitMatch = unitsExecRgx.exec(
            (isRange ? val[1] : val) + emptyString,
          );
          const start = params.start || 0 + (isRange ? val1 : 0);
          let fromIndex = fromFirst ? 0 : isNum(from) ? from : 0;
          return (_, i, t, tl) => {
            if (fromCenter) fromIndex = (t - 1) / 2;
            if (fromLast) fromIndex = t - 1;
            if (!values.length) {
              for (let index = 0; index < t; index++) {
                if (!grid) {
                  values.push(abs(fromIndex - index));
                } else {
                  const fromX = !fromCenter
                    ? fromIndex % grid[0]
                    : (grid[0] - 1) / 2;
                  const fromY = !fromCenter
                    ? floor(fromIndex / grid[0])
                    : (grid[1] - 1) / 2;
                  const toX = index % grid[0];
                  const toY = floor(index / grid[0]);
                  const distanceX = fromX - toX;
                  const distanceY = fromY - toY;
                  let value = sqrt(
                    distanceX * distanceX + distanceY * distanceY,
                  );
                  if (axis === 'x') value = -distanceX;
                  if (axis === 'y') value = -distanceY;
                  values.push(value);
                }
                maxValue = max(...values);
              }
              if (staggerEase)
                values = values.map(
                  (val) => staggerEase(val / maxValue) * maxValue,
                );
              if (reversed)
                values = values.map((val) =>
                  axis ? (val < 0 ? val * -1 : -val) : abs(maxValue - val),
                );
            }
            const spacing = isRange ? (val2 - val1) / maxValue : val1;
            const offset = tl
              ? parseTimelinePosition(
                  tl,
                  isUnd(params.start) ? tl.iterationDuration : start,
                )
              : /** @type {Number} */ (start);
            /** @type {String|Number} */
            let output = offset + (spacing * round(values[i], 2) || 0);
            if (params.modifier) output = params.modifier(output);
            if (unitMatch) output = `${output}${unitMatch[2]}`;
            return output;
          };
        };

        /***/
      },

    /***/ './node_modules/css-loader/dist/cjs.js!./node_modules/swiper/modules/navigation.css':
      /*!******************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/swiper/modules/navigation.css ***!
  \******************************************************************************************/
      /***/ (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../../css-loader/dist/runtime/sourceMaps.js */ './node_modules/css-loader/dist/runtime/sourceMaps.js',
          );
        /* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
          /*#__PURE__*/ __webpack_require__.n(
            _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
          );
        /* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../../css-loader/dist/runtime/api.js */ './node_modules/css-loader/dist/runtime/api.js',
          );
        /* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default =
          /*#__PURE__*/ __webpack_require__.n(
            _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          );
        // Imports

        var ___CSS_LOADER_EXPORT___ =
          _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()(
            _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        // Module
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          `:root {
  --swiper-navigation-size: 44px;
  /*
  --swiper-navigation-top-offset: 50%;
  --swiper-navigation-sides-offset: 10px;
  --swiper-navigation-color: var(--swiper-theme-color);
  */
}
.swiper-button-prev,
.swiper-button-next {
  position: absolute;
  top: var(--swiper-navigation-top-offset, 50%);
  width: calc(var(--swiper-navigation-size) / 44 * 27);
  height: var(--swiper-navigation-size);
  margin-top: calc(0px - (var(--swiper-navigation-size) / 2));
  z-index: 10;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--swiper-navigation-color, var(--swiper-theme-color));
}
.swiper-button-prev.swiper-button-disabled,
.swiper-button-next.swiper-button-disabled {
  opacity: 0.35;
  cursor: auto;
  pointer-events: none;
}
.swiper-button-prev.swiper-button-hidden,
.swiper-button-next.swiper-button-hidden {
  opacity: 0;
  cursor: auto;
  pointer-events: none;
}
.swiper-navigation-disabled .swiper-button-prev,
.swiper-navigation-disabled .swiper-button-next {
  display: none !important;
}
.swiper-button-prev svg,
.swiper-button-next svg {
  width: 100%;
  height: 100%;
  object-fit: contain;
  transform-origin: center;
}
.swiper-rtl .swiper-button-prev svg,
.swiper-rtl .swiper-button-next svg {
  transform: rotate(180deg);
}
.swiper-button-prev,
.swiper-rtl .swiper-button-next {
  left: var(--swiper-navigation-sides-offset, 10px);
  right: auto;
}
.swiper-button-next,
.swiper-rtl .swiper-button-prev {
  right: var(--swiper-navigation-sides-offset, 10px);
  left: auto;
}
.swiper-button-lock {
  display: none;
}
/* Navigation font start */
.swiper-button-prev:after,
.swiper-button-next:after {
  font-family: swiper-icons;
  font-size: var(--swiper-navigation-size);
  text-transform: none !important;
  letter-spacing: 0;
  font-variant: initial;
  line-height: 1;
}
.swiper-button-prev:after,
.swiper-rtl .swiper-button-next:after {
  content: 'prev';
}
.swiper-button-next,
.swiper-rtl .swiper-button-prev {
  right: var(--swiper-navigation-sides-offset, 10px);
  left: auto;
}
.swiper-button-next:after,
.swiper-rtl .swiper-button-prev:after {
  content: 'next';
}
/* Navigation font end */
`,
          '',
          {
            version: 3,
            sources: ['webpack://./node_modules/swiper/modules/navigation.css'],
            names: [],
            mappings:
              'AAAA;EACE,8BAA8B;EAC9B;;;;GAIC;AACH;AACA;;EAEE,kBAAkB;EAClB,6CAA6C;EAC7C,oDAAoD;EACpD,qCAAqC;EACrC,2DAA2D;EAC3D,WAAW;EACX,eAAe;EACf,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,gEAAgE;AAClE;AACA;;EAEE,aAAa;EACb,YAAY;EACZ,oBAAoB;AACtB;AACA;;EAEE,UAAU;EACV,YAAY;EACZ,oBAAoB;AACtB;AACA;;EAEE,wBAAwB;AAC1B;AACA;;EAEE,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,wBAAwB;AAC1B;AACA;;EAEE,yBAAyB;AAC3B;AACA;;EAEE,iDAAiD;EACjD,WAAW;AACb;AACA;;EAEE,kDAAkD;EAClD,UAAU;AACZ;AACA;EACE,aAAa;AACf;AACA,0BAA0B;AAC1B;;EAEE,yBAAyB;EACzB,wCAAwC;EACxC,+BAA+B;EAC/B,iBAAiB;EACjB,qBAAqB;EACrB,cAAc;AAChB;AACA;;EAEE,eAAe;AACjB;AACA;;EAEE,kDAAkD;EAClD,UAAU;AACZ;AACA;;EAEE,eAAe;AACjB;AACA,wBAAwB',
            sourcesContent: [
              ":root {\n  --swiper-navigation-size: 44px;\n  /*\n  --swiper-navigation-top-offset: 50%;\n  --swiper-navigation-sides-offset: 10px;\n  --swiper-navigation-color: var(--swiper-theme-color);\n  */\n}\n.swiper-button-prev,\n.swiper-button-next {\n  position: absolute;\n  top: var(--swiper-navigation-top-offset, 50%);\n  width: calc(var(--swiper-navigation-size) / 44 * 27);\n  height: var(--swiper-navigation-size);\n  margin-top: calc(0px - (var(--swiper-navigation-size) / 2));\n  z-index: 10;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: var(--swiper-navigation-color, var(--swiper-theme-color));\n}\n.swiper-button-prev.swiper-button-disabled,\n.swiper-button-next.swiper-button-disabled {\n  opacity: 0.35;\n  cursor: auto;\n  pointer-events: none;\n}\n.swiper-button-prev.swiper-button-hidden,\n.swiper-button-next.swiper-button-hidden {\n  opacity: 0;\n  cursor: auto;\n  pointer-events: none;\n}\n.swiper-navigation-disabled .swiper-button-prev,\n.swiper-navigation-disabled .swiper-button-next {\n  display: none !important;\n}\n.swiper-button-prev svg,\n.swiper-button-next svg {\n  width: 100%;\n  height: 100%;\n  object-fit: contain;\n  transform-origin: center;\n}\n.swiper-rtl .swiper-button-prev svg,\n.swiper-rtl .swiper-button-next svg {\n  transform: rotate(180deg);\n}\n.swiper-button-prev,\n.swiper-rtl .swiper-button-next {\n  left: var(--swiper-navigation-sides-offset, 10px);\n  right: auto;\n}\n.swiper-button-next,\n.swiper-rtl .swiper-button-prev {\n  right: var(--swiper-navigation-sides-offset, 10px);\n  left: auto;\n}\n.swiper-button-lock {\n  display: none;\n}\n/* Navigation font start */\n.swiper-button-prev:after,\n.swiper-button-next:after {\n  font-family: swiper-icons;\n  font-size: var(--swiper-navigation-size);\n  text-transform: none !important;\n  letter-spacing: 0;\n  font-variant: initial;\n  line-height: 1;\n}\n.swiper-button-prev:after,\n.swiper-rtl .swiper-button-next:after {\n  content: 'prev';\n}\n.swiper-button-next,\n.swiper-rtl .swiper-button-prev {\n  right: var(--swiper-navigation-sides-offset, 10px);\n  left: auto;\n}\n.swiper-button-next:after,\n.swiper-rtl .swiper-button-prev:after {\n  content: 'next';\n}\n/* Navigation font end */\n",
            ],
            sourceRoot: '',
          },
        ]);
        // Exports
        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          ___CSS_LOADER_EXPORT___;

        /***/
      },

    /***/ './node_modules/css-loader/dist/cjs.js!./node_modules/swiper/modules/pagination.css':
      /*!******************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/swiper/modules/pagination.css ***!
  \******************************************************************************************/
      /***/ (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../../css-loader/dist/runtime/sourceMaps.js */ './node_modules/css-loader/dist/runtime/sourceMaps.js',
          );
        /* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
          /*#__PURE__*/ __webpack_require__.n(
            _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
          );
        /* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../../css-loader/dist/runtime/api.js */ './node_modules/css-loader/dist/runtime/api.js',
          );
        /* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default =
          /*#__PURE__*/ __webpack_require__.n(
            _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          );
        // Imports

        var ___CSS_LOADER_EXPORT___ =
          _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()(
            _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        // Module
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          `:root {
  /*
  --swiper-pagination-color: var(--swiper-theme-color);
  --swiper-pagination-left: auto;
  --swiper-pagination-right: 8px;
  --swiper-pagination-bottom: 8px;
  --swiper-pagination-top: auto;
  --swiper-pagination-fraction-color: inherit;
  --swiper-pagination-progressbar-bg-color: rgba(0,0,0,0.25);
  --swiper-pagination-progressbar-size: 4px;
  --swiper-pagination-bullet-size: 8px;
  --swiper-pagination-bullet-width: 8px;
  --swiper-pagination-bullet-height: 8px;
  --swiper-pagination-bullet-border-radius: 50%;
  --swiper-pagination-bullet-inactive-color: #000;
  --swiper-pagination-bullet-inactive-opacity: 0.2;
  --swiper-pagination-bullet-opacity: 1;
  --swiper-pagination-bullet-horizontal-gap: 4px;
  --swiper-pagination-bullet-vertical-gap: 6px;
  */
}
.swiper-pagination {
  position: absolute;
  text-align: center;
  transition: 300ms opacity;
  transform: translate3d(0, 0, 0);
  z-index: 10;
}
.swiper-pagination.swiper-pagination-hidden {
  opacity: 0;
}
.swiper-pagination-disabled > .swiper-pagination,
.swiper-pagination.swiper-pagination-disabled {
  display: none !important;
}
/* Common Styles */
.swiper-pagination-fraction,
.swiper-pagination-custom,
.swiper-horizontal > .swiper-pagination-bullets,
.swiper-pagination-bullets.swiper-pagination-horizontal {
  bottom: var(--swiper-pagination-bottom, 8px);
  top: var(--swiper-pagination-top, auto);
  left: 0;
  width: 100%;
}
/* Bullets */
.swiper-pagination-bullets-dynamic {
  overflow: hidden;
  font-size: 0;
}
.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {
  transform: scale(0.33);
  position: relative;
}
.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active {
  transform: scale(1);
}
.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main {
  transform: scale(1);
}
.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev {
  transform: scale(0.66);
}
.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev {
  transform: scale(0.33);
}
.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next {
  transform: scale(0.66);
}
.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next {
  transform: scale(0.33);
}
.swiper-pagination-bullet {
  width: var(--swiper-pagination-bullet-width, var(--swiper-pagination-bullet-size, 8px));
  height: var(--swiper-pagination-bullet-height, var(--swiper-pagination-bullet-size, 8px));
  display: inline-block;
  border-radius: var(--swiper-pagination-bullet-border-radius, 50%);
  background: var(--swiper-pagination-bullet-inactive-color, #000);
  opacity: var(--swiper-pagination-bullet-inactive-opacity, 0.2);
}
button.swiper-pagination-bullet {
  border: none;
  margin: 0;
  padding: 0;
  box-shadow: none;
  -webkit-appearance: none;
          appearance: none;
}
.swiper-pagination-clickable .swiper-pagination-bullet {
  cursor: pointer;
}
.swiper-pagination-bullet:only-child {
  display: none !important;
}
.swiper-pagination-bullet-active {
  opacity: var(--swiper-pagination-bullet-opacity, 1);
  background: var(--swiper-pagination-color, var(--swiper-theme-color));
}
.swiper-vertical > .swiper-pagination-bullets,
.swiper-pagination-vertical.swiper-pagination-bullets {
  right: var(--swiper-pagination-right, 8px);
  left: var(--swiper-pagination-left, auto);
  top: 50%;
  transform: translate3d(0px, -50%, 0);
}
.swiper-vertical > .swiper-pagination-bullets .swiper-pagination-bullet,
.swiper-pagination-vertical.swiper-pagination-bullets .swiper-pagination-bullet {
  margin: var(--swiper-pagination-bullet-vertical-gap, 6px) 0;
  display: block;
}
.swiper-vertical > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic,
.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic {
  top: 50%;
  transform: translateY(-50%);
  width: 8px;
}
.swiper-vertical > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,
.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {
  display: inline-block;
  transition: 200ms transform,
        200ms top;
}
.swiper-horizontal > .swiper-pagination-bullets .swiper-pagination-bullet,
.swiper-pagination-horizontal.swiper-pagination-bullets .swiper-pagination-bullet {
  margin: 0 var(--swiper-pagination-bullet-horizontal-gap, 4px);
}
.swiper-horizontal > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic,
.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic {
  left: 50%;
  transform: translateX(-50%);
  white-space: nowrap;
}
.swiper-horizontal > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,
.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {
  transition: 200ms transform,
        200ms left;
}
.swiper-horizontal.swiper-rtl > .swiper-pagination-bullets-dynamic .swiper-pagination-bullet {
  transition: 200ms transform,
    200ms right;
}
/* Fraction */
.swiper-pagination-fraction {
  color: var(--swiper-pagination-fraction-color, inherit);
}
/* Progress */
.swiper-pagination-progressbar {
  background: var(--swiper-pagination-progressbar-bg-color, rgba(0, 0, 0, 0.25));
  position: absolute;
}
.swiper-pagination-progressbar .swiper-pagination-progressbar-fill {
  background: var(--swiper-pagination-color, var(--swiper-theme-color));
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  transform: scale(0);
  transform-origin: left top;
}
.swiper-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill {
  transform-origin: right top;
}
.swiper-horizontal > .swiper-pagination-progressbar,
.swiper-pagination-progressbar.swiper-pagination-horizontal,
.swiper-vertical > .swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,
.swiper-pagination-progressbar.swiper-pagination-vertical.swiper-pagination-progressbar-opposite {
  width: 100%;
  height: var(--swiper-pagination-progressbar-size, 4px);
  left: 0;
  top: 0;
}
.swiper-vertical > .swiper-pagination-progressbar,
.swiper-pagination-progressbar.swiper-pagination-vertical,
.swiper-horizontal > .swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,
.swiper-pagination-progressbar.swiper-pagination-horizontal.swiper-pagination-progressbar-opposite {
  width: var(--swiper-pagination-progressbar-size, 4px);
  height: 100%;
  left: 0;
  top: 0;
}
.swiper-pagination-lock {
  display: none;
}
`,
          '',
          {
            version: 3,
            sources: ['webpack://./node_modules/swiper/modules/pagination.css'],
            names: [],
            mappings:
              'AAAA;EACE;;;;;;;;;;;;;;;;;;GAkBC;AACH;AACA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,yBAAyB;EACzB,+BAA+B;EAC/B,WAAW;AACb;AACA;EACE,UAAU;AACZ;AACA;;EAEE,wBAAwB;AAC1B;AACA,kBAAkB;AAClB;;;;EAIE,4CAA4C;EAC5C,uCAAuC;EACvC,OAAO;EACP,WAAW;AACb;AACA,YAAY;AACZ;EACE,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,sBAAsB;EACtB,kBAAkB;AACpB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,uFAAuF;EACvF,yFAAyF;EACzF,qBAAqB;EACrB,iEAAiE;EACjE,gEAAgE;EAChE,8DAA8D;AAChE;AACA;EACE,YAAY;EACZ,SAAS;EACT,UAAU;EACV,gBAAgB;EAChB,wBAAwB;UAChB,gBAAgB;AAC1B;AACA;EACE,eAAe;AACjB;AACA;EACE,wBAAwB;AAC1B;AACA;EACE,mDAAmD;EACnD,qEAAqE;AACvE;AACA;;EAEE,0CAA0C;EAC1C,yCAAyC;EACzC,QAAQ;EACR,oCAAoC;AACtC;AACA;;EAEE,2DAA2D;EAC3D,cAAc;AAChB;AACA;;EAEE,QAAQ;EACR,2BAA2B;EAC3B,UAAU;AACZ;AACA;;EAEE,qBAAqB;EACrB;iBACe;AACjB;AACA;;EAEE,6DAA6D;AAC/D;AACA;;EAEE,SAAS;EACT,2BAA2B;EAC3B,mBAAmB;AACrB;AACA;;EAEE;kBACgB;AAClB;AACA;EACE;eACa;AACf;AACA,aAAa;AACb;EACE,uDAAuD;AACzD;AACA,aAAa;AACb;EACE,8EAA8E;EAC9E,kBAAkB;AACpB;AACA;EACE,qEAAqE;EACrE,kBAAkB;EAClB,OAAO;EACP,MAAM;EACN,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,0BAA0B;AAC5B;AACA;EACE,2BAA2B;AAC7B;AACA;;;;EAIE,WAAW;EACX,sDAAsD;EACtD,OAAO;EACP,MAAM;AACR;AACA;;;;EAIE,qDAAqD;EACrD,YAAY;EACZ,OAAO;EACP,MAAM;AACR;AACA;EACE,aAAa;AACf',
            sourcesContent: [
              ':root {\n  /*\n  --swiper-pagination-color: var(--swiper-theme-color);\n  --swiper-pagination-left: auto;\n  --swiper-pagination-right: 8px;\n  --swiper-pagination-bottom: 8px;\n  --swiper-pagination-top: auto;\n  --swiper-pagination-fraction-color: inherit;\n  --swiper-pagination-progressbar-bg-color: rgba(0,0,0,0.25);\n  --swiper-pagination-progressbar-size: 4px;\n  --swiper-pagination-bullet-size: 8px;\n  --swiper-pagination-bullet-width: 8px;\n  --swiper-pagination-bullet-height: 8px;\n  --swiper-pagination-bullet-border-radius: 50%;\n  --swiper-pagination-bullet-inactive-color: #000;\n  --swiper-pagination-bullet-inactive-opacity: 0.2;\n  --swiper-pagination-bullet-opacity: 1;\n  --swiper-pagination-bullet-horizontal-gap: 4px;\n  --swiper-pagination-bullet-vertical-gap: 6px;\n  */\n}\n.swiper-pagination {\n  position: absolute;\n  text-align: center;\n  transition: 300ms opacity;\n  transform: translate3d(0, 0, 0);\n  z-index: 10;\n}\n.swiper-pagination.swiper-pagination-hidden {\n  opacity: 0;\n}\n.swiper-pagination-disabled > .swiper-pagination,\n.swiper-pagination.swiper-pagination-disabled {\n  display: none !important;\n}\n/* Common Styles */\n.swiper-pagination-fraction,\n.swiper-pagination-custom,\n.swiper-horizontal > .swiper-pagination-bullets,\n.swiper-pagination-bullets.swiper-pagination-horizontal {\n  bottom: var(--swiper-pagination-bottom, 8px);\n  top: var(--swiper-pagination-top, auto);\n  left: 0;\n  width: 100%;\n}\n/* Bullets */\n.swiper-pagination-bullets-dynamic {\n  overflow: hidden;\n  font-size: 0;\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transform: scale(0.33);\n  position: relative;\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active {\n  transform: scale(1);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main {\n  transform: scale(1);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev {\n  transform: scale(0.66);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev {\n  transform: scale(0.33);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next {\n  transform: scale(0.66);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next {\n  transform: scale(0.33);\n}\n.swiper-pagination-bullet {\n  width: var(--swiper-pagination-bullet-width, var(--swiper-pagination-bullet-size, 8px));\n  height: var(--swiper-pagination-bullet-height, var(--swiper-pagination-bullet-size, 8px));\n  display: inline-block;\n  border-radius: var(--swiper-pagination-bullet-border-radius, 50%);\n  background: var(--swiper-pagination-bullet-inactive-color, #000);\n  opacity: var(--swiper-pagination-bullet-inactive-opacity, 0.2);\n}\nbutton.swiper-pagination-bullet {\n  border: none;\n  margin: 0;\n  padding: 0;\n  box-shadow: none;\n  -webkit-appearance: none;\n          appearance: none;\n}\n.swiper-pagination-clickable .swiper-pagination-bullet {\n  cursor: pointer;\n}\n.swiper-pagination-bullet:only-child {\n  display: none !important;\n}\n.swiper-pagination-bullet-active {\n  opacity: var(--swiper-pagination-bullet-opacity, 1);\n  background: var(--swiper-pagination-color, var(--swiper-theme-color));\n}\n.swiper-vertical > .swiper-pagination-bullets,\n.swiper-pagination-vertical.swiper-pagination-bullets {\n  right: var(--swiper-pagination-right, 8px);\n  left: var(--swiper-pagination-left, auto);\n  top: 50%;\n  transform: translate3d(0px, -50%, 0);\n}\n.swiper-vertical > .swiper-pagination-bullets .swiper-pagination-bullet,\n.swiper-pagination-vertical.swiper-pagination-bullets .swiper-pagination-bullet {\n  margin: var(--swiper-pagination-bullet-vertical-gap, 6px) 0;\n  display: block;\n}\n.swiper-vertical > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic,\n.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic {\n  top: 50%;\n  transform: translateY(-50%);\n  width: 8px;\n}\n.swiper-vertical > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,\n.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  display: inline-block;\n  transition: 200ms transform,\n        200ms top;\n}\n.swiper-horizontal > .swiper-pagination-bullets .swiper-pagination-bullet,\n.swiper-pagination-horizontal.swiper-pagination-bullets .swiper-pagination-bullet {\n  margin: 0 var(--swiper-pagination-bullet-horizontal-gap, 4px);\n}\n.swiper-horizontal > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic,\n.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic {\n  left: 50%;\n  transform: translateX(-50%);\n  white-space: nowrap;\n}\n.swiper-horizontal > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,\n.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transition: 200ms transform,\n        200ms left;\n}\n.swiper-horizontal.swiper-rtl > .swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transition: 200ms transform,\n    200ms right;\n}\n/* Fraction */\n.swiper-pagination-fraction {\n  color: var(--swiper-pagination-fraction-color, inherit);\n}\n/* Progress */\n.swiper-pagination-progressbar {\n  background: var(--swiper-pagination-progressbar-bg-color, rgba(0, 0, 0, 0.25));\n  position: absolute;\n}\n.swiper-pagination-progressbar .swiper-pagination-progressbar-fill {\n  background: var(--swiper-pagination-color, var(--swiper-theme-color));\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  transform: scale(0);\n  transform-origin: left top;\n}\n.swiper-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill {\n  transform-origin: right top;\n}\n.swiper-horizontal > .swiper-pagination-progressbar,\n.swiper-pagination-progressbar.swiper-pagination-horizontal,\n.swiper-vertical > .swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,\n.swiper-pagination-progressbar.swiper-pagination-vertical.swiper-pagination-progressbar-opposite {\n  width: 100%;\n  height: var(--swiper-pagination-progressbar-size, 4px);\n  left: 0;\n  top: 0;\n}\n.swiper-vertical > .swiper-pagination-progressbar,\n.swiper-pagination-progressbar.swiper-pagination-vertical,\n.swiper-horizontal > .swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,\n.swiper-pagination-progressbar.swiper-pagination-horizontal.swiper-pagination-progressbar-opposite {\n  width: var(--swiper-pagination-progressbar-size, 4px);\n  height: 100%;\n  left: 0;\n  top: 0;\n}\n.swiper-pagination-lock {\n  display: none;\n}\n',
            ],
            sourceRoot: '',
          },
        ]);
        // Exports
        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          ___CSS_LOADER_EXPORT___;

        /***/
      },

    /***/ './node_modules/css-loader/dist/cjs.js!./node_modules/swiper/swiper.css':
      /*!******************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/swiper/swiper.css ***!
  \******************************************************************************/
      /***/ (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../css-loader/dist/runtime/sourceMaps.js */ './node_modules/css-loader/dist/runtime/sourceMaps.js',
          );
        /* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
          /*#__PURE__*/ __webpack_require__.n(
            _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
          );
        /* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../css-loader/dist/runtime/api.js */ './node_modules/css-loader/dist/runtime/api.js',
          );
        /* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default =
          /*#__PURE__*/ __webpack_require__.n(
            _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          );
        /* harmony import */ var _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../css-loader/dist/runtime/getUrl.js */ './node_modules/css-loader/dist/runtime/getUrl.js',
          );
        /* harmony import */ var _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default =
          /*#__PURE__*/ __webpack_require__.n(
            _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__,
          );
        // Imports

        var ___CSS_LOADER_URL_IMPORT_0___ = new URL(
          /* asset import */ __webpack_require__(
            /*! data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA */ 'data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA',
          ),
          __webpack_require__.b,
        );
        var ___CSS_LOADER_EXPORT___ =
          _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()(
            _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        var ___CSS_LOADER_URL_REPLACEMENT_0___ =
          _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(
            ___CSS_LOADER_URL_IMPORT_0___,
          );
        // Module
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          `/**
 * Swiper 11.2.10
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 * https://swiperjs.com
 *
 * Copyright 2014-2025 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: June 28, 2025
 */

/* FONT_START */
@font-face {
  font-family: 'swiper-icons';
  src: url(${___CSS_LOADER_URL_REPLACEMENT_0___});
  font-weight: 400;
  font-style: normal;
}
/* FONT_END */
:root {
  --swiper-theme-color: #007aff;
  /*
  --swiper-preloader-color: var(--swiper-theme-color);
  --swiper-wrapper-transition-timing-function: initial;
  */
}
:host {
  position: relative;
  display: block;
  margin-left: auto;
  margin-right: auto;
  z-index: 1;
}
.swiper {
  margin-left: auto;
  margin-right: auto;
  position: relative;
  overflow: hidden;
  list-style: none;
  padding: 0;
  /* Fix of Webkit flickering */
  z-index: 1;
  display: block;
}
.swiper-vertical > .swiper-wrapper {
  flex-direction: column;
}
.swiper-wrapper {
  position: relative;
  width: 100%;
  height: 100%;
  z-index: 1;
  display: flex;
  transition-property: transform;
  transition-timing-function: var(--swiper-wrapper-transition-timing-function, initial);
  box-sizing: content-box;
}
.swiper-android .swiper-slide,
.swiper-ios .swiper-slide,
.swiper-wrapper {
  transform: translate3d(0px, 0, 0);
}
.swiper-horizontal {
  touch-action: pan-y;
}
.swiper-vertical {
  touch-action: pan-x;
}
.swiper-slide {
  flex-shrink: 0;
  width: 100%;
  height: 100%;
  position: relative;
  transition-property: transform;
  display: block;
}
.swiper-slide-invisible-blank {
  visibility: hidden;
}
/* Auto Height */
.swiper-autoheight,
.swiper-autoheight .swiper-slide {
  height: auto;
}
.swiper-autoheight .swiper-wrapper {
  align-items: flex-start;
  transition-property: transform, height;
}
.swiper-backface-hidden .swiper-slide {
  transform: translateZ(0);
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
}
/* 3D Effects */
.swiper-3d.swiper-css-mode .swiper-wrapper {
  perspective: 1200px;
}
.swiper-3d .swiper-wrapper {
  transform-style: preserve-3d;
}
.swiper-3d {
  perspective: 1200px;
}
.swiper-3d .swiper-slide,
.swiper-3d .swiper-cube-shadow {
  transform-style: preserve-3d;
}
/* CSS Mode */
.swiper-css-mode > .swiper-wrapper {
  overflow: auto;
  scrollbar-width: none;
  /* For Firefox */
  -ms-overflow-style: none;
  /* For Internet Explorer and Edge */
}
.swiper-css-mode > .swiper-wrapper::-webkit-scrollbar {
  display: none;
}
.swiper-css-mode > .swiper-wrapper > .swiper-slide {
  scroll-snap-align: start start;
}
.swiper-css-mode.swiper-horizontal > .swiper-wrapper {
  scroll-snap-type: x mandatory;
}
.swiper-css-mode.swiper-vertical > .swiper-wrapper {
  scroll-snap-type: y mandatory;
}
.swiper-css-mode.swiper-free-mode > .swiper-wrapper {
  scroll-snap-type: none;
}
.swiper-css-mode.swiper-free-mode > .swiper-wrapper > .swiper-slide {
  scroll-snap-align: none;
}
.swiper-css-mode.swiper-centered > .swiper-wrapper::before {
  content: '';
  flex-shrink: 0;
  order: 9999;
}
.swiper-css-mode.swiper-centered > .swiper-wrapper > .swiper-slide {
  scroll-snap-align: center center;
  scroll-snap-stop: always;
}
.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper > .swiper-slide:first-child {
  margin-inline-start: var(--swiper-centered-offset-before);
}
.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper::before {
  height: 100%;
  min-height: 1px;
  width: var(--swiper-centered-offset-after);
}
.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper > .swiper-slide:first-child {
  margin-block-start: var(--swiper-centered-offset-before);
}
.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper::before {
  width: 100%;
  min-width: 1px;
  height: var(--swiper-centered-offset-after);
}
/* Slide styles start */
/* 3D Shadows */
.swiper-3d .swiper-slide-shadow,
.swiper-3d .swiper-slide-shadow-left,
.swiper-3d .swiper-slide-shadow-right,
.swiper-3d .swiper-slide-shadow-top,
.swiper-3d .swiper-slide-shadow-bottom,
.swiper-3d .swiper-slide-shadow,
.swiper-3d .swiper-slide-shadow-left,
.swiper-3d .swiper-slide-shadow-right,
.swiper-3d .swiper-slide-shadow-top,
.swiper-3d .swiper-slide-shadow-bottom {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 10;
}
.swiper-3d .swiper-slide-shadow {
  background: rgba(0, 0, 0, 0.15);
}
.swiper-3d .swiper-slide-shadow-left {
  background-image: linear-gradient(to left, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));
}
.swiper-3d .swiper-slide-shadow-right {
  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));
}
.swiper-3d .swiper-slide-shadow-top {
  background-image: linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));
}
.swiper-3d .swiper-slide-shadow-bottom {
  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));
}
.swiper-lazy-preloader {
  width: 42px;
  height: 42px;
  position: absolute;
  left: 50%;
  top: 50%;
  margin-left: -21px;
  margin-top: -21px;
  z-index: 10;
  transform-origin: 50%;
  box-sizing: border-box;
  border: 4px solid var(--swiper-preloader-color, var(--swiper-theme-color));
  border-radius: 50%;
  border-top-color: transparent;
}
.swiper:not(.swiper-watch-progress) .swiper-lazy-preloader,
.swiper-watch-progress .swiper-slide-visible .swiper-lazy-preloader {
  animation: swiper-preloader-spin 1s infinite linear;
}
.swiper-lazy-preloader-white {
  --swiper-preloader-color: #fff;
}
.swiper-lazy-preloader-black {
  --swiper-preloader-color: #000;
}
@keyframes swiper-preloader-spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
/* Slide styles end */
`,
          '',
          {
            version: 3,
            sources: ['webpack://./node_modules/swiper/swiper.css'],
            names: [],
            mappings:
              'AAAA;;;;;;;;;;EAUE;;AAEF,eAAe;AACf;EACE,2BAA2B;EAC3B,4CAA6rE;EAC7rE,gBAAgB;EAChB,kBAAkB;AACpB;AACA,aAAa;AACb;EACE,6BAA6B;EAC7B;;;GAGC;AACH;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,iBAAiB;EACjB,kBAAkB;EAClB,UAAU;AACZ;AACA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,gBAAgB;EAChB,UAAU;EACV,6BAA6B;EAC7B,UAAU;EACV,cAAc;AAChB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,UAAU;EACV,aAAa;EACb,8BAA8B;EAC9B,qFAAqF;EACrF,uBAAuB;AACzB;AACA;;;EAGE,iCAAiC;AACnC;AACA;EACE,mBAAmB;AACrB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,cAAc;EACd,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,8BAA8B;EAC9B,cAAc;AAChB;AACA;EACE,kBAAkB;AACpB;AACA,gBAAgB;AAChB;;EAEE,YAAY;AACd;AACA;EACE,uBAAuB;EACvB,sCAAsC;AACxC;AACA;EACE,wBAAwB;EACxB,mCAAmC;UAC3B,2BAA2B;AACrC;AACA,eAAe;AACf;EACE,mBAAmB;AACrB;AACA;EACE,4BAA4B;AAC9B;AACA;EACE,mBAAmB;AACrB;AACA;;EAEE,4BAA4B;AAC9B;AACA,aAAa;AACb;EACE,cAAc;EACd,qBAAqB;EACrB,gBAAgB;EAChB,wBAAwB;EACxB,mCAAmC;AACrC;AACA;EACE,aAAa;AACf;AACA;EACE,8BAA8B;AAChC;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,sBAAsB;AACxB;AACA;EACE,uBAAuB;AACzB;AACA;EACE,WAAW;EACX,cAAc;EACd,WAAW;AACb;AACA;EACE,gCAAgC;EAChC,wBAAwB;AAC1B;AACA;EACE,yDAAyD;AAC3D;AACA;EACE,YAAY;EACZ,eAAe;EACf,0CAA0C;AAC5C;AACA;EACE,wDAAwD;AAC1D;AACA;EACE,WAAW;EACX,cAAc;EACd,2CAA2C;AAC7C;AACA,uBAAuB;AACvB,eAAe;AACf;;;;;;;;;;EAUE,kBAAkB;EAClB,OAAO;EACP,MAAM;EACN,WAAW;EACX,YAAY;EACZ,oBAAoB;EACpB,WAAW;AACb;AACA;EACE,+BAA+B;AACjC;AACA;EACE,gFAAgF;AAClF;AACA;EACE,iFAAiF;AACnF;AACA;EACE,+EAA+E;AACjF;AACA;EACE,kFAAkF;AACpF;AACA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,SAAS;EACT,QAAQ;EACR,kBAAkB;EAClB,iBAAiB;EACjB,WAAW;EACX,qBAAqB;EACrB,sBAAsB;EACtB,0EAA0E;EAC1E,kBAAkB;EAClB,6BAA6B;AAC/B;AACA;;EAEE,mDAAmD;AACrD;AACA;EACE,8BAA8B;AAChC;AACA;EACE,8BAA8B;AAChC;AACA;EACE;IACE,uBAAuB;EACzB;EACA;IACE,yBAAyB;EAC3B;AACF;AACA,qBAAqB',
            sourcesContent: [
              "/**\n * Swiper 11.2.10\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2025 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: June 28, 2025\n */\n\n/* FONT_START */\n@font-face {\n  font-family: 'swiper-icons';\n  src: url('data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA');\n  font-weight: 400;\n  font-style: normal;\n}\n/* FONT_END */\n:root {\n  --swiper-theme-color: #007aff;\n  /*\n  --swiper-preloader-color: var(--swiper-theme-color);\n  --swiper-wrapper-transition-timing-function: initial;\n  */\n}\n:host {\n  position: relative;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  z-index: 1;\n}\n.swiper {\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  overflow: hidden;\n  list-style: none;\n  padding: 0;\n  /* Fix of Webkit flickering */\n  z-index: 1;\n  display: block;\n}\n.swiper-vertical > .swiper-wrapper {\n  flex-direction: column;\n}\n.swiper-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  display: flex;\n  transition-property: transform;\n  transition-timing-function: var(--swiper-wrapper-transition-timing-function, initial);\n  box-sizing: content-box;\n}\n.swiper-android .swiper-slide,\n.swiper-ios .swiper-slide,\n.swiper-wrapper {\n  transform: translate3d(0px, 0, 0);\n}\n.swiper-horizontal {\n  touch-action: pan-y;\n}\n.swiper-vertical {\n  touch-action: pan-x;\n}\n.swiper-slide {\n  flex-shrink: 0;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  transition-property: transform;\n  display: block;\n}\n.swiper-slide-invisible-blank {\n  visibility: hidden;\n}\n/* Auto Height */\n.swiper-autoheight,\n.swiper-autoheight .swiper-slide {\n  height: auto;\n}\n.swiper-autoheight .swiper-wrapper {\n  align-items: flex-start;\n  transition-property: transform, height;\n}\n.swiper-backface-hidden .swiper-slide {\n  transform: translateZ(0);\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n}\n/* 3D Effects */\n.swiper-3d.swiper-css-mode .swiper-wrapper {\n  perspective: 1200px;\n}\n.swiper-3d .swiper-wrapper {\n  transform-style: preserve-3d;\n}\n.swiper-3d {\n  perspective: 1200px;\n}\n.swiper-3d .swiper-slide,\n.swiper-3d .swiper-cube-shadow {\n  transform-style: preserve-3d;\n}\n/* CSS Mode */\n.swiper-css-mode > .swiper-wrapper {\n  overflow: auto;\n  scrollbar-width: none;\n  /* For Firefox */\n  -ms-overflow-style: none;\n  /* For Internet Explorer and Edge */\n}\n.swiper-css-mode > .swiper-wrapper::-webkit-scrollbar {\n  display: none;\n}\n.swiper-css-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: start start;\n}\n.swiper-css-mode.swiper-horizontal > .swiper-wrapper {\n  scroll-snap-type: x mandatory;\n}\n.swiper-css-mode.swiper-vertical > .swiper-wrapper {\n  scroll-snap-type: y mandatory;\n}\n.swiper-css-mode.swiper-free-mode > .swiper-wrapper {\n  scroll-snap-type: none;\n}\n.swiper-css-mode.swiper-free-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: none;\n}\n.swiper-css-mode.swiper-centered > .swiper-wrapper::before {\n  content: '';\n  flex-shrink: 0;\n  order: 9999;\n}\n.swiper-css-mode.swiper-centered > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: center center;\n  scroll-snap-stop: always;\n}\n.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper > .swiper-slide:first-child {\n  margin-inline-start: var(--swiper-centered-offset-before);\n}\n.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper::before {\n  height: 100%;\n  min-height: 1px;\n  width: var(--swiper-centered-offset-after);\n}\n.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper > .swiper-slide:first-child {\n  margin-block-start: var(--swiper-centered-offset-before);\n}\n.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper::before {\n  width: 100%;\n  min-width: 1px;\n  height: var(--swiper-centered-offset-after);\n}\n/* Slide styles start */\n/* 3D Shadows */\n.swiper-3d .swiper-slide-shadow,\n.swiper-3d .swiper-slide-shadow-left,\n.swiper-3d .swiper-slide-shadow-right,\n.swiper-3d .swiper-slide-shadow-top,\n.swiper-3d .swiper-slide-shadow-bottom,\n.swiper-3d .swiper-slide-shadow,\n.swiper-3d .swiper-slide-shadow-left,\n.swiper-3d .swiper-slide-shadow-right,\n.swiper-3d .swiper-slide-shadow-top,\n.swiper-3d .swiper-slide-shadow-bottom {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 10;\n}\n.swiper-3d .swiper-slide-shadow {\n  background: rgba(0, 0, 0, 0.15);\n}\n.swiper-3d .swiper-slide-shadow-left {\n  background-image: linear-gradient(to left, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-right {\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-top {\n  background-image: linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-bottom {\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-lazy-preloader {\n  width: 42px;\n  height: 42px;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  margin-left: -21px;\n  margin-top: -21px;\n  z-index: 10;\n  transform-origin: 50%;\n  box-sizing: border-box;\n  border: 4px solid var(--swiper-preloader-color, var(--swiper-theme-color));\n  border-radius: 50%;\n  border-top-color: transparent;\n}\n.swiper:not(.swiper-watch-progress) .swiper-lazy-preloader,\n.swiper-watch-progress .swiper-slide-visible .swiper-lazy-preloader {\n  animation: swiper-preloader-spin 1s infinite linear;\n}\n.swiper-lazy-preloader-white {\n  --swiper-preloader-color: #fff;\n}\n.swiper-lazy-preloader-black {\n  --swiper-preloader-color: #000;\n}\n@keyframes swiper-preloader-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n/* Slide styles end */\n",
            ],
            sourceRoot: '',
          },
        ]);
        // Exports
        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          ___CSS_LOADER_EXPORT___;

        /***/
      },

    /***/ './node_modules/css-loader/dist/cjs.js!./src/styles.css':
      /*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles.css ***!
  \**************************************************************/
      /***/ (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ './node_modules/css-loader/dist/runtime/sourceMaps.js',
          );
        /* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
          /*#__PURE__*/ __webpack_require__.n(
            _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
          );
        /* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../node_modules/css-loader/dist/runtime/api.js */ './node_modules/css-loader/dist/runtime/api.js',
          );
        /* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default =
          /*#__PURE__*/ __webpack_require__.n(
            _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          );
        // Imports

        var ___CSS_LOADER_EXPORT___ =
          _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()(
            _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        // Module
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          `.swiper {
  width: 80vw;
  height: 300px;
  margin: 0 auto;
}

.swiper-slide.portfolio-card {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  overflow: visible !important;
}

.swiper-slide.portfolio-card img {
  max-width: 80%;
  max-height: 200px;
  transform-origin: center;
  display: block;
  margin: 0 auto;
}

.swiper-slide.portfolio-card p {
  margin-top: 10px;
  font-size: 1.2rem;
  text-align: center;
}

.content-area {
  max-width: 80vw;
  margin: 20px auto;
  padding: 20px;
}

.content {
  display: none;
  opacity: 0;
}

.content.active {
  display: block;
  opacity: 1;
}

.content-inner {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.content-section {
  display: flex;
  align-items: flex-start;
  gap: 20px;
}

.content-img {
  max-width: 200px;
  max-height: 200px;
  flex-shrink: 0;
}

.content-text {
  flex: 1;
}

.content-text ul {
  margin: 0;
  padding-left: 20px;
  font-size: 1rem;
  line-height: 1.5;
}

.content-text ul ul {
  margin-top: 5px;
  padding-left: 20px;
}

h1,
h2,
h3 {
  text-align: center;
  margin: 10px 0;
}
`,
          '',
          {
            version: 3,
            sources: ['webpack://./src/styles.css'],
            names: [],
            mappings:
              'AAAA;EACE,WAAW;EACX,aAAa;EACb,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,4BAA4B;AAC9B;;AAEA;EACE,cAAc;EACd,iBAAiB;EACjB,wBAAwB;EACxB,cAAc;EACd,cAAc;AAChB;;AAEA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,UAAU;AACZ;;AAEA;EACE,cAAc;EACd,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,SAAS;AACX;;AAEA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,OAAO;AACT;;AAEA;EACE,SAAS;EACT,kBAAkB;EAClB,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB;;AAEA;;;EAGE,kBAAkB;EAClB,cAAc;AAChB',
            sourcesContent: [
              '.swiper {\n  width: 80vw;\n  height: 300px;\n  margin: 0 auto;\n}\n\n.swiper-slide.portfolio-card {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  overflow: visible !important;\n}\n\n.swiper-slide.portfolio-card img {\n  max-width: 80%;\n  max-height: 200px;\n  transform-origin: center;\n  display: block;\n  margin: 0 auto;\n}\n\n.swiper-slide.portfolio-card p {\n  margin-top: 10px;\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n.content-area {\n  max-width: 80vw;\n  margin: 20px auto;\n  padding: 20px;\n}\n\n.content {\n  display: none;\n  opacity: 0;\n}\n\n.content.active {\n  display: block;\n  opacity: 1;\n}\n\n.content-inner {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.content-section {\n  display: flex;\n  align-items: flex-start;\n  gap: 20px;\n}\n\n.content-img {\n  max-width: 200px;\n  max-height: 200px;\n  flex-shrink: 0;\n}\n\n.content-text {\n  flex: 1;\n}\n\n.content-text ul {\n  margin: 0;\n  padding-left: 20px;\n  font-size: 1rem;\n  line-height: 1.5;\n}\n\n.content-text ul ul {\n  margin-top: 5px;\n  padding-left: 20px;\n}\n\nh1,\nh2,\nh3 {\n  text-align: center;\n  margin: 10px 0;\n}\n',
            ],
            sourceRoot: '',
          },
        ]);
        // Exports
        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          ___CSS_LOADER_EXPORT___;

        /***/
      },

    /***/ './node_modules/css-loader/dist/runtime/api.js':
      /*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
      /***/ (module) => {
        /*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
        module.exports = function (cssWithMappingToString) {
          var list = [];

          // return the list of modules as css string
          list.toString = function toString() {
            return this.map(function (item) {
              var content = '';
              var needLayer = typeof item[5] !== 'undefined';
              if (item[4]) {
                content += '@supports ('.concat(item[4], ') {');
              }
              if (item[2]) {
                content += '@media '.concat(item[2], ' {');
              }
              if (needLayer) {
                content += '@layer'.concat(
                  item[5].length > 0 ? ' '.concat(item[5]) : '',
                  ' {',
                );
              }
              content += cssWithMappingToString(item);
              if (needLayer) {
                content += '}';
              }
              if (item[2]) {
                content += '}';
              }
              if (item[4]) {
                content += '}';
              }
              return content;
            }).join('');
          };

          // import a list of modules into the list
          list.i = function i(modules, media, dedupe, supports, layer) {
            if (typeof modules === 'string') {
              modules = [[null, modules, undefined]];
            }
            var alreadyImportedModules = {};
            if (dedupe) {
              for (var k = 0; k < this.length; k++) {
                var id = this[k][0];
                if (id != null) {
                  alreadyImportedModules[id] = true;
                }
              }
            }
            for (var _k = 0; _k < modules.length; _k++) {
              var item = [].concat(modules[_k]);
              if (dedupe && alreadyImportedModules[item[0]]) {
                continue;
              }
              if (typeof layer !== 'undefined') {
                if (typeof item[5] === 'undefined') {
                  item[5] = layer;
                } else {
                  item[1] = '@layer'
                    .concat(item[5].length > 0 ? ' '.concat(item[5]) : '', ' {')
                    .concat(item[1], '}');
                  item[5] = layer;
                }
              }
              if (media) {
                if (!item[2]) {
                  item[2] = media;
                } else {
                  item[1] = '@media '
                    .concat(item[2], ' {')
                    .concat(item[1], '}');
                  item[2] = media;
                }
              }
              if (supports) {
                if (!item[4]) {
                  item[4] = ''.concat(supports);
                } else {
                  item[1] = '@supports ('
                    .concat(item[4], ') {')
                    .concat(item[1], '}');
                  item[4] = supports;
                }
              }
              list.push(item);
            }
          };
          return list;
        };

        /***/
      },

    /***/ './node_modules/css-loader/dist/runtime/getUrl.js':
      /*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
      /***/ (module) => {
        module.exports = function (url, options) {
          if (!options) {
            options = {};
          }
          if (!url) {
            return url;
          }
          url = String(url.__esModule ? url.default : url);

          // If url is already wrapped in quotes, remove them
          if (/^['"].*['"]$/.test(url)) {
            url = url.slice(1, -1);
          }
          if (options.hash) {
            url += options.hash;
          }

          // Should url be wrapped?
          // See https://drafts.csswg.org/css-values-3/#urls
          if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
            return '"'.concat(
              url.replace(/"/g, '\\"').replace(/\n/g, '\\n'),
              '"',
            );
          }
          return url;
        };

        /***/
      },

    /***/ './node_modules/css-loader/dist/runtime/sourceMaps.js':
      /*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
      /***/ (module) => {
        module.exports = function (item) {
          var content = item[1];
          var cssMapping = item[3];
          if (!cssMapping) {
            return content;
          }
          if (typeof btoa === 'function') {
            var base64 = btoa(
              unescape(encodeURIComponent(JSON.stringify(cssMapping))),
            );
            var data =
              'sourceMappingURL=data:application/json;charset=utf-8;base64,'.concat(
                base64,
              );
            var sourceMapping = '/*# '.concat(data, ' */');
            return [content].concat([sourceMapping]).join('\n');
          }
          return [content].join('\n');
        };

        /***/
      },

    /***/ './node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js':
      /*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
      /***/ (module) => {
        var stylesInDOM = [];
        function getIndexByIdentifier(identifier) {
          var result = -1;
          for (var i = 0; i < stylesInDOM.length; i++) {
            if (stylesInDOM[i].identifier === identifier) {
              result = i;
              break;
            }
          }
          return result;
        }
        function modulesToDom(list, options) {
          var idCountMap = {};
          var identifiers = [];
          for (var i = 0; i < list.length; i++) {
            var item = list[i];
            var id = options.base ? item[0] + options.base : item[0];
            var count = idCountMap[id] || 0;
            var identifier = ''.concat(id, ' ').concat(count);
            idCountMap[id] = count + 1;
            var indexByIdentifier = getIndexByIdentifier(identifier);
            var obj = {
              css: item[1],
              media: item[2],
              sourceMap: item[3],
              supports: item[4],
              layer: item[5],
            };
            if (indexByIdentifier !== -1) {
              stylesInDOM[indexByIdentifier].references++;
              stylesInDOM[indexByIdentifier].updater(obj);
            } else {
              var updater = addElementStyle(obj, options);
              options.byIndex = i;
              stylesInDOM.splice(i, 0, {
                identifier: identifier,
                updater: updater,
                references: 1,
              });
            }
            identifiers.push(identifier);
          }
          return identifiers;
        }
        function addElementStyle(obj, options) {
          var api = options.domAPI(options);
          api.update(obj);
          var updater = function updater(newObj) {
            if (newObj) {
              if (
                newObj.css === obj.css &&
                newObj.media === obj.media &&
                newObj.sourceMap === obj.sourceMap &&
                newObj.supports === obj.supports &&
                newObj.layer === obj.layer
              ) {
                return;
              }
              api.update((obj = newObj));
            } else {
              api.remove();
            }
          };
          return updater;
        }
        module.exports = function (list, options) {
          options = options || {};
          list = list || [];
          var lastIdentifiers = modulesToDom(list, options);
          return function update(newList) {
            newList = newList || [];
            for (var i = 0; i < lastIdentifiers.length; i++) {
              var identifier = lastIdentifiers[i];
              var index = getIndexByIdentifier(identifier);
              stylesInDOM[index].references--;
            }
            var newLastIdentifiers = modulesToDom(newList, options);
            for (var _i = 0; _i < lastIdentifiers.length; _i++) {
              var _identifier = lastIdentifiers[_i];
              var _index = getIndexByIdentifier(_identifier);
              if (stylesInDOM[_index].references === 0) {
                stylesInDOM[_index].updater();
                stylesInDOM.splice(_index, 1);
              }
            }
            lastIdentifiers = newLastIdentifiers;
          };
        };

        /***/
      },

    /***/ './node_modules/style-loader/dist/runtime/insertBySelector.js':
      /*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
      /***/ (module) => {
        var memo = {};

        /* istanbul ignore next  */
        function getTarget(target) {
          if (typeof memo[target] === 'undefined') {
            var styleTarget = document.querySelector(target);

            // Special case to return head of iframe instead of iframe itself
            if (
              window.HTMLIFrameElement &&
              styleTarget instanceof window.HTMLIFrameElement
            ) {
              try {
                // This will throw an exception if access to iframe is blocked
                // due to cross-origin restrictions
                styleTarget = styleTarget.contentDocument.head;
              } catch (e) {
                // istanbul ignore next
                styleTarget = null;
              }
            }
            memo[target] = styleTarget;
          }
          return memo[target];
        }

        /* istanbul ignore next  */
        function insertBySelector(insert, style) {
          var target = getTarget(insert);
          if (!target) {
            throw new Error(
              "Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.",
            );
          }
          target.appendChild(style);
        }
        module.exports = insertBySelector;

        /***/
      },

    /***/ './node_modules/style-loader/dist/runtime/insertStyleElement.js':
      /*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
      /***/ (module) => {
        /* istanbul ignore next  */
        function insertStyleElement(options) {
          var element = document.createElement('style');
          options.setAttributes(element, options.attributes);
          options.insert(element, options.options);
          return element;
        }
        module.exports = insertStyleElement;

        /***/
      },

    /***/ './node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js':
      /*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        /* istanbul ignore next  */
        function setAttributesWithoutAttributes(styleElement) {
          var nonce = true ? __webpack_require__.nc : 0;
          if (nonce) {
            styleElement.setAttribute('nonce', nonce);
          }
        }
        module.exports = setAttributesWithoutAttributes;

        /***/
      },

    /***/ './node_modules/style-loader/dist/runtime/styleDomAPI.js':
      /*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
      /***/ (module) => {
        /* istanbul ignore next  */
        function apply(styleElement, options, obj) {
          var css = '';
          if (obj.supports) {
            css += '@supports ('.concat(obj.supports, ') {');
          }
          if (obj.media) {
            css += '@media '.concat(obj.media, ' {');
          }
          var needLayer = typeof obj.layer !== 'undefined';
          if (needLayer) {
            css += '@layer'.concat(
              obj.layer.length > 0 ? ' '.concat(obj.layer) : '',
              ' {',
            );
          }
          css += obj.css;
          if (needLayer) {
            css += '}';
          }
          if (obj.media) {
            css += '}';
          }
          if (obj.supports) {
            css += '}';
          }
          var sourceMap = obj.sourceMap;
          if (sourceMap && typeof btoa !== 'undefined') {
            css +=
              '\n/*# sourceMappingURL=data:application/json;base64,'.concat(
                btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))),
                ' */',
              );
          }

          // For old IE
          /* istanbul ignore if  */
          options.styleTagTransform(css, styleElement, options.options);
        }
        function removeStyleElement(styleElement) {
          // istanbul ignore if
          if (styleElement.parentNode === null) {
            return false;
          }
          styleElement.parentNode.removeChild(styleElement);
        }

        /* istanbul ignore next  */
        function domAPI(options) {
          if (typeof document === 'undefined') {
            return {
              update: function update() {},
              remove: function remove() {},
            };
          }
          var styleElement = options.insertStyleElement(options);
          return {
            update: function update(obj) {
              apply(styleElement, options, obj);
            },
            remove: function remove() {
              removeStyleElement(styleElement);
            },
          };
        }
        module.exports = domAPI;

        /***/
      },

    /***/ './node_modules/style-loader/dist/runtime/styleTagTransform.js':
      /*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
      /***/ (module) => {
        /* istanbul ignore next  */
        function styleTagTransform(css, styleElement) {
          if (styleElement.styleSheet) {
            styleElement.styleSheet.cssText = css;
          } else {
            while (styleElement.firstChild) {
              styleElement.removeChild(styleElement.firstChild);
            }
            styleElement.appendChild(document.createTextNode(css));
          }
        }
        module.exports = styleTagTransform;

        /***/
      },

    /***/ './node_modules/swiper/modules/a11y.mjs':
      /*!**********************************************!*\
  !*** ./node_modules/swiper/modules/a11y.mjs ***!
  \**********************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ A11y,
          /* harmony export */
        });
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ './node_modules/swiper/shared/ssr-window.esm.mjs',
          );
        /* harmony import */ var _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/classes-to-selector.mjs */ './node_modules/swiper/shared/classes-to-selector.mjs',
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function A11y(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            a11y: {
              enabled: true,
              notificationClass: 'swiper-notification',
              prevSlideMessage: 'Previous slide',
              nextSlideMessage: 'Next slide',
              firstSlideMessage: 'This is the first slide',
              lastSlideMessage: 'This is the last slide',
              paginationBulletMessage: 'Go to slide {{index}}',
              slideLabelMessage: '{{index}} / {{slidesLength}}',
              containerMessage: null,
              containerRoleDescriptionMessage: null,
              containerRole: null,
              itemRoleDescriptionMessage: null,
              slideRole: 'group',
              id: null,
              scrollOnFocus: true,
            },
          });
          swiper.a11y = {
            clicked: false,
          };
          let liveRegion = null;
          let preventFocusHandler;
          let focusTargetSlideEl;
          let visibilityChangedTimestamp = new Date().getTime();
          function notify(message) {
            const notification = liveRegion;
            if (notification.length === 0) return;
            (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.s)(
              notification,
              message,
            );
          }
          function getRandomNumber(size) {
            if (size === void 0) {
              size = 16;
            }
            const randomChar = () =>
              Math.round(16 * Math.random()).toString(16);
            return 'x'.repeat(size).replace(/x/g, randomChar);
          }
          function makeElFocusable(el) {
            el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);
            el.forEach((subEl) => {
              subEl.setAttribute('tabIndex', '0');
            });
          }
          function makeElNotFocusable(el) {
            el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);
            el.forEach((subEl) => {
              subEl.setAttribute('tabIndex', '-1');
            });
          }
          function addElRole(el, role) {
            el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);
            el.forEach((subEl) => {
              subEl.setAttribute('role', role);
            });
          }
          function addElRoleDescription(el, description) {
            el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);
            el.forEach((subEl) => {
              subEl.setAttribute('aria-roledescription', description);
            });
          }
          function addElControls(el, controls) {
            el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);
            el.forEach((subEl) => {
              subEl.setAttribute('aria-controls', controls);
            });
          }
          function addElLabel(el, label) {
            el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);
            el.forEach((subEl) => {
              subEl.setAttribute('aria-label', label);
            });
          }
          function addElId(el, id) {
            el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);
            el.forEach((subEl) => {
              subEl.setAttribute('id', id);
            });
          }
          function addElLive(el, live) {
            el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);
            el.forEach((subEl) => {
              subEl.setAttribute('aria-live', live);
            });
          }
          function disableEl(el) {
            el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);
            el.forEach((subEl) => {
              subEl.setAttribute('aria-disabled', true);
            });
          }
          function enableEl(el) {
            el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);
            el.forEach((subEl) => {
              subEl.setAttribute('aria-disabled', false);
            });
          }
          function onEnterOrSpaceKey(e) {
            if (e.keyCode !== 13 && e.keyCode !== 32) return;
            const params = swiper.params.a11y;
            const targetEl = e.target;
            if (
              swiper.pagination &&
              swiper.pagination.el &&
              (targetEl === swiper.pagination.el ||
                swiper.pagination.el.contains(e.target))
            ) {
              if (
                !e.target.matches(
                  (0,
                  _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(
                    swiper.params.pagination.bulletClass,
                  ),
                )
              )
                return;
            }
            if (
              swiper.navigation &&
              swiper.navigation.prevEl &&
              swiper.navigation.nextEl
            ) {
              const prevEls = (0,
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(
                swiper.navigation.prevEl,
              );
              const nextEls = (0,
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(
                swiper.navigation.nextEl,
              );
              if (nextEls.includes(targetEl)) {
                if (!(swiper.isEnd && !swiper.params.loop)) {
                  swiper.slideNext();
                }
                if (swiper.isEnd) {
                  notify(params.lastSlideMessage);
                } else {
                  notify(params.nextSlideMessage);
                }
              }
              if (prevEls.includes(targetEl)) {
                if (!(swiper.isBeginning && !swiper.params.loop)) {
                  swiper.slidePrev();
                }
                if (swiper.isBeginning) {
                  notify(params.firstSlideMessage);
                } else {
                  notify(params.prevSlideMessage);
                }
              }
            }
            if (
              swiper.pagination &&
              targetEl.matches(
                (0,
                _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(
                  swiper.params.pagination.bulletClass,
                ),
              )
            ) {
              targetEl.click();
            }
          }
          function updateNavigation() {
            if (
              swiper.params.loop ||
              swiper.params.rewind ||
              !swiper.navigation
            )
              return;
            const { nextEl, prevEl } = swiper.navigation;
            if (prevEl) {
              if (swiper.isBeginning) {
                disableEl(prevEl);
                makeElNotFocusable(prevEl);
              } else {
                enableEl(prevEl);
                makeElFocusable(prevEl);
              }
            }
            if (nextEl) {
              if (swiper.isEnd) {
                disableEl(nextEl);
                makeElNotFocusable(nextEl);
              } else {
                enableEl(nextEl);
                makeElFocusable(nextEl);
              }
            }
          }
          function hasPagination() {
            return (
              swiper.pagination &&
              swiper.pagination.bullets &&
              swiper.pagination.bullets.length
            );
          }
          function hasClickablePagination() {
            return hasPagination() && swiper.params.pagination.clickable;
          }
          function updatePagination() {
            const params = swiper.params.a11y;
            if (!hasPagination()) return;
            swiper.pagination.bullets.forEach((bulletEl) => {
              if (swiper.params.pagination.clickable) {
                makeElFocusable(bulletEl);
                if (!swiper.params.pagination.renderBullet) {
                  addElRole(bulletEl, 'button');
                  addElLabel(
                    bulletEl,
                    params.paginationBulletMessage.replace(
                      /\{\{index\}\}/,
                      (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.i)(
                        bulletEl,
                      ) + 1,
                    ),
                  );
                }
              }
              if (
                bulletEl.matches(
                  (0,
                  _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(
                    swiper.params.pagination.bulletActiveClass,
                  ),
                )
              ) {
                bulletEl.setAttribute('aria-current', 'true');
              } else {
                bulletEl.removeAttribute('aria-current');
              }
            });
          }
          const initNavEl = (el, wrapperId, message) => {
            makeElFocusable(el);
            if (el.tagName !== 'BUTTON') {
              addElRole(el, 'button');
              el.addEventListener('keydown', onEnterOrSpaceKey);
            }
            addElLabel(el, message);
            addElControls(el, wrapperId);
          };
          const handlePointerDown = (e) => {
            if (
              focusTargetSlideEl &&
              focusTargetSlideEl !== e.target &&
              !focusTargetSlideEl.contains(e.target)
            ) {
              preventFocusHandler = true;
            }
            swiper.a11y.clicked = true;
          };
          const handlePointerUp = () => {
            preventFocusHandler = false;
            requestAnimationFrame(() => {
              requestAnimationFrame(() => {
                if (!swiper.destroyed) {
                  swiper.a11y.clicked = false;
                }
              });
            });
          };
          const onVisibilityChange = (e) => {
            visibilityChangedTimestamp = new Date().getTime();
          };
          const handleFocus = (e) => {
            if (swiper.a11y.clicked || !swiper.params.a11y.scrollOnFocus)
              return;
            if (new Date().getTime() - visibilityChangedTimestamp < 100) return;
            const slideEl = e.target.closest(
              `.${swiper.params.slideClass}, swiper-slide`,
            );
            if (!slideEl || !swiper.slides.includes(slideEl)) return;
            focusTargetSlideEl = slideEl;
            const isActive =
              swiper.slides.indexOf(slideEl) === swiper.activeIndex;
            const isVisible =
              swiper.params.watchSlidesProgress &&
              swiper.visibleSlides &&
              swiper.visibleSlides.includes(slideEl);
            if (isActive || isVisible) return;
            if (e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents)
              return;
            if (swiper.isHorizontal()) {
              swiper.el.scrollLeft = 0;
            } else {
              swiper.el.scrollTop = 0;
            }
            requestAnimationFrame(() => {
              if (preventFocusHandler) return;
              if (swiper.params.loop) {
                swiper.slideToLoop(
                  swiper.getSlideIndexWhenGrid(
                    parseInt(slideEl.getAttribute('data-swiper-slide-index')),
                  ),
                  0,
                );
              } else {
                swiper.slideTo(
                  swiper.getSlideIndexWhenGrid(swiper.slides.indexOf(slideEl)),
                  0,
                );
              }
              preventFocusHandler = false;
            });
          };
          const initSlides = () => {
            const params = swiper.params.a11y;
            if (params.itemRoleDescriptionMessage) {
              addElRoleDescription(
                swiper.slides,
                params.itemRoleDescriptionMessage,
              );
            }
            if (params.slideRole) {
              addElRole(swiper.slides, params.slideRole);
            }
            const slidesLength = swiper.slides.length;
            if (params.slideLabelMessage) {
              swiper.slides.forEach((slideEl, index) => {
                const slideIndex = swiper.params.loop
                  ? parseInt(
                      slideEl.getAttribute('data-swiper-slide-index'),
                      10,
                    )
                  : index;
                const ariaLabelMessage = params.slideLabelMessage
                  .replace(/\{\{index\}\}/, slideIndex + 1)
                  .replace(/\{\{slidesLength\}\}/, slidesLength);
                addElLabel(slideEl, ariaLabelMessage);
              });
            }
          };
          const init = () => {
            const params = swiper.params.a11y;
            swiper.el.append(liveRegion);

            // Container
            const containerEl = swiper.el;
            if (params.containerRoleDescriptionMessage) {
              addElRoleDescription(
                containerEl,
                params.containerRoleDescriptionMessage,
              );
            }
            if (params.containerMessage) {
              addElLabel(containerEl, params.containerMessage);
            }
            if (params.containerRole) {
              addElRole(containerEl, params.containerRole);
            }

            // Wrapper
            const wrapperEl = swiper.wrapperEl;
            const wrapperId =
              params.id ||
              wrapperEl.getAttribute('id') ||
              `swiper-wrapper-${getRandomNumber(16)}`;
            const live =
              swiper.params.autoplay && swiper.params.autoplay.enabled
                ? 'off'
                : 'polite';
            addElId(wrapperEl, wrapperId);
            addElLive(wrapperEl, live);

            // Slide
            initSlides();

            // Navigation
            let { nextEl, prevEl } = swiper.navigation ? swiper.navigation : {};
            nextEl = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(
              nextEl,
            );
            prevEl = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(
              prevEl,
            );
            if (nextEl) {
              nextEl.forEach((el) =>
                initNavEl(el, wrapperId, params.nextSlideMessage),
              );
            }
            if (prevEl) {
              prevEl.forEach((el) =>
                initNavEl(el, wrapperId, params.prevSlideMessage),
              );
            }

            // Pagination
            if (hasClickablePagination()) {
              const paginationEl = (0,
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(
                swiper.pagination.el,
              );
              paginationEl.forEach((el) => {
                el.addEventListener('keydown', onEnterOrSpaceKey);
              });
            }

            // Tab focus
            const document = (0,
            _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();
            document.addEventListener('visibilitychange', onVisibilityChange);
            swiper.el.addEventListener('focus', handleFocus, true);
            swiper.el.addEventListener('focus', handleFocus, true);
            swiper.el.addEventListener('pointerdown', handlePointerDown, true);
            swiper.el.addEventListener('pointerup', handlePointerUp, true);
          };
          function destroy() {
            if (liveRegion) liveRegion.remove();
            let { nextEl, prevEl } = swiper.navigation ? swiper.navigation : {};
            nextEl = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(
              nextEl,
            );
            prevEl = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(
              prevEl,
            );
            if (nextEl) {
              nextEl.forEach((el) =>
                el.removeEventListener('keydown', onEnterOrSpaceKey),
              );
            }
            if (prevEl) {
              prevEl.forEach((el) =>
                el.removeEventListener('keydown', onEnterOrSpaceKey),
              );
            }

            // Pagination
            if (hasClickablePagination()) {
              const paginationEl = (0,
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(
                swiper.pagination.el,
              );
              paginationEl.forEach((el) => {
                el.removeEventListener('keydown', onEnterOrSpaceKey);
              });
            }
            const document = (0,
            _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();
            document.removeEventListener(
              'visibilitychange',
              onVisibilityChange,
            );
            // Tab focus
            if (swiper.el && typeof swiper.el !== 'string') {
              swiper.el.removeEventListener('focus', handleFocus, true);
              swiper.el.removeEventListener(
                'pointerdown',
                handlePointerDown,
                true,
              );
              swiper.el.removeEventListener('pointerup', handlePointerUp, true);
            }
          }
          on('beforeInit', () => {
            liveRegion = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(
              'span',
              swiper.params.a11y.notificationClass,
            );
            liveRegion.setAttribute('aria-live', 'assertive');
            liveRegion.setAttribute('aria-atomic', 'true');
          });
          on('afterInit', () => {
            if (!swiper.params.a11y.enabled) return;
            init();
          });
          on(
            'slidesLengthChange snapGridLengthChange slidesGridLengthChange',
            () => {
              if (!swiper.params.a11y.enabled) return;
              initSlides();
            },
          );
          on('fromEdge toEdge afterInit lock unlock', () => {
            if (!swiper.params.a11y.enabled) return;
            updateNavigation();
          });
          on('paginationUpdate', () => {
            if (!swiper.params.a11y.enabled) return;
            updatePagination();
          });
          on('destroy', () => {
            if (!swiper.params.a11y.enabled) return;
            destroy();
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/autoplay.mjs':
      /*!**************************************************!*\
  !*** ./node_modules/swiper/modules/autoplay.mjs ***!
  \**************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ Autoplay,
          /* harmony export */
        });
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ './node_modules/swiper/shared/ssr-window.esm.mjs',
          );

        /* eslint no-underscore-dangle: "off" */
        /* eslint no-use-before-define: "off" */
        function Autoplay(_ref) {
          let { swiper, extendParams, on, emit, params } = _ref;
          swiper.autoplay = {
            running: false,
            paused: false,
            timeLeft: 0,
          };
          extendParams({
            autoplay: {
              enabled: false,
              delay: 3000,
              waitForTransition: true,
              disableOnInteraction: false,
              stopOnLastSlide: false,
              reverseDirection: false,
              pauseOnMouseEnter: false,
            },
          });
          let timeout;
          let raf;
          let autoplayDelayTotal =
            params && params.autoplay ? params.autoplay.delay : 3000;
          let autoplayDelayCurrent =
            params && params.autoplay ? params.autoplay.delay : 3000;
          let autoplayTimeLeft;
          let autoplayStartTime = new Date().getTime();
          let wasPaused;
          let isTouched;
          let pausedByTouch;
          let touchStartTimeout;
          let slideChanged;
          let pausedByInteraction;
          let pausedByPointerEnter;
          function onTransitionEnd(e) {
            if (!swiper || swiper.destroyed || !swiper.wrapperEl) return;
            if (e.target !== swiper.wrapperEl) return;
            swiper.wrapperEl.removeEventListener(
              'transitionend',
              onTransitionEnd,
            );
            if (
              pausedByPointerEnter ||
              (e.detail && e.detail.bySwiperTouchMove)
            ) {
              return;
            }
            resume();
          }
          const calcTimeLeft = () => {
            if (swiper.destroyed || !swiper.autoplay.running) return;
            if (swiper.autoplay.paused) {
              wasPaused = true;
            } else if (wasPaused) {
              autoplayDelayCurrent = autoplayTimeLeft;
              wasPaused = false;
            }
            const timeLeft = swiper.autoplay.paused
              ? autoplayTimeLeft
              : autoplayStartTime + autoplayDelayCurrent - new Date().getTime();
            swiper.autoplay.timeLeft = timeLeft;
            emit('autoplayTimeLeft', timeLeft, timeLeft / autoplayDelayTotal);
            raf = requestAnimationFrame(() => {
              calcTimeLeft();
            });
          };
          const getSlideDelay = () => {
            let activeSlideEl;
            if (swiper.virtual && swiper.params.virtual.enabled) {
              activeSlideEl = swiper.slides.find((slideEl) =>
                slideEl.classList.contains('swiper-slide-active'),
              );
            } else {
              activeSlideEl = swiper.slides[swiper.activeIndex];
            }
            if (!activeSlideEl) return undefined;
            const currentSlideDelay = parseInt(
              activeSlideEl.getAttribute('data-swiper-autoplay'),
              10,
            );
            return currentSlideDelay;
          };
          const run = (delayForce) => {
            if (swiper.destroyed || !swiper.autoplay.running) return;
            cancelAnimationFrame(raf);
            calcTimeLeft();
            let delay =
              typeof delayForce === 'undefined'
                ? swiper.params.autoplay.delay
                : delayForce;
            autoplayDelayTotal = swiper.params.autoplay.delay;
            autoplayDelayCurrent = swiper.params.autoplay.delay;
            const currentSlideDelay = getSlideDelay();
            if (
              !Number.isNaN(currentSlideDelay) &&
              currentSlideDelay > 0 &&
              typeof delayForce === 'undefined'
            ) {
              delay = currentSlideDelay;
              autoplayDelayTotal = currentSlideDelay;
              autoplayDelayCurrent = currentSlideDelay;
            }
            autoplayTimeLeft = delay;
            const speed = swiper.params.speed;
            const proceed = () => {
              if (!swiper || swiper.destroyed) return;
              if (swiper.params.autoplay.reverseDirection) {
                if (
                  !swiper.isBeginning ||
                  swiper.params.loop ||
                  swiper.params.rewind
                ) {
                  swiper.slidePrev(speed, true, true);
                  emit('autoplay');
                } else if (!swiper.params.autoplay.stopOnLastSlide) {
                  swiper.slideTo(swiper.slides.length - 1, speed, true, true);
                  emit('autoplay');
                }
              } else {
                if (
                  !swiper.isEnd ||
                  swiper.params.loop ||
                  swiper.params.rewind
                ) {
                  swiper.slideNext(speed, true, true);
                  emit('autoplay');
                } else if (!swiper.params.autoplay.stopOnLastSlide) {
                  swiper.slideTo(0, speed, true, true);
                  emit('autoplay');
                }
              }
              if (swiper.params.cssMode) {
                autoplayStartTime = new Date().getTime();
                requestAnimationFrame(() => {
                  run();
                });
              }
            };
            if (delay > 0) {
              clearTimeout(timeout);
              timeout = setTimeout(() => {
                proceed();
              }, delay);
            } else {
              requestAnimationFrame(() => {
                proceed();
              });
            }

            // eslint-disable-next-line
            return delay;
          };
          const start = () => {
            autoplayStartTime = new Date().getTime();
            swiper.autoplay.running = true;
            run();
            emit('autoplayStart');
          };
          const stop = () => {
            swiper.autoplay.running = false;
            clearTimeout(timeout);
            cancelAnimationFrame(raf);
            emit('autoplayStop');
          };
          const pause = (internal, reset) => {
            if (swiper.destroyed || !swiper.autoplay.running) return;
            clearTimeout(timeout);
            if (!internal) {
              pausedByInteraction = true;
            }
            const proceed = () => {
              emit('autoplayPause');
              if (swiper.params.autoplay.waitForTransition) {
                swiper.wrapperEl.addEventListener(
                  'transitionend',
                  onTransitionEnd,
                );
              } else {
                resume();
              }
            };
            swiper.autoplay.paused = true;
            if (reset) {
              if (slideChanged) {
                autoplayTimeLeft = swiper.params.autoplay.delay;
              }
              slideChanged = false;
              proceed();
              return;
            }
            const delay = autoplayTimeLeft || swiper.params.autoplay.delay;
            autoplayTimeLeft =
              delay - (new Date().getTime() - autoplayStartTime);
            if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop)
              return;
            if (autoplayTimeLeft < 0) autoplayTimeLeft = 0;
            proceed();
          };
          const resume = () => {
            if (
              (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop) ||
              swiper.destroyed ||
              !swiper.autoplay.running
            )
              return;
            autoplayStartTime = new Date().getTime();
            if (pausedByInteraction) {
              pausedByInteraction = false;
              run(autoplayTimeLeft);
            } else {
              run();
            }
            swiper.autoplay.paused = false;
            emit('autoplayResume');
          };
          const onVisibilityChange = () => {
            if (swiper.destroyed || !swiper.autoplay.running) return;
            const document = (0,
            _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (document.visibilityState === 'hidden') {
              pausedByInteraction = true;
              pause(true);
            }
            if (document.visibilityState === 'visible') {
              resume();
            }
          };
          const onPointerEnter = (e) => {
            if (e.pointerType !== 'mouse') return;
            pausedByInteraction = true;
            pausedByPointerEnter = true;
            if (swiper.animating || swiper.autoplay.paused) return;
            pause(true);
          };
          const onPointerLeave = (e) => {
            if (e.pointerType !== 'mouse') return;
            pausedByPointerEnter = false;
            if (swiper.autoplay.paused) {
              resume();
            }
          };
          const attachMouseEvents = () => {
            if (swiper.params.autoplay.pauseOnMouseEnter) {
              swiper.el.addEventListener('pointerenter', onPointerEnter);
              swiper.el.addEventListener('pointerleave', onPointerLeave);
            }
          };
          const detachMouseEvents = () => {
            if (swiper.el && typeof swiper.el !== 'string') {
              swiper.el.removeEventListener('pointerenter', onPointerEnter);
              swiper.el.removeEventListener('pointerleave', onPointerLeave);
            }
          };
          const attachDocumentEvents = () => {
            const document = (0,
            _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();
            document.addEventListener('visibilitychange', onVisibilityChange);
          };
          const detachDocumentEvents = () => {
            const document = (0,
            _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();
            document.removeEventListener(
              'visibilitychange',
              onVisibilityChange,
            );
          };
          on('init', () => {
            if (swiper.params.autoplay.enabled) {
              attachMouseEvents();
              attachDocumentEvents();
              start();
            }
          });
          on('destroy', () => {
            detachMouseEvents();
            detachDocumentEvents();
            if (swiper.autoplay.running) {
              stop();
            }
          });
          on('_freeModeStaticRelease', () => {
            if (pausedByTouch || pausedByInteraction) {
              resume();
            }
          });
          on('_freeModeNoMomentumRelease', () => {
            if (!swiper.params.autoplay.disableOnInteraction) {
              pause(true, true);
            } else {
              stop();
            }
          });
          on('beforeTransitionStart', (_s, speed, internal) => {
            if (swiper.destroyed || !swiper.autoplay.running) return;
            if (internal || !swiper.params.autoplay.disableOnInteraction) {
              pause(true, true);
            } else {
              stop();
            }
          });
          on('sliderFirstMove', () => {
            if (swiper.destroyed || !swiper.autoplay.running) return;
            if (swiper.params.autoplay.disableOnInteraction) {
              stop();
              return;
            }
            isTouched = true;
            pausedByTouch = false;
            pausedByInteraction = false;
            touchStartTimeout = setTimeout(() => {
              pausedByInteraction = true;
              pausedByTouch = true;
              pause(true);
            }, 200);
          });
          on('touchEnd', () => {
            if (swiper.destroyed || !swiper.autoplay.running || !isTouched)
              return;
            clearTimeout(touchStartTimeout);
            clearTimeout(timeout);
            if (swiper.params.autoplay.disableOnInteraction) {
              pausedByTouch = false;
              isTouched = false;
              return;
            }
            if (pausedByTouch && swiper.params.cssMode) resume();
            pausedByTouch = false;
            isTouched = false;
          });
          on('slideChange', () => {
            if (swiper.destroyed || !swiper.autoplay.running) return;
            slideChanged = true;
          });
          Object.assign(swiper.autoplay, {
            start,
            stop,
            pause,
            resume,
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/controller.mjs':
      /*!****************************************************!*\
  !*** ./node_modules/swiper/modules/controller.mjs ***!
  \****************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ Controller,
          /* harmony export */
        });
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        /* eslint no-bitwise: ["error", { "allow": [">>"] }] */
        function Controller(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            controller: {
              control: undefined,
              inverse: false,
              by: 'slide', // or 'container'
            },
          });

          swiper.controller = {
            control: undefined,
          };
          function LinearSpline(x, y) {
            const binarySearch = (function search() {
              let maxIndex;
              let minIndex;
              let guess;
              return (array, val) => {
                minIndex = -1;
                maxIndex = array.length;
                while (maxIndex - minIndex > 1) {
                  guess = (maxIndex + minIndex) >> 1;
                  if (array[guess] <= val) {
                    minIndex = guess;
                  } else {
                    maxIndex = guess;
                  }
                }
                return maxIndex;
              };
            })();
            this.x = x;
            this.y = y;
            this.lastIndex = x.length - 1;
            // Given an x value (x2), return the expected y2 value:
            // (x1,y1) is the known point before given value,
            // (x3,y3) is the known point after given value.
            let i1;
            let i3;
            this.interpolate = function interpolate(x2) {
              if (!x2) return 0;

              // Get the indexes of x1 and x3 (the array indexes before and after given x2):
              i3 = binarySearch(this.x, x2);
              i1 = i3 - 1;

              // We have our indexes i1 & i3, so we can calculate already:
              // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1
              return (
                ((x2 - this.x[i1]) * (this.y[i3] - this.y[i1])) /
                  (this.x[i3] - this.x[i1]) +
                this.y[i1]
              );
            };
            return this;
          }
          function getInterpolateFunction(c) {
            swiper.controller.spline = swiper.params.loop
              ? new LinearSpline(swiper.slidesGrid, c.slidesGrid)
              : new LinearSpline(swiper.snapGrid, c.snapGrid);
          }
          function setTranslate(_t, byController) {
            const controlled = swiper.controller.control;
            let multiplier;
            let controlledTranslate;
            const Swiper = swiper.constructor;
            function setControlledTranslate(c) {
              if (c.destroyed) return;

              // this will create an Interpolate function based on the snapGrids
              // x is the Grid of the scrolled scroller and y will be the controlled scroller
              // it makes sense to create this only once and recall it for the interpolation
              // the function does a lot of value caching for performance
              const translate = swiper.rtlTranslate
                ? -swiper.translate
                : swiper.translate;
              if (swiper.params.controller.by === 'slide') {
                getInterpolateFunction(c);
                // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
                // but it did not work out
                controlledTranslate =
                  -swiper.controller.spline.interpolate(-translate);
              }
              if (
                !controlledTranslate ||
                swiper.params.controller.by === 'container'
              ) {
                multiplier =
                  (c.maxTranslate() - c.minTranslate()) /
                  (swiper.maxTranslate() - swiper.minTranslate());
                if (Number.isNaN(multiplier) || !Number.isFinite(multiplier)) {
                  multiplier = 1;
                }
                controlledTranslate =
                  (translate - swiper.minTranslate()) * multiplier +
                  c.minTranslate();
              }
              if (swiper.params.controller.inverse) {
                controlledTranslate = c.maxTranslate() - controlledTranslate;
              }
              c.updateProgress(controlledTranslate);
              c.setTranslate(controlledTranslate, swiper);
              c.updateActiveIndex();
              c.updateSlidesClasses();
            }
            if (Array.isArray(controlled)) {
              for (let i = 0; i < controlled.length; i += 1) {
                if (
                  controlled[i] !== byController &&
                  controlled[i] instanceof Swiper
                ) {
                  setControlledTranslate(controlled[i]);
                }
              }
            } else if (
              controlled instanceof Swiper &&
              byController !== controlled
            ) {
              setControlledTranslate(controlled);
            }
          }
          function setTransition(duration, byController) {
            const Swiper = swiper.constructor;
            const controlled = swiper.controller.control;
            let i;
            function setControlledTransition(c) {
              if (c.destroyed) return;
              c.setTransition(duration, swiper);
              if (duration !== 0) {
                c.transitionStart();
                if (c.params.autoHeight) {
                  (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(() => {
                    c.updateAutoHeight();
                  });
                }
                (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.l)(
                  c.wrapperEl,
                  () => {
                    if (!controlled) return;
                    c.transitionEnd();
                  },
                );
              }
            }
            if (Array.isArray(controlled)) {
              for (i = 0; i < controlled.length; i += 1) {
                if (
                  controlled[i] !== byController &&
                  controlled[i] instanceof Swiper
                ) {
                  setControlledTransition(controlled[i]);
                }
              }
            } else if (
              controlled instanceof Swiper &&
              byController !== controlled
            ) {
              setControlledTransition(controlled);
            }
          }
          function removeSpline() {
            if (!swiper.controller.control) return;
            if (swiper.controller.spline) {
              swiper.controller.spline = undefined;
              delete swiper.controller.spline;
            }
          }
          on('beforeInit', () => {
            if (
              typeof window !== 'undefined' &&
              // eslint-disable-line
              (typeof swiper.params.controller.control === 'string' ||
                swiper.params.controller.control instanceof HTMLElement)
            ) {
              const controlElements =
                typeof swiper.params.controller.control === 'string'
                  ? [
                      ...document.querySelectorAll(
                        swiper.params.controller.control,
                      ),
                    ]
                  : [swiper.params.controller.control];
              controlElements.forEach((controlElement) => {
                if (!swiper.controller.control) swiper.controller.control = [];
                if (controlElement && controlElement.swiper) {
                  swiper.controller.control.push(controlElement.swiper);
                } else if (controlElement) {
                  const eventName = `${swiper.params.eventsPrefix}init`;
                  const onControllerSwiper = (e) => {
                    swiper.controller.control.push(e.detail[0]);
                    swiper.update();
                    controlElement.removeEventListener(
                      eventName,
                      onControllerSwiper,
                    );
                  };
                  controlElement.addEventListener(
                    eventName,
                    onControllerSwiper,
                  );
                }
              });
              return;
            }
            swiper.controller.control = swiper.params.controller.control;
          });
          on('update', () => {
            removeSpline();
          });
          on('resize', () => {
            removeSpline();
          });
          on('observerUpdate', () => {
            removeSpline();
          });
          on('setTranslate', (_s, translate, byController) => {
            if (
              !swiper.controller.control ||
              swiper.controller.control.destroyed
            )
              return;
            swiper.controller.setTranslate(translate, byController);
          });
          on('setTransition', (_s, duration, byController) => {
            if (
              !swiper.controller.control ||
              swiper.controller.control.destroyed
            )
              return;
            swiper.controller.setTransition(duration, byController);
          });
          Object.assign(swiper.controller, {
            setTranslate,
            setTransition,
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/effect-cards.mjs':
      /*!******************************************************!*\
  !*** ./node_modules/swiper/modules/effect-cards.mjs ***!
  \******************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ EffectCards,
          /* harmony export */
        });
        /* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/create-shadow.mjs */ './node_modules/swiper/shared/create-shadow.mjs',
          );
        /* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/effect-init.mjs */ './node_modules/swiper/shared/effect-init.mjs',
          );
        /* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../shared/effect-target.mjs */ './node_modules/swiper/shared/effect-target.mjs',
          );
        /* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../shared/effect-virtual-transition-end.mjs */ './node_modules/swiper/shared/effect-virtual-transition-end.mjs',
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function EffectCards(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            cardsEffect: {
              slideShadows: true,
              rotate: true,
              perSlideRotate: 2,
              perSlideOffset: 8,
            },
          });
          const setTranslate = () => {
            const { slides, activeIndex, rtlTranslate: rtl } = swiper;
            const params = swiper.params.cardsEffect;
            const { startTranslate, isTouched } = swiper.touchEventsData;
            const currentTranslate = rtl ? -swiper.translate : swiper.translate;
            for (let i = 0; i < slides.length; i += 1) {
              const slideEl = slides[i];
              const slideProgress = slideEl.progress;
              const progress = Math.min(Math.max(slideProgress, -4), 4);
              let offset = slideEl.swiperSlideOffset;
              if (swiper.params.centeredSlides && !swiper.params.cssMode) {
                swiper.wrapperEl.style.transform = `translateX(${swiper.minTranslate()}px)`;
              }
              if (swiper.params.centeredSlides && swiper.params.cssMode) {
                offset -= slides[0].swiperSlideOffset;
              }
              let tX = swiper.params.cssMode
                ? -offset - swiper.translate
                : -offset;
              let tY = 0;
              const tZ = -100 * Math.abs(progress);
              let scale = 1;
              let rotate = -params.perSlideRotate * progress;
              let tXAdd = params.perSlideOffset - Math.abs(progress) * 0.75;
              const slideIndex =
                swiper.virtual && swiper.params.virtual.enabled
                  ? swiper.virtual.from + i
                  : i;
              const isSwipeToNext =
                (slideIndex === activeIndex ||
                  slideIndex === activeIndex - 1) &&
                progress > 0 &&
                progress < 1 &&
                (isTouched || swiper.params.cssMode) &&
                currentTranslate < startTranslate;
              const isSwipeToPrev =
                (slideIndex === activeIndex ||
                  slideIndex === activeIndex + 1) &&
                progress < 0 &&
                progress > -1 &&
                (isTouched || swiper.params.cssMode) &&
                currentTranslate > startTranslate;
              if (isSwipeToNext || isSwipeToPrev) {
                const subProgress =
                  (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;
                rotate += -28 * progress * subProgress;
                scale += -0.5 * subProgress;
                tXAdd += 96 * subProgress;
                tY = `${-25 * subProgress * Math.abs(progress)}%`;
              }
              if (progress < 0) {
                // next
                tX = `calc(${tX}px ${rtl ? '-' : '+'} (${tXAdd * Math.abs(progress)}%))`;
              } else if (progress > 0) {
                // prev
                tX = `calc(${tX}px ${rtl ? '-' : '+'} (-${tXAdd * Math.abs(progress)}%))`;
              } else {
                tX = `${tX}px`;
              }
              if (!swiper.isHorizontal()) {
                const prevY = tY;
                tY = tX;
                tX = prevY;
              }
              const scaleString =
                progress < 0
                  ? `${1 + (1 - scale) * progress}`
                  : `${1 - (1 - scale) * progress}`;

              /* eslint-disable */
              const transform = `
        translate3d(${tX}, ${tY}, ${tZ}px)
        rotateZ(${params.rotate ? (rtl ? -rotate : rotate) : 0}deg)
        scale(${scaleString})
      `;
              /* eslint-enable */

              if (params.slideShadows) {
                // Set shadows
                let shadowEl = slideEl.querySelector('.swiper-slide-shadow');
                if (!shadowEl) {
                  shadowEl = (0,
                  _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(
                    'cards',
                    slideEl,
                  );
                }
                if (shadowEl)
                  shadowEl.style.opacity = Math.min(
                    Math.max((Math.abs(progress) - 0.5) / 0.5, 0),
                    1,
                  );
              }
              slideEl.style.zIndex =
                -Math.abs(Math.round(slideProgress)) + slides.length;
              const targetEl = (0,
              _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(
                params,
                slideEl,
              );
              targetEl.style.transform = transform;
            }
          };
          const setTransition = (duration) => {
            const transformElements = swiper.slides.map((slideEl) =>
              (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(slideEl),
            );
            transformElements.forEach((el) => {
              el.style.transitionDuration = `${duration}ms`;
              el.querySelectorAll('.swiper-slide-shadow').forEach(
                (shadowEl) => {
                  shadowEl.style.transitionDuration = `${duration}ms`;
                },
              );
            });
            (0,
            _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(
              {
                swiper,
                duration,
                transformElements,
              },
            );
          };
          (0, _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({
            effect: 'cards',
            swiper,
            on,
            setTranslate,
            setTransition,
            perspective: () => true,
            overwriteParams: () => ({
              _loopSwapReset: false,
              watchSlidesProgress: true,
              loopAdditionalSlides: swiper.params.cardsEffect.rotate ? 3 : 2,
              centeredSlides: true,
              virtualTranslate: !swiper.params.cssMode,
            }),
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/effect-coverflow.mjs':
      /*!**********************************************************!*\
  !*** ./node_modules/swiper/modules/effect-coverflow.mjs ***!
  \**********************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ EffectCoverflow,
          /* harmony export */
        });
        /* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/create-shadow.mjs */ './node_modules/swiper/shared/create-shadow.mjs',
          );
        /* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/effect-init.mjs */ './node_modules/swiper/shared/effect-init.mjs',
          );
        /* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../shared/effect-target.mjs */ './node_modules/swiper/shared/effect-target.mjs',
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function EffectCoverflow(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            coverflowEffect: {
              rotate: 50,
              stretch: 0,
              depth: 100,
              scale: 1,
              modifier: 1,
              slideShadows: true,
            },
          });
          const setTranslate = () => {
            const {
              width: swiperWidth,
              height: swiperHeight,
              slides,
              slidesSizesGrid,
            } = swiper;
            const params = swiper.params.coverflowEffect;
            const isHorizontal = swiper.isHorizontal();
            const transform = swiper.translate;
            const center = isHorizontal
              ? -transform + swiperWidth / 2
              : -transform + swiperHeight / 2;
            const rotate = isHorizontal ? params.rotate : -params.rotate;
            const translate = params.depth;
            const r = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.p)(
              swiper,
            );
            // Each slide offset from center
            for (let i = 0, length = slides.length; i < length; i += 1) {
              const slideEl = slides[i];
              const slideSize = slidesSizesGrid[i];
              const slideOffset = slideEl.swiperSlideOffset;
              const centerOffset =
                (center - slideOffset - slideSize / 2) / slideSize;
              const offsetMultiplier =
                typeof params.modifier === 'function'
                  ? params.modifier(centerOffset)
                  : centerOffset * params.modifier;
              let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;
              let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;
              // var rotateZ = 0
              let translateZ = -translate * Math.abs(offsetMultiplier);
              let stretch = params.stretch;
              // Allow percentage to make a relative stretch for responsive sliders
              if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {
                stretch = (parseFloat(params.stretch) / 100) * slideSize;
              }
              let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;
              let translateX = isHorizontal ? stretch * offsetMultiplier : 0;
              let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier);

              // Fix for ultra small values
              if (Math.abs(translateX) < 0.001) translateX = 0;
              if (Math.abs(translateY) < 0.001) translateY = 0;
              if (Math.abs(translateZ) < 0.001) translateZ = 0;
              if (Math.abs(rotateY) < 0.001) rotateY = 0;
              if (Math.abs(rotateX) < 0.001) rotateX = 0;
              if (Math.abs(scale) < 0.001) scale = 0;
              const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${r(rotateX)}deg) rotateY(${r(rotateY)}deg) scale(${scale})`;
              const targetEl = (0,
              _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(
                params,
                slideEl,
              );
              targetEl.style.transform = slideTransform;
              slideEl.style.zIndex =
                -Math.abs(Math.round(offsetMultiplier)) + 1;
              if (params.slideShadows) {
                // Set shadows
                let shadowBeforeEl = isHorizontal
                  ? slideEl.querySelector('.swiper-slide-shadow-left')
                  : slideEl.querySelector('.swiper-slide-shadow-top');
                let shadowAfterEl = isHorizontal
                  ? slideEl.querySelector('.swiper-slide-shadow-right')
                  : slideEl.querySelector('.swiper-slide-shadow-bottom');
                if (!shadowBeforeEl) {
                  shadowBeforeEl = (0,
                  _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(
                    'coverflow',
                    slideEl,
                    isHorizontal ? 'left' : 'top',
                  );
                }
                if (!shadowAfterEl) {
                  shadowAfterEl = (0,
                  _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(
                    'coverflow',
                    slideEl,
                    isHorizontal ? 'right' : 'bottom',
                  );
                }
                if (shadowBeforeEl)
                  shadowBeforeEl.style.opacity =
                    offsetMultiplier > 0 ? offsetMultiplier : 0;
                if (shadowAfterEl)
                  shadowAfterEl.style.opacity =
                    -offsetMultiplier > 0 ? -offsetMultiplier : 0;
              }
            }
          };
          const setTransition = (duration) => {
            const transformElements = swiper.slides.map((slideEl) =>
              (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.g)(slideEl),
            );
            transformElements.forEach((el) => {
              el.style.transitionDuration = `${duration}ms`;
              el.querySelectorAll(
                '.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left',
              ).forEach((shadowEl) => {
                shadowEl.style.transitionDuration = `${duration}ms`;
              });
            });
          };
          (0, _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({
            effect: 'coverflow',
            swiper,
            on,
            setTranslate,
            setTransition,
            perspective: () => true,
            overwriteParams: () => ({
              watchSlidesProgress: true,
            }),
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/effect-creative.mjs':
      /*!*********************************************************!*\
  !*** ./node_modules/swiper/modules/effect-creative.mjs ***!
  \*********************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ EffectCreative,
          /* harmony export */
        });
        /* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/create-shadow.mjs */ './node_modules/swiper/shared/create-shadow.mjs',
          );
        /* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/effect-init.mjs */ './node_modules/swiper/shared/effect-init.mjs',
          );
        /* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../shared/effect-target.mjs */ './node_modules/swiper/shared/effect-target.mjs',
          );
        /* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../shared/effect-virtual-transition-end.mjs */ './node_modules/swiper/shared/effect-virtual-transition-end.mjs',
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function EffectCreative(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            creativeEffect: {
              limitProgress: 1,
              shadowPerProgress: false,
              progressMultiplier: 1,
              perspective: true,
              prev: {
                translate: [0, 0, 0],
                rotate: [0, 0, 0],
                opacity: 1,
                scale: 1,
              },
              next: {
                translate: [0, 0, 0],
                rotate: [0, 0, 0],
                opacity: 1,
                scale: 1,
              },
            },
          });
          const getTranslateValue = (value) => {
            if (typeof value === 'string') return value;
            return `${value}px`;
          };
          const setTranslate = () => {
            const { slides, wrapperEl, slidesSizesGrid } = swiper;
            const params = swiper.params.creativeEffect;
            const { progressMultiplier: multiplier } = params;
            const isCenteredSlides = swiper.params.centeredSlides;
            const rotateFix = (0,
            _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.p)(swiper);
            if (isCenteredSlides) {
              const margin =
                slidesSizesGrid[0] / 2 - swiper.params.slidesOffsetBefore || 0;
              wrapperEl.style.transform = `translateX(calc(50% - ${margin}px))`;
            }
            for (let i = 0; i < slides.length; i += 1) {
              const slideEl = slides[i];
              const slideProgress = slideEl.progress;
              const progress = Math.min(
                Math.max(slideEl.progress, -params.limitProgress),
                params.limitProgress,
              );
              let originalProgress = progress;
              if (!isCenteredSlides) {
                originalProgress = Math.min(
                  Math.max(slideEl.originalProgress, -params.limitProgress),
                  params.limitProgress,
                );
              }
              const offset = slideEl.swiperSlideOffset;
              const t = [
                swiper.params.cssMode ? -offset - swiper.translate : -offset,
                0,
                0,
              ];
              const r = [0, 0, 0];
              let custom = false;
              if (!swiper.isHorizontal()) {
                t[1] = t[0];
                t[0] = 0;
              }
              let data = {
                translate: [0, 0, 0],
                rotate: [0, 0, 0],
                scale: 1,
                opacity: 1,
              };
              if (progress < 0) {
                data = params.next;
                custom = true;
              } else if (progress > 0) {
                data = params.prev;
                custom = true;
              }
              // set translate
              t.forEach((value, index) => {
                t[index] =
                  `calc(${value}px + (${getTranslateValue(data.translate[index])} * ${Math.abs(progress * multiplier)}))`;
              });
              // set rotates
              r.forEach((value, index) => {
                let val = data.rotate[index] * Math.abs(progress * multiplier);
                r[index] = val;
              });
              slideEl.style.zIndex =
                -Math.abs(Math.round(slideProgress)) + slides.length;
              const translateString = t.join(', ');
              const rotateString = `rotateX(${rotateFix(r[0])}deg) rotateY(${rotateFix(r[1])}deg) rotateZ(${rotateFix(r[2])}deg)`;
              const scaleString =
                originalProgress < 0
                  ? `scale(${1 + (1 - data.scale) * originalProgress * multiplier})`
                  : `scale(${1 - (1 - data.scale) * originalProgress * multiplier})`;
              const opacityString =
                originalProgress < 0
                  ? 1 + (1 - data.opacity) * originalProgress * multiplier
                  : 1 - (1 - data.opacity) * originalProgress * multiplier;
              const transform = `translate3d(${translateString}) ${rotateString} ${scaleString}`;

              // Set shadows
              if ((custom && data.shadow) || !custom) {
                let shadowEl = slideEl.querySelector('.swiper-slide-shadow');
                if (!shadowEl && data.shadow) {
                  shadowEl = (0,
                  _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(
                    'creative',
                    slideEl,
                  );
                }
                if (shadowEl) {
                  const shadowOpacity = params.shadowPerProgress
                    ? progress * (1 / params.limitProgress)
                    : progress;
                  shadowEl.style.opacity = Math.min(
                    Math.max(Math.abs(shadowOpacity), 0),
                    1,
                  );
                }
              }
              const targetEl = (0,
              _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(
                params,
                slideEl,
              );
              targetEl.style.transform = transform;
              targetEl.style.opacity = opacityString;
              if (data.origin) {
                targetEl.style.transformOrigin = data.origin;
              }
            }
          };
          const setTransition = (duration) => {
            const transformElements = swiper.slides.map((slideEl) =>
              (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(slideEl),
            );
            transformElements.forEach((el) => {
              el.style.transitionDuration = `${duration}ms`;
              el.querySelectorAll('.swiper-slide-shadow').forEach(
                (shadowEl) => {
                  shadowEl.style.transitionDuration = `${duration}ms`;
                },
              );
            });
            (0,
            _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(
              {
                swiper,
                duration,
                transformElements,
                allSlides: true,
              },
            );
          };
          (0, _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({
            effect: 'creative',
            swiper,
            on,
            setTranslate,
            setTransition,
            perspective: () => swiper.params.creativeEffect.perspective,
            overwriteParams: () => ({
              watchSlidesProgress: true,
              virtualTranslate: !swiper.params.cssMode,
            }),
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/effect-cube.mjs':
      /*!*****************************************************!*\
  !*** ./node_modules/swiper/modules/effect-cube.mjs ***!
  \*****************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ EffectCube,
          /* harmony export */
        });
        /* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/effect-init.mjs */ './node_modules/swiper/shared/effect-init.mjs',
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function EffectCube(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            cubeEffect: {
              slideShadows: true,
              shadow: true,
              shadowOffset: 20,
              shadowScale: 0.94,
            },
          });
          const createSlideShadows = (slideEl, progress, isHorizontal) => {
            let shadowBefore = isHorizontal
              ? slideEl.querySelector('.swiper-slide-shadow-left')
              : slideEl.querySelector('.swiper-slide-shadow-top');
            let shadowAfter = isHorizontal
              ? slideEl.querySelector('.swiper-slide-shadow-right')
              : slideEl.querySelector('.swiper-slide-shadow-bottom');
            if (!shadowBefore) {
              shadowBefore = (0,
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(
                'div',
                `swiper-slide-shadow-cube swiper-slide-shadow-${isHorizontal ? 'left' : 'top'}`.split(
                  ' ',
                ),
              );
              slideEl.append(shadowBefore);
            }
            if (!shadowAfter) {
              shadowAfter = (0,
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(
                'div',
                `swiper-slide-shadow-cube swiper-slide-shadow-${isHorizontal ? 'right' : 'bottom'}`.split(
                  ' ',
                ),
              );
              slideEl.append(shadowAfter);
            }
            if (shadowBefore)
              shadowBefore.style.opacity = Math.max(-progress, 0);
            if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);
          };
          const recreateShadows = () => {
            // create new ones
            const isHorizontal = swiper.isHorizontal();
            swiper.slides.forEach((slideEl) => {
              const progress = Math.max(Math.min(slideEl.progress, 1), -1);
              createSlideShadows(slideEl, progress, isHorizontal);
            });
          };
          const setTranslate = () => {
            const {
              el,
              wrapperEl,
              slides,
              width: swiperWidth,
              height: swiperHeight,
              rtlTranslate: rtl,
              size: swiperSize,
              browser,
            } = swiper;
            const r = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.p)(
              swiper,
            );
            const params = swiper.params.cubeEffect;
            const isHorizontal = swiper.isHorizontal();
            const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
            let wrapperRotate = 0;
            let cubeShadowEl;
            if (params.shadow) {
              if (isHorizontal) {
                cubeShadowEl = swiper.wrapperEl.querySelector(
                  '.swiper-cube-shadow',
                );
                if (!cubeShadowEl) {
                  cubeShadowEl = (0,
                  _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(
                    'div',
                    'swiper-cube-shadow',
                  );
                  swiper.wrapperEl.append(cubeShadowEl);
                }
                cubeShadowEl.style.height = `${swiperWidth}px`;
              } else {
                cubeShadowEl = el.querySelector('.swiper-cube-shadow');
                if (!cubeShadowEl) {
                  cubeShadowEl = (0,
                  _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(
                    'div',
                    'swiper-cube-shadow',
                  );
                  el.append(cubeShadowEl);
                }
              }
            }
            for (let i = 0; i < slides.length; i += 1) {
              const slideEl = slides[i];
              let slideIndex = i;
              if (isVirtual) {
                slideIndex = parseInt(
                  slideEl.getAttribute('data-swiper-slide-index'),
                  10,
                );
              }
              let slideAngle = slideIndex * 90;
              let round = Math.floor(slideAngle / 360);
              if (rtl) {
                slideAngle = -slideAngle;
                round = Math.floor(-slideAngle / 360);
              }
              const progress = Math.max(Math.min(slideEl.progress, 1), -1);
              let tx = 0;
              let ty = 0;
              let tz = 0;
              if (slideIndex % 4 === 0) {
                tx = -round * 4 * swiperSize;
                tz = 0;
              } else if ((slideIndex - 1) % 4 === 0) {
                tx = 0;
                tz = -round * 4 * swiperSize;
              } else if ((slideIndex - 2) % 4 === 0) {
                tx = swiperSize + round * 4 * swiperSize;
                tz = swiperSize;
              } else if ((slideIndex - 3) % 4 === 0) {
                tx = -swiperSize;
                tz = 3 * swiperSize + swiperSize * 4 * round;
              }
              if (rtl) {
                tx = -tx;
              }
              if (!isHorizontal) {
                ty = tx;
                tx = 0;
              }
              const transform = `rotateX(${r(isHorizontal ? 0 : -slideAngle)}deg) rotateY(${r(isHorizontal ? slideAngle : 0)}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;
              if (progress <= 1 && progress > -1) {
                wrapperRotate = slideIndex * 90 + progress * 90;
                if (rtl) wrapperRotate = -slideIndex * 90 - progress * 90;
              }
              slideEl.style.transform = transform;
              if (params.slideShadows) {
                createSlideShadows(slideEl, progress, isHorizontal);
              }
            }
            wrapperEl.style.transformOrigin = `50% 50% -${swiperSize / 2}px`;
            wrapperEl.style['-webkit-transform-origin'] =
              `50% 50% -${swiperSize / 2}px`;
            if (params.shadow) {
              if (isHorizontal) {
                cubeShadowEl.style.transform = `translate3d(0px, ${swiperWidth / 2 + params.shadowOffset}px, ${-swiperWidth / 2}px) rotateX(89.99deg) rotateZ(0deg) scale(${params.shadowScale})`;
              } else {
                const shadowAngle =
                  Math.abs(wrapperRotate) -
                  Math.floor(Math.abs(wrapperRotate) / 90) * 90;
                const multiplier =
                  1.5 -
                  (Math.sin((shadowAngle * 2 * Math.PI) / 360) / 2 +
                    Math.cos((shadowAngle * 2 * Math.PI) / 360) / 2);
                const scale1 = params.shadowScale;
                const scale2 = params.shadowScale / multiplier;
                const offset = params.shadowOffset;
                cubeShadowEl.style.transform = `scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${swiperHeight / 2 + offset}px, ${-swiperHeight / 2 / scale2}px) rotateX(-89.99deg)`;
              }
            }
            const zFactor =
              (browser.isSafari || browser.isWebView) &&
              browser.needPerspectiveFix
                ? -swiperSize / 2
                : 0;
            wrapperEl.style.transform = `translate3d(0px,0,${zFactor}px) rotateX(${r(swiper.isHorizontal() ? 0 : wrapperRotate)}deg) rotateY(${r(swiper.isHorizontal() ? -wrapperRotate : 0)}deg)`;
            wrapperEl.style.setProperty(
              '--swiper-cube-translate-z',
              `${zFactor}px`,
            );
          };
          const setTransition = (duration) => {
            const { el, slides } = swiper;
            slides.forEach((slideEl) => {
              slideEl.style.transitionDuration = `${duration}ms`;
              slideEl
                .querySelectorAll(
                  '.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left',
                )
                .forEach((subEl) => {
                  subEl.style.transitionDuration = `${duration}ms`;
                });
            });
            if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {
              const shadowEl = el.querySelector('.swiper-cube-shadow');
              if (shadowEl) shadowEl.style.transitionDuration = `${duration}ms`;
            }
          };
          (0, _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__.e)({
            effect: 'cube',
            swiper,
            on,
            setTranslate,
            setTransition,
            recreateShadows,
            getEffectParams: () => swiper.params.cubeEffect,
            perspective: () => true,
            overwriteParams: () => ({
              slidesPerView: 1,
              slidesPerGroup: 1,
              watchSlidesProgress: true,
              resistanceRatio: 0,
              spaceBetween: 0,
              centeredSlides: false,
              virtualTranslate: true,
            }),
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/effect-fade.mjs':
      /*!*****************************************************!*\
  !*** ./node_modules/swiper/modules/effect-fade.mjs ***!
  \*****************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ EffectFade,
          /* harmony export */
        });
        /* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/effect-init.mjs */ './node_modules/swiper/shared/effect-init.mjs',
          );
        /* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/effect-target.mjs */ './node_modules/swiper/shared/effect-target.mjs',
          );
        /* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../shared/effect-virtual-transition-end.mjs */ './node_modules/swiper/shared/effect-virtual-transition-end.mjs',
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function EffectFade(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            fadeEffect: {
              crossFade: false,
            },
          });
          const setTranslate = () => {
            const { slides } = swiper;
            const params = swiper.params.fadeEffect;
            for (let i = 0; i < slides.length; i += 1) {
              const slideEl = swiper.slides[i];
              const offset = slideEl.swiperSlideOffset;
              let tx = -offset;
              if (!swiper.params.virtualTranslate) tx -= swiper.translate;
              let ty = 0;
              if (!swiper.isHorizontal()) {
                ty = tx;
                tx = 0;
              }
              const slideOpacity = swiper.params.fadeEffect.crossFade
                ? Math.max(1 - Math.abs(slideEl.progress), 0)
                : 1 + Math.min(Math.max(slideEl.progress, -1), 0);
              const targetEl = (0,
              _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(
                params,
                slideEl,
              );
              targetEl.style.opacity = slideOpacity;
              targetEl.style.transform = `translate3d(${tx}px, ${ty}px, 0px)`;
            }
          };
          const setTransition = (duration) => {
            const transformElements = swiper.slides.map((slideEl) =>
              (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.g)(slideEl),
            );
            transformElements.forEach((el) => {
              el.style.transitionDuration = `${duration}ms`;
            });
            (0,
            _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(
              {
                swiper,
                duration,
                transformElements,
                allSlides: true,
              },
            );
          };
          (0, _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__.e)({
            effect: 'fade',
            swiper,
            on,
            setTranslate,
            setTransition,
            overwriteParams: () => ({
              slidesPerView: 1,
              slidesPerGroup: 1,
              watchSlidesProgress: true,
              spaceBetween: 0,
              virtualTranslate: !swiper.params.cssMode,
            }),
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/effect-flip.mjs':
      /*!*****************************************************!*\
  !*** ./node_modules/swiper/modules/effect-flip.mjs ***!
  \*****************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ EffectFlip,
          /* harmony export */
        });
        /* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/create-shadow.mjs */ './node_modules/swiper/shared/create-shadow.mjs',
          );
        /* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/effect-init.mjs */ './node_modules/swiper/shared/effect-init.mjs',
          );
        /* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../shared/effect-target.mjs */ './node_modules/swiper/shared/effect-target.mjs',
          );
        /* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../shared/effect-virtual-transition-end.mjs */ './node_modules/swiper/shared/effect-virtual-transition-end.mjs',
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function EffectFlip(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            flipEffect: {
              slideShadows: true,
              limitRotation: true,
            },
          });
          const createSlideShadows = (slideEl, progress) => {
            let shadowBefore = swiper.isHorizontal()
              ? slideEl.querySelector('.swiper-slide-shadow-left')
              : slideEl.querySelector('.swiper-slide-shadow-top');
            let shadowAfter = swiper.isHorizontal()
              ? slideEl.querySelector('.swiper-slide-shadow-right')
              : slideEl.querySelector('.swiper-slide-shadow-bottom');
            if (!shadowBefore) {
              shadowBefore = (0,
              _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(
                'flip',
                slideEl,
                swiper.isHorizontal() ? 'left' : 'top',
              );
            }
            if (!shadowAfter) {
              shadowAfter = (0,
              _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(
                'flip',
                slideEl,
                swiper.isHorizontal() ? 'right' : 'bottom',
              );
            }
            if (shadowBefore)
              shadowBefore.style.opacity = Math.max(-progress, 0);
            if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);
          };
          const recreateShadows = () => {
            // Set shadows
            swiper.params.flipEffect;
            swiper.slides.forEach((slideEl) => {
              let progress = slideEl.progress;
              if (swiper.params.flipEffect.limitRotation) {
                progress = Math.max(Math.min(slideEl.progress, 1), -1);
              }
              createSlideShadows(slideEl, progress);
            });
          };
          const setTranslate = () => {
            const { slides, rtlTranslate: rtl } = swiper;
            const params = swiper.params.flipEffect;
            const rotateFix = (0,
            _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.p)(swiper);
            for (let i = 0; i < slides.length; i += 1) {
              const slideEl = slides[i];
              let progress = slideEl.progress;
              if (swiper.params.flipEffect.limitRotation) {
                progress = Math.max(Math.min(slideEl.progress, 1), -1);
              }
              const offset = slideEl.swiperSlideOffset;
              const rotate = -180 * progress;
              let rotateY = rotate;
              let rotateX = 0;
              let tx = swiper.params.cssMode
                ? -offset - swiper.translate
                : -offset;
              let ty = 0;
              if (!swiper.isHorizontal()) {
                ty = tx;
                tx = 0;
                rotateX = -rotateY;
                rotateY = 0;
              } else if (rtl) {
                rotateY = -rotateY;
              }
              slideEl.style.zIndex =
                -Math.abs(Math.round(progress)) + slides.length;
              if (params.slideShadows) {
                createSlideShadows(slideEl, progress);
              }
              const transform = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateFix(rotateX)}deg) rotateY(${rotateFix(rotateY)}deg)`;
              const targetEl = (0,
              _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(
                params,
                slideEl,
              );
              targetEl.style.transform = transform;
            }
          };
          const setTransition = (duration) => {
            const transformElements = swiper.slides.map((slideEl) =>
              (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(slideEl),
            );
            transformElements.forEach((el) => {
              el.style.transitionDuration = `${duration}ms`;
              el.querySelectorAll(
                '.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left',
              ).forEach((shadowEl) => {
                shadowEl.style.transitionDuration = `${duration}ms`;
              });
            });
            (0,
            _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(
              {
                swiper,
                duration,
                transformElements,
              },
            );
          };
          (0, _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({
            effect: 'flip',
            swiper,
            on,
            setTranslate,
            setTransition,
            recreateShadows,
            getEffectParams: () => swiper.params.flipEffect,
            perspective: () => true,
            overwriteParams: () => ({
              slidesPerView: 1,
              slidesPerGroup: 1,
              watchSlidesProgress: true,
              spaceBetween: 0,
              virtualTranslate: !swiper.params.cssMode,
            }),
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/free-mode.mjs':
      /*!***************************************************!*\
  !*** ./node_modules/swiper/modules/free-mode.mjs ***!
  \***************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ freeMode,
          /* harmony export */
        });
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function freeMode(_ref) {
          let { swiper, extendParams, emit, once } = _ref;
          extendParams({
            freeMode: {
              enabled: false,
              momentum: true,
              momentumRatio: 1,
              momentumBounce: true,
              momentumBounceRatio: 1,
              momentumVelocityRatio: 1,
              sticky: false,
              minimumVelocity: 0.02,
            },
          });
          function onTouchStart() {
            if (swiper.params.cssMode) return;
            const translate = swiper.getTranslate();
            swiper.setTranslate(translate);
            swiper.setTransition(0);
            swiper.touchEventsData.velocities.length = 0;
            swiper.freeMode.onTouchEnd({
              currentPos: swiper.rtl ? swiper.translate : -swiper.translate,
            });
          }
          function onTouchMove() {
            if (swiper.params.cssMode) return;
            const { touchEventsData: data, touches } = swiper;
            // Velocity
            if (data.velocities.length === 0) {
              data.velocities.push({
                position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],
                time: data.touchStartTime,
              });
            }
            data.velocities.push({
              position:
                touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],
              time: (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(),
            });
          }
          function onTouchEnd(_ref2) {
            let { currentPos } = _ref2;
            if (swiper.params.cssMode) return;
            const {
              params,
              wrapperEl,
              rtlTranslate: rtl,
              snapGrid,
              touchEventsData: data,
            } = swiper;
            // Time diff
            const touchEndTime = (0,
            _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.f)();
            const timeDiff = touchEndTime - data.touchStartTime;
            if (currentPos < -swiper.minTranslate()) {
              swiper.slideTo(swiper.activeIndex);
              return;
            }
            if (currentPos > -swiper.maxTranslate()) {
              if (swiper.slides.length < snapGrid.length) {
                swiper.slideTo(snapGrid.length - 1);
              } else {
                swiper.slideTo(swiper.slides.length - 1);
              }
              return;
            }
            if (params.freeMode.momentum) {
              if (data.velocities.length > 1) {
                const lastMoveEvent = data.velocities.pop();
                const velocityEvent = data.velocities.pop();
                const distance =
                  lastMoveEvent.position - velocityEvent.position;
                const time = lastMoveEvent.time - velocityEvent.time;
                swiper.velocity = distance / time;
                swiper.velocity /= 2;
                if (
                  Math.abs(swiper.velocity) < params.freeMode.minimumVelocity
                ) {
                  swiper.velocity = 0;
                }
                // this implies that the user stopped moving a finger then released.
                // There would be no events with distance zero, so the last event is stale.
                if (
                  time > 150 ||
                  (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.f)() -
                    lastMoveEvent.time >
                    300
                ) {
                  swiper.velocity = 0;
                }
              } else {
                swiper.velocity = 0;
              }
              swiper.velocity *= params.freeMode.momentumVelocityRatio;
              data.velocities.length = 0;
              let momentumDuration = 1000 * params.freeMode.momentumRatio;
              const momentumDistance = swiper.velocity * momentumDuration;
              let newPosition = swiper.translate + momentumDistance;
              if (rtl) newPosition = -newPosition;
              let doBounce = false;
              let afterBouncePosition;
              const bounceAmount =
                Math.abs(swiper.velocity) *
                20 *
                params.freeMode.momentumBounceRatio;
              let needsLoopFix;
              if (newPosition < swiper.maxTranslate()) {
                if (params.freeMode.momentumBounce) {
                  if (newPosition + swiper.maxTranslate() < -bounceAmount) {
                    newPosition = swiper.maxTranslate() - bounceAmount;
                  }
                  afterBouncePosition = swiper.maxTranslate();
                  doBounce = true;
                  data.allowMomentumBounce = true;
                } else {
                  newPosition = swiper.maxTranslate();
                }
                if (params.loop && params.centeredSlides) needsLoopFix = true;
              } else if (newPosition > swiper.minTranslate()) {
                if (params.freeMode.momentumBounce) {
                  if (newPosition - swiper.minTranslate() > bounceAmount) {
                    newPosition = swiper.minTranslate() + bounceAmount;
                  }
                  afterBouncePosition = swiper.minTranslate();
                  doBounce = true;
                  data.allowMomentumBounce = true;
                } else {
                  newPosition = swiper.minTranslate();
                }
                if (params.loop && params.centeredSlides) needsLoopFix = true;
              } else if (params.freeMode.sticky) {
                let nextSlide;
                for (let j = 0; j < snapGrid.length; j += 1) {
                  if (snapGrid[j] > -newPosition) {
                    nextSlide = j;
                    break;
                  }
                }
                if (
                  Math.abs(snapGrid[nextSlide] - newPosition) <
                    Math.abs(snapGrid[nextSlide - 1] - newPosition) ||
                  swiper.swipeDirection === 'next'
                ) {
                  newPosition = snapGrid[nextSlide];
                } else {
                  newPosition = snapGrid[nextSlide - 1];
                }
                newPosition = -newPosition;
              }
              if (needsLoopFix) {
                once('transitionEnd', () => {
                  swiper.loopFix();
                });
              }
              // Fix duration
              if (swiper.velocity !== 0) {
                if (rtl) {
                  momentumDuration = Math.abs(
                    (-newPosition - swiper.translate) / swiper.velocity,
                  );
                } else {
                  momentumDuration = Math.abs(
                    (newPosition - swiper.translate) / swiper.velocity,
                  );
                }
                if (params.freeMode.sticky) {
                  // If freeMode.sticky is active and the user ends a swipe with a slow-velocity
                  // event, then durations can be 20+ seconds to slide one (or zero!) slides.
                  // It's easy to see this when simulating touch with mouse events. To fix this,
                  // limit single-slide swipes to the default slide duration. This also has the
                  // nice side effect of matching slide speed if the user stopped moving before
                  // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.
                  // For faster swipes, also apply limits (albeit higher ones).
                  const moveDistance = Math.abs(
                    (rtl ? -newPosition : newPosition) - swiper.translate,
                  );
                  const currentSlideSize =
                    swiper.slidesSizesGrid[swiper.activeIndex];
                  if (moveDistance < currentSlideSize) {
                    momentumDuration = params.speed;
                  } else if (moveDistance < 2 * currentSlideSize) {
                    momentumDuration = params.speed * 1.5;
                  } else {
                    momentumDuration = params.speed * 2.5;
                  }
                }
              } else if (params.freeMode.sticky) {
                swiper.slideToClosest();
                return;
              }
              if (params.freeMode.momentumBounce && doBounce) {
                swiper.updateProgress(afterBouncePosition);
                swiper.setTransition(momentumDuration);
                swiper.setTranslate(newPosition);
                swiper.transitionStart(true, swiper.swipeDirection);
                swiper.animating = true;
                (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.l)(
                  wrapperEl,
                  () => {
                    if (
                      !swiper ||
                      swiper.destroyed ||
                      !data.allowMomentumBounce
                    )
                      return;
                    emit('momentumBounce');
                    swiper.setTransition(params.speed);
                    setTimeout(() => {
                      swiper.setTranslate(afterBouncePosition);
                      (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.l)(
                        wrapperEl,
                        () => {
                          if (!swiper || swiper.destroyed) return;
                          swiper.transitionEnd();
                        },
                      );
                    }, 0);
                  },
                );
              } else if (swiper.velocity) {
                emit('_freeModeNoMomentumRelease');
                swiper.updateProgress(newPosition);
                swiper.setTransition(momentumDuration);
                swiper.setTranslate(newPosition);
                swiper.transitionStart(true, swiper.swipeDirection);
                if (!swiper.animating) {
                  swiper.animating = true;
                  (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.l)(
                    wrapperEl,
                    () => {
                      if (!swiper || swiper.destroyed) return;
                      swiper.transitionEnd();
                    },
                  );
                }
              } else {
                swiper.updateProgress(newPosition);
              }
              swiper.updateActiveIndex();
              swiper.updateSlidesClasses();
            } else if (params.freeMode.sticky) {
              swiper.slideToClosest();
              return;
            } else if (params.freeMode) {
              emit('_freeModeNoMomentumRelease');
            }
            if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {
              emit('_freeModeStaticRelease');
              swiper.updateProgress();
              swiper.updateActiveIndex();
              swiper.updateSlidesClasses();
            }
          }
          Object.assign(swiper, {
            freeMode: {
              onTouchStart,
              onTouchMove,
              onTouchEnd,
            },
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/grid.mjs':
      /*!**********************************************!*\
  !*** ./node_modules/swiper/modules/grid.mjs ***!
  \**********************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ Grid,
          /* harmony export */
        });
        function Grid(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            grid: {
              rows: 1,
              fill: 'column',
            },
          });
          let slidesNumberEvenToRows;
          let slidesPerRow;
          let numFullColumns;
          let wasMultiRow;
          const getSpaceBetween = () => {
            let spaceBetween = swiper.params.spaceBetween;
            if (
              typeof spaceBetween === 'string' &&
              spaceBetween.indexOf('%') >= 0
            ) {
              spaceBetween =
                (parseFloat(spaceBetween.replace('%', '')) / 100) * swiper.size;
            } else if (typeof spaceBetween === 'string') {
              spaceBetween = parseFloat(spaceBetween);
            }
            return spaceBetween;
          };
          const initSlides = (slides) => {
            const { slidesPerView } = swiper.params;
            const { rows, fill } = swiper.params.grid;
            const slidesLength =
              swiper.virtual && swiper.params.virtual.enabled
                ? swiper.virtual.slides.length
                : slides.length;
            numFullColumns = Math.floor(slidesLength / rows);
            if (Math.floor(slidesLength / rows) === slidesLength / rows) {
              slidesNumberEvenToRows = slidesLength;
            } else {
              slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;
            }
            if (slidesPerView !== 'auto' && fill === 'row') {
              slidesNumberEvenToRows = Math.max(
                slidesNumberEvenToRows,
                slidesPerView * rows,
              );
            }
            slidesPerRow = slidesNumberEvenToRows / rows;
          };
          const unsetSlides = () => {
            if (swiper.slides) {
              swiper.slides.forEach((slide) => {
                if (slide.swiperSlideGridSet) {
                  slide.style.height = '';
                  slide.style[swiper.getDirectionLabel('margin-top')] = '';
                }
              });
            }
          };
          const updateSlide = (i, slide, slides) => {
            const { slidesPerGroup } = swiper.params;
            const spaceBetween = getSpaceBetween();
            const { rows, fill } = swiper.params.grid;
            const slidesLength =
              swiper.virtual && swiper.params.virtual.enabled
                ? swiper.virtual.slides.length
                : slides.length;
            // Set slides order
            let newSlideOrderIndex;
            let column;
            let row;
            if (fill === 'row' && slidesPerGroup > 1) {
              const groupIndex = Math.floor(i / (slidesPerGroup * rows));
              const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;
              const columnsInGroup =
                groupIndex === 0
                  ? slidesPerGroup
                  : Math.min(
                      Math.ceil(
                        (slidesLength - groupIndex * rows * slidesPerGroup) /
                          rows,
                      ),
                      slidesPerGroup,
                    );
              row = Math.floor(slideIndexInGroup / columnsInGroup);
              column =
                slideIndexInGroup -
                row * columnsInGroup +
                groupIndex * slidesPerGroup;
              newSlideOrderIndex =
                column + (row * slidesNumberEvenToRows) / rows;
              slide.style.order = newSlideOrderIndex;
            } else if (fill === 'column') {
              column = Math.floor(i / rows);
              row = i - column * rows;
              if (
                column > numFullColumns ||
                (column === numFullColumns && row === rows - 1)
              ) {
                row += 1;
                if (row >= rows) {
                  row = 0;
                  column += 1;
                }
              }
            } else {
              row = Math.floor(i / slidesPerRow);
              column = i - row * slidesPerRow;
            }
            slide.row = row;
            slide.column = column;
            slide.style.height = `calc((100% - ${(rows - 1) * spaceBetween}px) / ${rows})`;
            slide.style[swiper.getDirectionLabel('margin-top')] =
              row !== 0 ? spaceBetween && `${spaceBetween}px` : '';
            slide.swiperSlideGridSet = true;
          };
          const updateWrapperSize = (slideSize, snapGrid) => {
            const { centeredSlides, roundLengths } = swiper.params;
            const spaceBetween = getSpaceBetween();
            const { rows } = swiper.params.grid;
            swiper.virtualSize =
              (slideSize + spaceBetween) * slidesNumberEvenToRows;
            swiper.virtualSize =
              Math.ceil(swiper.virtualSize / rows) - spaceBetween;
            if (!swiper.params.cssMode) {
              swiper.wrapperEl.style[swiper.getDirectionLabel('width')] =
                `${swiper.virtualSize + spaceBetween}px`;
            }
            if (centeredSlides) {
              const newSlidesGrid = [];
              for (let i = 0; i < snapGrid.length; i += 1) {
                let slidesGridItem = snapGrid[i];
                if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);
                if (snapGrid[i] < swiper.virtualSize + snapGrid[0])
                  newSlidesGrid.push(slidesGridItem);
              }
              snapGrid.splice(0, snapGrid.length);
              snapGrid.push(...newSlidesGrid);
            }
          };
          const onInit = () => {
            wasMultiRow = swiper.params.grid && swiper.params.grid.rows > 1;
          };
          const onUpdate = () => {
            const { params, el } = swiper;
            const isMultiRow = params.grid && params.grid.rows > 1;
            if (wasMultiRow && !isMultiRow) {
              el.classList.remove(
                `${params.containerModifierClass}grid`,
                `${params.containerModifierClass}grid-column`,
              );
              numFullColumns = 1;
              swiper.emitContainerClasses();
            } else if (!wasMultiRow && isMultiRow) {
              el.classList.add(`${params.containerModifierClass}grid`);
              if (params.grid.fill === 'column') {
                el.classList.add(`${params.containerModifierClass}grid-column`);
              }
              swiper.emitContainerClasses();
            }
            wasMultiRow = isMultiRow;
          };
          on('init', onInit);
          on('update', onUpdate);
          swiper.grid = {
            initSlides,
            unsetSlides,
            updateSlide,
            updateWrapperSize,
          };
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/hash-navigation.mjs':
      /*!*********************************************************!*\
  !*** ./node_modules/swiper/modules/hash-navigation.mjs ***!
  \*********************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ HashNavigation,
          /* harmony export */
        });
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ './node_modules/swiper/shared/ssr-window.esm.mjs',
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function HashNavigation(_ref) {
          let { swiper, extendParams, emit, on } = _ref;
          let initialized = false;
          const document = (0,
          _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();
          const window = (0,
          _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          extendParams({
            hashNavigation: {
              enabled: false,
              replaceState: false,
              watchState: false,
              getSlideIndex(_s, hash) {
                if (swiper.virtual && swiper.params.virtual.enabled) {
                  const slideWithHash = swiper.slides.find(
                    (slideEl) => slideEl.getAttribute('data-hash') === hash,
                  );
                  if (!slideWithHash) return 0;
                  const index = parseInt(
                    slideWithHash.getAttribute('data-swiper-slide-index'),
                    10,
                  );
                  return index;
                }
                return swiper.getSlideIndex(
                  (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(
                    swiper.slidesEl,
                    `.${swiper.params.slideClass}[data-hash="${hash}"], swiper-slide[data-hash="${hash}"]`,
                  )[0],
                );
              },
            },
          });
          const onHashChange = () => {
            emit('hashChange');
            const newHash = document.location.hash.replace('#', '');
            const activeSlideEl =
              swiper.virtual && swiper.params.virtual.enabled
                ? swiper.slidesEl.querySelector(
                    `[data-swiper-slide-index="${swiper.activeIndex}"]`,
                  )
                : swiper.slides[swiper.activeIndex];
            const activeSlideHash = activeSlideEl
              ? activeSlideEl.getAttribute('data-hash')
              : '';
            if (newHash !== activeSlideHash) {
              const newIndex = swiper.params.hashNavigation.getSlideIndex(
                swiper,
                newHash,
              );
              if (typeof newIndex === 'undefined' || Number.isNaN(newIndex))
                return;
              swiper.slideTo(newIndex);
            }
          };
          const setHash = () => {
            if (!initialized || !swiper.params.hashNavigation.enabled) return;
            const activeSlideEl =
              swiper.virtual && swiper.params.virtual.enabled
                ? swiper.slidesEl.querySelector(
                    `[data-swiper-slide-index="${swiper.activeIndex}"]`,
                  )
                : swiper.slides[swiper.activeIndex];
            const activeSlideHash = activeSlideEl
              ? activeSlideEl.getAttribute('data-hash') ||
                activeSlideEl.getAttribute('data-history')
              : '';
            if (
              swiper.params.hashNavigation.replaceState &&
              window.history &&
              window.history.replaceState
            ) {
              window.history.replaceState(
                null,
                null,
                `#${activeSlideHash}` || '',
              );
              emit('hashSet');
            } else {
              document.location.hash = activeSlideHash || '';
              emit('hashSet');
            }
          };
          const init = () => {
            if (
              !swiper.params.hashNavigation.enabled ||
              (swiper.params.history && swiper.params.history.enabled)
            )
              return;
            initialized = true;
            const hash = document.location.hash.replace('#', '');
            if (hash) {
              const speed = 0;
              const index = swiper.params.hashNavigation.getSlideIndex(
                swiper,
                hash,
              );
              swiper.slideTo(
                index || 0,
                speed,
                swiper.params.runCallbacksOnInit,
                true,
              );
            }
            if (swiper.params.hashNavigation.watchState) {
              window.addEventListener('hashchange', onHashChange);
            }
          };
          const destroy = () => {
            if (swiper.params.hashNavigation.watchState) {
              window.removeEventListener('hashchange', onHashChange);
            }
          };
          on('init', () => {
            if (swiper.params.hashNavigation.enabled) {
              init();
            }
          });
          on('destroy', () => {
            if (swiper.params.hashNavigation.enabled) {
              destroy();
            }
          });
          on('transitionEnd _freeModeNoMomentumRelease', () => {
            if (initialized) {
              setHash();
            }
          });
          on('slideChange', () => {
            if (initialized && swiper.params.cssMode) {
              setHash();
            }
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/history.mjs':
      /*!*************************************************!*\
  !*** ./node_modules/swiper/modules/history.mjs ***!
  \*************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ History,
          /* harmony export */
        });
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ './node_modules/swiper/shared/ssr-window.esm.mjs',
          );

        function History(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            history: {
              enabled: false,
              root: '',
              replaceState: false,
              key: 'slides',
              keepQuery: false,
            },
          });
          let initialized = false;
          let paths = {};
          const slugify = (text) => {
            return text
              .toString()
              .replace(/\s+/g, '-')
              .replace(/[^\w-]+/g, '')
              .replace(/--+/g, '-')
              .replace(/^-+/, '')
              .replace(/-+$/, '');
          };
          const getPathValues = (urlOverride) => {
            const window = (0,
            _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
            let location;
            if (urlOverride) {
              location = new URL(urlOverride);
            } else {
              location = window.location;
            }
            const pathArray = location.pathname
              .slice(1)
              .split('/')
              .filter((part) => part !== '');
            const total = pathArray.length;
            const key = pathArray[total - 2];
            const value = pathArray[total - 1];
            return {
              key,
              value,
            };
          };
          const setHistory = (key, index) => {
            const window = (0,
            _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
            if (!initialized || !swiper.params.history.enabled) return;
            let location;
            if (swiper.params.url) {
              location = new URL(swiper.params.url);
            } else {
              location = window.location;
            }
            const slide =
              swiper.virtual && swiper.params.virtual.enabled
                ? swiper.slidesEl.querySelector(
                    `[data-swiper-slide-index="${index}"]`,
                  )
                : swiper.slides[index];
            let value = slugify(slide.getAttribute('data-history'));
            if (swiper.params.history.root.length > 0) {
              let root = swiper.params.history.root;
              if (root[root.length - 1] === '/')
                root = root.slice(0, root.length - 1);
              value = `${root}/${key ? `${key}/` : ''}${value}`;
            } else if (!location.pathname.includes(key)) {
              value = `${key ? `${key}/` : ''}${value}`;
            }
            if (swiper.params.history.keepQuery) {
              value += location.search;
            }
            const currentState = window.history.state;
            if (currentState && currentState.value === value) {
              return;
            }
            if (swiper.params.history.replaceState) {
              window.history.replaceState(
                {
                  value,
                },
                null,
                value,
              );
            } else {
              window.history.pushState(
                {
                  value,
                },
                null,
                value,
              );
            }
          };
          const scrollToSlide = (speed, value, runCallbacks) => {
            if (value) {
              for (
                let i = 0, length = swiper.slides.length;
                i < length;
                i += 1
              ) {
                const slide = swiper.slides[i];
                const slideHistory = slugify(
                  slide.getAttribute('data-history'),
                );
                if (slideHistory === value) {
                  const index = swiper.getSlideIndex(slide);
                  swiper.slideTo(index, speed, runCallbacks);
                }
              }
            } else {
              swiper.slideTo(0, speed, runCallbacks);
            }
          };
          const setHistoryPopState = () => {
            paths = getPathValues(swiper.params.url);
            scrollToSlide(swiper.params.speed, paths.value, false);
          };
          const init = () => {
            const window = (0,
            _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
            if (!swiper.params.history) return;
            if (!window.history || !window.history.pushState) {
              swiper.params.history.enabled = false;
              swiper.params.hashNavigation.enabled = true;
              return;
            }
            initialized = true;
            paths = getPathValues(swiper.params.url);
            if (!paths.key && !paths.value) {
              if (!swiper.params.history.replaceState) {
                window.addEventListener('popstate', setHistoryPopState);
              }
              return;
            }
            scrollToSlide(0, paths.value, swiper.params.runCallbacksOnInit);
            if (!swiper.params.history.replaceState) {
              window.addEventListener('popstate', setHistoryPopState);
            }
          };
          const destroy = () => {
            const window = (0,
            _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
            if (!swiper.params.history.replaceState) {
              window.removeEventListener('popstate', setHistoryPopState);
            }
          };
          on('init', () => {
            if (swiper.params.history.enabled) {
              init();
            }
          });
          on('destroy', () => {
            if (swiper.params.history.enabled) {
              destroy();
            }
          });
          on('transitionEnd _freeModeNoMomentumRelease', () => {
            if (initialized) {
              setHistory(swiper.params.history.key, swiper.activeIndex);
            }
          });
          on('slideChange', () => {
            if (initialized && swiper.params.cssMode) {
              setHistory(swiper.params.history.key, swiper.activeIndex);
            }
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/index.mjs':
      /*!***********************************************!*\
  !*** ./node_modules/swiper/modules/index.mjs ***!
  \***********************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ A11y: () =>
            /* reexport safe */ _a11y_mjs__WEBPACK_IMPORTED_MODULE_9__[
              'default'
            ],
          /* harmony export */ Autoplay: () =>
            /* reexport safe */ _autoplay_mjs__WEBPACK_IMPORTED_MODULE_12__[
              'default'
            ],
          /* harmony export */ Controller: () =>
            /* reexport safe */ _controller_mjs__WEBPACK_IMPORTED_MODULE_8__[
              'default'
            ],
          /* harmony export */ EffectCards: () =>
            /* reexport safe */ _effect_cards_mjs__WEBPACK_IMPORTED_MODULE_22__[
              'default'
            ],
          /* harmony export */ EffectCoverflow: () =>
            /* reexport safe */ _effect_coverflow_mjs__WEBPACK_IMPORTED_MODULE_20__[
              'default'
            ],
          /* harmony export */ EffectCreative: () =>
            /* reexport safe */ _effect_creative_mjs__WEBPACK_IMPORTED_MODULE_21__[
              'default'
            ],
          /* harmony export */ EffectCube: () =>
            /* reexport safe */ _effect_cube_mjs__WEBPACK_IMPORTED_MODULE_18__[
              'default'
            ],
          /* harmony export */ EffectFade: () =>
            /* reexport safe */ _effect_fade_mjs__WEBPACK_IMPORTED_MODULE_17__[
              'default'
            ],
          /* harmony export */ EffectFlip: () =>
            /* reexport safe */ _effect_flip_mjs__WEBPACK_IMPORTED_MODULE_19__[
              'default'
            ],
          /* harmony export */ FreeMode: () =>
            /* reexport safe */ _free_mode_mjs__WEBPACK_IMPORTED_MODULE_14__[
              'default'
            ],
          /* harmony export */ Grid: () =>
            /* reexport safe */ _grid_mjs__WEBPACK_IMPORTED_MODULE_15__[
              'default'
            ],
          /* harmony export */ HashNavigation: () =>
            /* reexport safe */ _hash_navigation_mjs__WEBPACK_IMPORTED_MODULE_11__[
              'default'
            ],
          /* harmony export */ History: () =>
            /* reexport safe */ _history_mjs__WEBPACK_IMPORTED_MODULE_10__[
              'default'
            ],
          /* harmony export */ Keyboard: () =>
            /* reexport safe */ _keyboard_mjs__WEBPACK_IMPORTED_MODULE_1__[
              'default'
            ],
          /* harmony export */ Manipulation: () =>
            /* reexport safe */ _manipulation_mjs__WEBPACK_IMPORTED_MODULE_16__[
              'default'
            ],
          /* harmony export */ Mousewheel: () =>
            /* reexport safe */ _mousewheel_mjs__WEBPACK_IMPORTED_MODULE_2__[
              'default'
            ],
          /* harmony export */ Navigation: () =>
            /* reexport safe */ _navigation_mjs__WEBPACK_IMPORTED_MODULE_3__[
              'default'
            ],
          /* harmony export */ Pagination: () =>
            /* reexport safe */ _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__[
              'default'
            ],
          /* harmony export */ Parallax: () =>
            /* reexport safe */ _parallax_mjs__WEBPACK_IMPORTED_MODULE_6__[
              'default'
            ],
          /* harmony export */ Scrollbar: () =>
            /* reexport safe */ _scrollbar_mjs__WEBPACK_IMPORTED_MODULE_5__[
              'default'
            ],
          /* harmony export */ Thumbs: () =>
            /* reexport safe */ _thumbs_mjs__WEBPACK_IMPORTED_MODULE_13__[
              'default'
            ],
          /* harmony export */ Virtual: () =>
            /* reexport safe */ _virtual_mjs__WEBPACK_IMPORTED_MODULE_0__[
              'default'
            ],
          /* harmony export */ Zoom: () =>
            /* reexport safe */ _zoom_mjs__WEBPACK_IMPORTED_MODULE_7__[
              'default'
            ],
          /* harmony export */
        });
        /* harmony import */ var _virtual_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./virtual.mjs */ './node_modules/swiper/modules/virtual.mjs',
          );
        /* harmony import */ var _keyboard_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./keyboard.mjs */ './node_modules/swiper/modules/keyboard.mjs',
          );
        /* harmony import */ var _mousewheel_mjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./mousewheel.mjs */ './node_modules/swiper/modules/mousewheel.mjs',
          );
        /* harmony import */ var _navigation_mjs__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ./navigation.mjs */ './node_modules/swiper/modules/navigation.mjs',
          );
        /* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ./pagination.mjs */ './node_modules/swiper/modules/pagination.mjs',
          );
        /* harmony import */ var _scrollbar_mjs__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! ./scrollbar.mjs */ './node_modules/swiper/modules/scrollbar.mjs',
          );
        /* harmony import */ var _parallax_mjs__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! ./parallax.mjs */ './node_modules/swiper/modules/parallax.mjs',
          );
        /* harmony import */ var _zoom_mjs__WEBPACK_IMPORTED_MODULE_7__ =
          __webpack_require__(
            /*! ./zoom.mjs */ './node_modules/swiper/modules/zoom.mjs',
          );
        /* harmony import */ var _controller_mjs__WEBPACK_IMPORTED_MODULE_8__ =
          __webpack_require__(
            /*! ./controller.mjs */ './node_modules/swiper/modules/controller.mjs',
          );
        /* harmony import */ var _a11y_mjs__WEBPACK_IMPORTED_MODULE_9__ =
          __webpack_require__(
            /*! ./a11y.mjs */ './node_modules/swiper/modules/a11y.mjs',
          );
        /* harmony import */ var _history_mjs__WEBPACK_IMPORTED_MODULE_10__ =
          __webpack_require__(
            /*! ./history.mjs */ './node_modules/swiper/modules/history.mjs',
          );
        /* harmony import */ var _hash_navigation_mjs__WEBPACK_IMPORTED_MODULE_11__ =
          __webpack_require__(
            /*! ./hash-navigation.mjs */ './node_modules/swiper/modules/hash-navigation.mjs',
          );
        /* harmony import */ var _autoplay_mjs__WEBPACK_IMPORTED_MODULE_12__ =
          __webpack_require__(
            /*! ./autoplay.mjs */ './node_modules/swiper/modules/autoplay.mjs',
          );
        /* harmony import */ var _thumbs_mjs__WEBPACK_IMPORTED_MODULE_13__ =
          __webpack_require__(
            /*! ./thumbs.mjs */ './node_modules/swiper/modules/thumbs.mjs',
          );
        /* harmony import */ var _free_mode_mjs__WEBPACK_IMPORTED_MODULE_14__ =
          __webpack_require__(
            /*! ./free-mode.mjs */ './node_modules/swiper/modules/free-mode.mjs',
          );
        /* harmony import */ var _grid_mjs__WEBPACK_IMPORTED_MODULE_15__ =
          __webpack_require__(
            /*! ./grid.mjs */ './node_modules/swiper/modules/grid.mjs',
          );
        /* harmony import */ var _manipulation_mjs__WEBPACK_IMPORTED_MODULE_16__ =
          __webpack_require__(
            /*! ./manipulation.mjs */ './node_modules/swiper/modules/manipulation.mjs',
          );
        /* harmony import */ var _effect_fade_mjs__WEBPACK_IMPORTED_MODULE_17__ =
          __webpack_require__(
            /*! ./effect-fade.mjs */ './node_modules/swiper/modules/effect-fade.mjs',
          );
        /* harmony import */ var _effect_cube_mjs__WEBPACK_IMPORTED_MODULE_18__ =
          __webpack_require__(
            /*! ./effect-cube.mjs */ './node_modules/swiper/modules/effect-cube.mjs',
          );
        /* harmony import */ var _effect_flip_mjs__WEBPACK_IMPORTED_MODULE_19__ =
          __webpack_require__(
            /*! ./effect-flip.mjs */ './node_modules/swiper/modules/effect-flip.mjs',
          );
        /* harmony import */ var _effect_coverflow_mjs__WEBPACK_IMPORTED_MODULE_20__ =
          __webpack_require__(
            /*! ./effect-coverflow.mjs */ './node_modules/swiper/modules/effect-coverflow.mjs',
          );
        /* harmony import */ var _effect_creative_mjs__WEBPACK_IMPORTED_MODULE_21__ =
          __webpack_require__(
            /*! ./effect-creative.mjs */ './node_modules/swiper/modules/effect-creative.mjs',
          );
        /* harmony import */ var _effect_cards_mjs__WEBPACK_IMPORTED_MODULE_22__ =
          __webpack_require__(
            /*! ./effect-cards.mjs */ './node_modules/swiper/modules/effect-cards.mjs',
          );

        /***/
      },

    /***/ './node_modules/swiper/modules/keyboard.mjs':
      /*!**************************************************!*\
  !*** ./node_modules/swiper/modules/keyboard.mjs ***!
  \**************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ Keyboard,
          /* harmony export */
        });
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ './node_modules/swiper/shared/ssr-window.esm.mjs',
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        /* eslint-disable consistent-return */
        function Keyboard(_ref) {
          let { swiper, extendParams, on, emit } = _ref;
          const document = (0,
          _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();
          const window = (0,
          _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          swiper.keyboard = {
            enabled: false,
          };
          extendParams({
            keyboard: {
              enabled: false,
              onlyInViewport: true,
              pageUpDown: true,
            },
          });
          function handle(event) {
            if (!swiper.enabled) return;
            const { rtlTranslate: rtl } = swiper;
            let e = event;
            if (e.originalEvent) e = e.originalEvent; // jquery fix
            const kc = e.keyCode || e.charCode;
            const pageUpDown = swiper.params.keyboard.pageUpDown;
            const isPageUp = pageUpDown && kc === 33;
            const isPageDown = pageUpDown && kc === 34;
            const isArrowLeft = kc === 37;
            const isArrowRight = kc === 39;
            const isArrowUp = kc === 38;
            const isArrowDown = kc === 40;
            // Directions locks
            if (
              !swiper.allowSlideNext &&
              ((swiper.isHorizontal() && isArrowRight) ||
                (swiper.isVertical() && isArrowDown) ||
                isPageDown)
            ) {
              return false;
            }
            if (
              !swiper.allowSlidePrev &&
              ((swiper.isHorizontal() && isArrowLeft) ||
                (swiper.isVertical() && isArrowUp) ||
                isPageUp)
            ) {
              return false;
            }
            if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {
              return undefined;
            }
            if (
              document.activeElement &&
              (document.activeElement.isContentEditable ||
                (document.activeElement.nodeName &&
                  (document.activeElement.nodeName.toLowerCase() === 'input' ||
                    document.activeElement.nodeName.toLowerCase() ===
                      'textarea')))
            ) {
              return undefined;
            }
            if (
              swiper.params.keyboard.onlyInViewport &&
              (isPageUp ||
                isPageDown ||
                isArrowLeft ||
                isArrowRight ||
                isArrowUp ||
                isArrowDown)
            ) {
              let inView = false;
              // Check that swiper should be inside of visible area of window
              if (
                (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(
                  swiper.el,
                  `.${swiper.params.slideClass}, swiper-slide`,
                ).length > 0 &&
                (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(
                  swiper.el,
                  `.${swiper.params.slideActiveClass}`,
                ).length === 0
              ) {
                return undefined;
              }
              const el = swiper.el;
              const swiperWidth = el.clientWidth;
              const swiperHeight = el.clientHeight;
              const windowWidth = window.innerWidth;
              const windowHeight = window.innerHeight;
              const swiperOffset = (0,
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(el);
              if (rtl) swiperOffset.left -= el.scrollLeft;
              const swiperCoord = [
                [swiperOffset.left, swiperOffset.top],
                [swiperOffset.left + swiperWidth, swiperOffset.top],
                [swiperOffset.left, swiperOffset.top + swiperHeight],
                [
                  swiperOffset.left + swiperWidth,
                  swiperOffset.top + swiperHeight,
                ],
              ];
              for (let i = 0; i < swiperCoord.length; i += 1) {
                const point = swiperCoord[i];
                if (
                  point[0] >= 0 &&
                  point[0] <= windowWidth &&
                  point[1] >= 0 &&
                  point[1] <= windowHeight
                ) {
                  if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line
                  inView = true;
                }
              }
              if (!inView) return undefined;
            }
            if (swiper.isHorizontal()) {
              if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {
                if (e.preventDefault) e.preventDefault();
                else e.returnValue = false;
              }
              if (
                ((isPageDown || isArrowRight) && !rtl) ||
                ((isPageUp || isArrowLeft) && rtl)
              )
                swiper.slideNext();
              if (
                ((isPageUp || isArrowLeft) && !rtl) ||
                ((isPageDown || isArrowRight) && rtl)
              )
                swiper.slidePrev();
            } else {
              if (isPageUp || isPageDown || isArrowUp || isArrowDown) {
                if (e.preventDefault) e.preventDefault();
                else e.returnValue = false;
              }
              if (isPageDown || isArrowDown) swiper.slideNext();
              if (isPageUp || isArrowUp) swiper.slidePrev();
            }
            emit('keyPress', kc);
            return undefined;
          }
          function enable() {
            if (swiper.keyboard.enabled) return;
            document.addEventListener('keydown', handle);
            swiper.keyboard.enabled = true;
          }
          function disable() {
            if (!swiper.keyboard.enabled) return;
            document.removeEventListener('keydown', handle);
            swiper.keyboard.enabled = false;
          }
          on('init', () => {
            if (swiper.params.keyboard.enabled) {
              enable();
            }
          });
          on('destroy', () => {
            if (swiper.keyboard.enabled) {
              disable();
            }
          });
          Object.assign(swiper.keyboard, {
            enable,
            disable,
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/manipulation.mjs':
      /*!******************************************************!*\
  !*** ./node_modules/swiper/modules/manipulation.mjs ***!
  \******************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ Manipulation,
          /* harmony export */
        });
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function appendSlide(slides) {
          const swiper = this;
          const { params, slidesEl } = swiper;
          if (params.loop) {
            swiper.loopDestroy();
          }
          const appendElement = (slideEl) => {
            if (typeof slideEl === 'string') {
              const tempDOM = document.createElement('div');
              (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(
                tempDOM,
                slideEl,
              );
              slidesEl.append(tempDOM.children[0]);
              (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(
                tempDOM,
                '',
              );
            } else {
              slidesEl.append(slideEl);
            }
          };
          if (typeof slides === 'object' && 'length' in slides) {
            for (let i = 0; i < slides.length; i += 1) {
              if (slides[i]) appendElement(slides[i]);
            }
          } else {
            appendElement(slides);
          }
          swiper.recalcSlides();
          if (params.loop) {
            swiper.loopCreate();
          }
          if (!params.observer || swiper.isElement) {
            swiper.update();
          }
        }

        function prependSlide(slides) {
          const swiper = this;
          const { params, activeIndex, slidesEl } = swiper;
          if (params.loop) {
            swiper.loopDestroy();
          }
          let newActiveIndex = activeIndex + 1;
          const prependElement = (slideEl) => {
            if (typeof slideEl === 'string') {
              const tempDOM = document.createElement('div');
              (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(
                tempDOM,
                slideEl,
              );
              slidesEl.prepend(tempDOM.children[0]);
              (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(
                tempDOM,
                '',
              );
            } else {
              slidesEl.prepend(slideEl);
            }
          };
          if (typeof slides === 'object' && 'length' in slides) {
            for (let i = 0; i < slides.length; i += 1) {
              if (slides[i]) prependElement(slides[i]);
            }
            newActiveIndex = activeIndex + slides.length;
          } else {
            prependElement(slides);
          }
          swiper.recalcSlides();
          if (params.loop) {
            swiper.loopCreate();
          }
          if (!params.observer || swiper.isElement) {
            swiper.update();
          }
          swiper.slideTo(newActiveIndex, 0, false);
        }

        function addSlide(index, slides) {
          const swiper = this;
          const { params, activeIndex, slidesEl } = swiper;
          let activeIndexBuffer = activeIndex;
          if (params.loop) {
            activeIndexBuffer -= swiper.loopedSlides;
            swiper.loopDestroy();
            swiper.recalcSlides();
          }
          const baseLength = swiper.slides.length;
          if (index <= 0) {
            swiper.prependSlide(slides);
            return;
          }
          if (index >= baseLength) {
            swiper.appendSlide(slides);
            return;
          }
          let newActiveIndex =
            activeIndexBuffer > index
              ? activeIndexBuffer + 1
              : activeIndexBuffer;
          const slidesBuffer = [];
          for (let i = baseLength - 1; i >= index; i -= 1) {
            const currentSlide = swiper.slides[i];
            currentSlide.remove();
            slidesBuffer.unshift(currentSlide);
          }
          if (typeof slides === 'object' && 'length' in slides) {
            for (let i = 0; i < slides.length; i += 1) {
              if (slides[i]) slidesEl.append(slides[i]);
            }
            newActiveIndex =
              activeIndexBuffer > index
                ? activeIndexBuffer + slides.length
                : activeIndexBuffer;
          } else {
            slidesEl.append(slides);
          }
          for (let i = 0; i < slidesBuffer.length; i += 1) {
            slidesEl.append(slidesBuffer[i]);
          }
          swiper.recalcSlides();
          if (params.loop) {
            swiper.loopCreate();
          }
          if (!params.observer || swiper.isElement) {
            swiper.update();
          }
          if (params.loop) {
            swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
          } else {
            swiper.slideTo(newActiveIndex, 0, false);
          }
        }

        function removeSlide(slidesIndexes) {
          const swiper = this;
          const { params, activeIndex } = swiper;
          let activeIndexBuffer = activeIndex;
          if (params.loop) {
            activeIndexBuffer -= swiper.loopedSlides;
            swiper.loopDestroy();
          }
          let newActiveIndex = activeIndexBuffer;
          let indexToRemove;
          if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {
            for (let i = 0; i < slidesIndexes.length; i += 1) {
              indexToRemove = slidesIndexes[i];
              if (swiper.slides[indexToRemove])
                swiper.slides[indexToRemove].remove();
              if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
            }
            newActiveIndex = Math.max(newActiveIndex, 0);
          } else {
            indexToRemove = slidesIndexes;
            if (swiper.slides[indexToRemove])
              swiper.slides[indexToRemove].remove();
            if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
            newActiveIndex = Math.max(newActiveIndex, 0);
          }
          swiper.recalcSlides();
          if (params.loop) {
            swiper.loopCreate();
          }
          if (!params.observer || swiper.isElement) {
            swiper.update();
          }
          if (params.loop) {
            swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
          } else {
            swiper.slideTo(newActiveIndex, 0, false);
          }
        }

        function removeAllSlides() {
          const swiper = this;
          const slidesIndexes = [];
          for (let i = 0; i < swiper.slides.length; i += 1) {
            slidesIndexes.push(i);
          }
          swiper.removeSlide(slidesIndexes);
        }

        function Manipulation(_ref) {
          let { swiper } = _ref;
          Object.assign(swiper, {
            appendSlide: appendSlide.bind(swiper),
            prependSlide: prependSlide.bind(swiper),
            addSlide: addSlide.bind(swiper),
            removeSlide: removeSlide.bind(swiper),
            removeAllSlides: removeAllSlides.bind(swiper),
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/mousewheel.mjs':
      /*!****************************************************!*\
  !*** ./node_modules/swiper/modules/mousewheel.mjs ***!
  \****************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ Mousewheel,
          /* harmony export */
        });
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ './node_modules/swiper/shared/ssr-window.esm.mjs',
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        /* eslint-disable consistent-return */
        function Mousewheel(_ref) {
          let { swiper, extendParams, on, emit } = _ref;
          const window = (0,
          _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          extendParams({
            mousewheel: {
              enabled: false,
              releaseOnEdges: false,
              invert: false,
              forceToAxis: false,
              sensitivity: 1,
              eventsTarget: 'container',
              thresholdDelta: null,
              thresholdTime: null,
              noMousewheelClass: 'swiper-no-mousewheel',
            },
          });
          swiper.mousewheel = {
            enabled: false,
          };
          let timeout;
          let lastScrollTime = (0,
          _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)();
          let lastEventBeforeSnap;
          const recentWheelEvents = [];
          function normalize(e) {
            // Reasonable defaults
            const PIXEL_STEP = 10;
            const LINE_HEIGHT = 40;
            const PAGE_HEIGHT = 800;
            let sX = 0;
            let sY = 0; // spinX, spinY
            let pX = 0;
            let pY = 0; // pixelX, pixelY

            // Legacy
            if ('detail' in e) {
              sY = e.detail;
            }
            if ('wheelDelta' in e) {
              sY = -e.wheelDelta / 120;
            }
            if ('wheelDeltaY' in e) {
              sY = -e.wheelDeltaY / 120;
            }
            if ('wheelDeltaX' in e) {
              sX = -e.wheelDeltaX / 120;
            }

            // side scrolling on FF with DOMMouseScroll
            if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {
              sX = sY;
              sY = 0;
            }
            pX = sX * PIXEL_STEP;
            pY = sY * PIXEL_STEP;
            if ('deltaY' in e) {
              pY = e.deltaY;
            }
            if ('deltaX' in e) {
              pX = e.deltaX;
            }
            if (e.shiftKey && !pX) {
              // if user scrolls with shift he wants horizontal scroll
              pX = pY;
              pY = 0;
            }
            if ((pX || pY) && e.deltaMode) {
              if (e.deltaMode === 1) {
                // delta in LINE units
                pX *= LINE_HEIGHT;
                pY *= LINE_HEIGHT;
              } else {
                // delta in PAGE units
                pX *= PAGE_HEIGHT;
                pY *= PAGE_HEIGHT;
              }
            }

            // Fall-back if spin cannot be determined
            if (pX && !sX) {
              sX = pX < 1 ? -1 : 1;
            }
            if (pY && !sY) {
              sY = pY < 1 ? -1 : 1;
            }
            return {
              spinX: sX,
              spinY: sY,
              pixelX: pX,
              pixelY: pY,
            };
          }
          function handleMouseEnter() {
            if (!swiper.enabled) return;
            swiper.mouseEntered = true;
          }
          function handleMouseLeave() {
            if (!swiper.enabled) return;
            swiper.mouseEntered = false;
          }
          function animateSlider(newEvent) {
            if (
              swiper.params.mousewheel.thresholdDelta &&
              newEvent.delta < swiper.params.mousewheel.thresholdDelta
            ) {
              // Prevent if delta of wheel scroll delta is below configured threshold
              return false;
            }
            if (
              swiper.params.mousewheel.thresholdTime &&
              (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)() -
                lastScrollTime <
                swiper.params.mousewheel.thresholdTime
            ) {
              // Prevent if time between scrolls is below configured threshold
              return false;
            }

            // If the movement is NOT big enough and
            // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):
            //   Don't go any further (avoid insignificant scroll movement).
            if (
              newEvent.delta >= 6 &&
              (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)() -
                lastScrollTime <
                60
            ) {
              // Return false as a default
              return true;
            }
            // If user is scrolling towards the end:
            //   If the slider hasn't hit the latest slide or
            //   if the slider is a loop and
            //   if the slider isn't moving right now:
            //     Go to next slide and
            //     emit a scroll event.
            // Else (the user is scrolling towards the beginning) and
            // if the slider hasn't hit the first slide or
            // if the slider is a loop and
            // if the slider isn't moving right now:
            //   Go to prev slide and
            //   emit a scroll event.
            if (newEvent.direction < 0) {
              if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {
                swiper.slideNext();
                emit('scroll', newEvent.raw);
              }
            } else if (
              (!swiper.isBeginning || swiper.params.loop) &&
              !swiper.animating
            ) {
              swiper.slidePrev();
              emit('scroll', newEvent.raw);
            }
            // If you got here is because an animation has been triggered so store the current time
            lastScrollTime = new window.Date().getTime();
            // Return false as a default
            return false;
          }
          function releaseScroll(newEvent) {
            const params = swiper.params.mousewheel;
            if (newEvent.direction < 0) {
              if (
                swiper.isEnd &&
                !swiper.params.loop &&
                params.releaseOnEdges
              ) {
                // Return true to animate scroll on edges
                return true;
              }
            } else if (
              swiper.isBeginning &&
              !swiper.params.loop &&
              params.releaseOnEdges
            ) {
              // Return true to animate scroll on edges
              return true;
            }
            return false;
          }
          function handle(event) {
            let e = event;
            let disableParentSwiper = true;
            if (!swiper.enabled) return;

            // Ignore event if the target or its parents have the swiper-no-mousewheel class
            if (
              event.target.closest(
                `.${swiper.params.mousewheel.noMousewheelClass}`,
              )
            )
              return;
            const params = swiper.params.mousewheel;
            if (swiper.params.cssMode) {
              e.preventDefault();
            }
            let targetEl = swiper.el;
            if (swiper.params.mousewheel.eventsTarget !== 'container') {
              targetEl = document.querySelector(
                swiper.params.mousewheel.eventsTarget,
              );
            }
            const targetElContainsTarget =
              targetEl && targetEl.contains(e.target);
            if (
              !swiper.mouseEntered &&
              !targetElContainsTarget &&
              !params.releaseOnEdges
            )
              return true;
            if (e.originalEvent) e = e.originalEvent; // jquery fix
            let delta = 0;
            const rtlFactor = swiper.rtlTranslate ? -1 : 1;
            const data = normalize(e);
            if (params.forceToAxis) {
              if (swiper.isHorizontal()) {
                if (Math.abs(data.pixelX) > Math.abs(data.pixelY))
                  delta = -data.pixelX * rtlFactor;
                else return true;
              } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX))
                delta = -data.pixelY;
              else return true;
            } else {
              delta =
                Math.abs(data.pixelX) > Math.abs(data.pixelY)
                  ? -data.pixelX * rtlFactor
                  : -data.pixelY;
            }
            if (delta === 0) return true;
            if (params.invert) delta = -delta;

            // Get the scroll positions
            let positions = swiper.getTranslate() + delta * params.sensitivity;
            if (positions >= swiper.minTranslate())
              positions = swiper.minTranslate();
            if (positions <= swiper.maxTranslate())
              positions = swiper.maxTranslate();

            // When loop is true:
            //     the disableParentSwiper will be true.
            // When loop is false:
            //     if the scroll positions is not on edge,
            //     then the disableParentSwiper will be true.
            //     if the scroll on edge positions,
            //     then the disableParentSwiper will be false.
            disableParentSwiper = swiper.params.loop
              ? true
              : !(
                  positions === swiper.minTranslate() ||
                  positions === swiper.maxTranslate()
                );
            if (disableParentSwiper && swiper.params.nested)
              e.stopPropagation();
            if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {
              // Register the new event in a variable which stores the relevant data
              const newEvent = {
                time: (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(),
                delta: Math.abs(delta),
                direction: Math.sign(delta),
                raw: event,
              };

              // Keep the most recent events
              if (recentWheelEvents.length >= 2) {
                recentWheelEvents.shift(); // only store the last N events
              }

              const prevEvent = recentWheelEvents.length
                ? recentWheelEvents[recentWheelEvents.length - 1]
                : undefined;
              recentWheelEvents.push(newEvent);

              // If there is at least one previous recorded event:
              //   If direction has changed or
              //   if the scroll is quicker than the previous one:
              //     Animate the slider.
              // Else (this is the first time the wheel is moved):
              //     Animate the slider.
              if (prevEvent) {
                if (
                  newEvent.direction !== prevEvent.direction ||
                  newEvent.delta > prevEvent.delta ||
                  newEvent.time > prevEvent.time + 150
                ) {
                  animateSlider(newEvent);
                }
              } else {
                animateSlider(newEvent);
              }

              // If it's time to release the scroll:
              //   Return now so you don't hit the preventDefault.
              if (releaseScroll(newEvent)) {
                return true;
              }
            } else {
              // Freemode or scrollContainer:

              // If we recently snapped after a momentum scroll, then ignore wheel events
              // to give time for the deceleration to finish. Stop ignoring after 500 msecs
              // or if it's a new scroll (larger delta or inverse sign as last event before
              // an end-of-momentum snap).
              const newEvent = {
                time: (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(),
                delta: Math.abs(delta),
                direction: Math.sign(delta),
              };
              const ignoreWheelEvents =
                lastEventBeforeSnap &&
                newEvent.time < lastEventBeforeSnap.time + 500 &&
                newEvent.delta <= lastEventBeforeSnap.delta &&
                newEvent.direction === lastEventBeforeSnap.direction;
              if (!ignoreWheelEvents) {
                lastEventBeforeSnap = undefined;
                let position =
                  swiper.getTranslate() + delta * params.sensitivity;
                const wasBeginning = swiper.isBeginning;
                const wasEnd = swiper.isEnd;
                if (position >= swiper.minTranslate())
                  position = swiper.minTranslate();
                if (position <= swiper.maxTranslate())
                  position = swiper.maxTranslate();
                swiper.setTransition(0);
                swiper.setTranslate(position);
                swiper.updateProgress();
                swiper.updateActiveIndex();
                swiper.updateSlidesClasses();
                if (
                  (!wasBeginning && swiper.isBeginning) ||
                  (!wasEnd && swiper.isEnd)
                ) {
                  swiper.updateSlidesClasses();
                }
                if (swiper.params.loop) {
                  swiper.loopFix({
                    direction: newEvent.direction < 0 ? 'next' : 'prev',
                    byMousewheel: true,
                  });
                }
                if (swiper.params.freeMode.sticky) {
                  // When wheel scrolling starts with sticky (aka snap) enabled, then detect
                  // the end of a momentum scroll by storing recent (N=15?) wheel events.
                  // 1. do all N events have decreasing or same (absolute value) delta?
                  // 2. did all N events arrive in the last M (M=500?) msecs?
                  // 3. does the earliest event have an (absolute value) delta that's
                  //    at least P (P=1?) larger than the most recent event's delta?
                  // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?
                  // If 1-4 are "yes" then we're near the end of a momentum scroll deceleration.
                  // Snap immediately and ignore remaining wheel events in this scroll.
                  // See comment above for "remaining wheel events in this scroll" determination.
                  // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.
                  clearTimeout(timeout);
                  timeout = undefined;
                  if (recentWheelEvents.length >= 15) {
                    recentWheelEvents.shift(); // only store the last N events
                  }

                  const prevEvent = recentWheelEvents.length
                    ? recentWheelEvents[recentWheelEvents.length - 1]
                    : undefined;
                  const firstEvent = recentWheelEvents[0];
                  recentWheelEvents.push(newEvent);
                  if (
                    prevEvent &&
                    (newEvent.delta > prevEvent.delta ||
                      newEvent.direction !== prevEvent.direction)
                  ) {
                    // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.
                    recentWheelEvents.splice(0);
                  } else if (
                    recentWheelEvents.length >= 15 &&
                    newEvent.time - firstEvent.time < 500 &&
                    firstEvent.delta - newEvent.delta >= 1 &&
                    newEvent.delta <= 6
                  ) {
                    // We're at the end of the deceleration of a momentum scroll, so there's no need
                    // to wait for more events. Snap ASAP on the next tick.
                    // Also, because there's some remaining momentum we'll bias the snap in the
                    // direction of the ongoing scroll because it's better UX for the scroll to snap
                    // in the same direction as the scroll instead of reversing to snap.  Therefore,
                    // if it's already scrolled more than 20% in the current direction, keep going.
                    const snapToThreshold = delta > 0 ? 0.8 : 0.2;
                    lastEventBeforeSnap = newEvent;
                    recentWheelEvents.splice(0);
                    timeout = (0,
                    _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(() => {
                      if (swiper.destroyed || !swiper.params) return;
                      swiper.slideToClosest(
                        swiper.params.speed,
                        true,
                        undefined,
                        snapToThreshold,
                      );
                    }, 0); // no delay; move on next tick
                  }

                  if (!timeout) {
                    // if we get here, then we haven't detected the end of a momentum scroll, so
                    // we'll consider a scroll "complete" when there haven't been any wheel events
                    // for 500ms.
                    timeout = (0,
                    _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(() => {
                      if (swiper.destroyed || !swiper.params) return;
                      const snapToThreshold = 0.5;
                      lastEventBeforeSnap = newEvent;
                      recentWheelEvents.splice(0);
                      swiper.slideToClosest(
                        swiper.params.speed,
                        true,
                        undefined,
                        snapToThreshold,
                      );
                    }, 500);
                  }
                }

                // Emit event
                if (!ignoreWheelEvents) emit('scroll', e);

                // Stop autoplay
                if (
                  swiper.params.autoplay &&
                  swiper.params.autoplay.disableOnInteraction
                )
                  swiper.autoplay.stop();
                // Return page scroll on edge positions
                if (
                  params.releaseOnEdges &&
                  (position === swiper.minTranslate() ||
                    position === swiper.maxTranslate())
                ) {
                  return true;
                }
              }
            }
            if (e.preventDefault) e.preventDefault();
            else e.returnValue = false;
            return false;
          }
          function events(method) {
            let targetEl = swiper.el;
            if (swiper.params.mousewheel.eventsTarget !== 'container') {
              targetEl = document.querySelector(
                swiper.params.mousewheel.eventsTarget,
              );
            }
            targetEl[method]('mouseenter', handleMouseEnter);
            targetEl[method]('mouseleave', handleMouseLeave);
            targetEl[method]('wheel', handle);
          }
          function enable() {
            if (swiper.params.cssMode) {
              swiper.wrapperEl.removeEventListener('wheel', handle);
              return true;
            }
            if (swiper.mousewheel.enabled) return false;
            events('addEventListener');
            swiper.mousewheel.enabled = true;
            return true;
          }
          function disable() {
            if (swiper.params.cssMode) {
              swiper.wrapperEl.addEventListener(event, handle);
              return true;
            }
            if (!swiper.mousewheel.enabled) return false;
            events('removeEventListener');
            swiper.mousewheel.enabled = false;
            return true;
          }
          on('init', () => {
            if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {
              disable();
            }
            if (swiper.params.mousewheel.enabled) enable();
          });
          on('destroy', () => {
            if (swiper.params.cssMode) {
              enable();
            }
            if (swiper.mousewheel.enabled) disable();
          });
          Object.assign(swiper.mousewheel, {
            enable,
            disable,
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/navigation.css':
      /*!****************************************************!*\
  !*** ./node_modules/swiper/modules/navigation.css ***!
  \****************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! !../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ './node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
          );
        /* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default =
          /*#__PURE__*/ __webpack_require__.n(
            _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__,
          );
        /* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! !../../style-loader/dist/runtime/styleDomAPI.js */ './node_modules/style-loader/dist/runtime/styleDomAPI.js',
          );
        /* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default =
          /*#__PURE__*/ __webpack_require__.n(
            _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__,
          );
        /* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! !../../style-loader/dist/runtime/insertBySelector.js */ './node_modules/style-loader/dist/runtime/insertBySelector.js',
          );
        /* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default =
          /*#__PURE__*/ __webpack_require__.n(
            _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__,
          );
        /* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! !../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ './node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
          );
        /* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default =
          /*#__PURE__*/ __webpack_require__.n(
            _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__,
          );
        /* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! !../../style-loader/dist/runtime/insertStyleElement.js */ './node_modules/style-loader/dist/runtime/insertStyleElement.js',
          );
        /* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default =
          /*#__PURE__*/ __webpack_require__.n(
            _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__,
          );
        /* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! !../../style-loader/dist/runtime/styleTagTransform.js */ './node_modules/style-loader/dist/runtime/styleTagTransform.js',
          );
        /* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default =
          /*#__PURE__*/ __webpack_require__.n(
            _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__,
          );
        /* harmony import */ var _css_loader_dist_cjs_js_navigation_css__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! !!../../css-loader/dist/cjs.js!./navigation.css */ './node_modules/css-loader/dist/cjs.js!./node_modules/swiper/modules/navigation.css',
          );

        var options = {};

        options.styleTagTransform =
          _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default();
        options.setAttributes =
          _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default();
        options.insert =
          _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(
            null,
            'head',
          );
        options.domAPI =
          _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default();
        options.insertStyleElement =
          _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default();

        var update =
          _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(
            _css_loader_dist_cjs_js_navigation_css__WEBPACK_IMPORTED_MODULE_6__[
              'default'
            ],
            options,
          );

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          _css_loader_dist_cjs_js_navigation_css__WEBPACK_IMPORTED_MODULE_6__[
            'default'
          ] &&
          _css_loader_dist_cjs_js_navigation_css__WEBPACK_IMPORTED_MODULE_6__[
            'default'
          ].locals
            ? _css_loader_dist_cjs_js_navigation_css__WEBPACK_IMPORTED_MODULE_6__[
                'default'
              ].locals
            : undefined;

        /***/
      },

    /***/ './node_modules/swiper/modules/navigation.mjs':
      /*!****************************************************!*\
  !*** ./node_modules/swiper/modules/navigation.mjs ***!
  \****************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ Navigation,
          /* harmony export */
        });
        /* harmony import */ var _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/create-element-if-not-defined.mjs */ './node_modules/swiper/shared/create-element-if-not-defined.mjs',
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function Navigation(_ref) {
          let { swiper, extendParams, on, emit } = _ref;
          extendParams({
            navigation: {
              nextEl: null,
              prevEl: null,
              hideOnClick: false,
              disabledClass: 'swiper-button-disabled',
              hiddenClass: 'swiper-button-hidden',
              lockClass: 'swiper-button-lock',
              navigationDisabledClass: 'swiper-navigation-disabled',
            },
          });
          swiper.navigation = {
            nextEl: null,
            prevEl: null,
          };
          function getEl(el) {
            let res;
            if (el && typeof el === 'string' && swiper.isElement) {
              res =
                swiper.el.querySelector(el) || swiper.hostEl.querySelector(el);
              if (res) return res;
            }
            if (el) {
              if (typeof el === 'string')
                res = [...document.querySelectorAll(el)];
              if (
                swiper.params.uniqueNavElements &&
                typeof el === 'string' &&
                res &&
                res.length > 1 &&
                swiper.el.querySelectorAll(el).length === 1
              ) {
                res = swiper.el.querySelector(el);
              } else if (res && res.length === 1) {
                res = res[0];
              }
            }
            if (el && !res) return el;
            // if (Array.isArray(res) && res.length === 1) res = res[0];
            return res;
          }
          function toggleEl(el, disabled) {
            const params = swiper.params.navigation;
            el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(el);
            el.forEach((subEl) => {
              if (subEl) {
                subEl.classList[disabled ? 'add' : 'remove'](
                  ...params.disabledClass.split(' '),
                );
                if (subEl.tagName === 'BUTTON') subEl.disabled = disabled;
                if (swiper.params.watchOverflow && swiper.enabled) {
                  subEl.classList[swiper.isLocked ? 'add' : 'remove'](
                    params.lockClass,
                  );
                }
              }
            });
          }
          function update() {
            // Update Navigation Buttons
            const { nextEl, prevEl } = swiper.navigation;
            if (swiper.params.loop) {
              toggleEl(prevEl, false);
              toggleEl(nextEl, false);
              return;
            }
            toggleEl(prevEl, swiper.isBeginning && !swiper.params.rewind);
            toggleEl(nextEl, swiper.isEnd && !swiper.params.rewind);
          }
          function onPrevClick(e) {
            e.preventDefault();
            if (
              swiper.isBeginning &&
              !swiper.params.loop &&
              !swiper.params.rewind
            )
              return;
            swiper.slidePrev();
            emit('navigationPrev');
          }
          function onNextClick(e) {
            e.preventDefault();
            if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind)
              return;
            swiper.slideNext();
            emit('navigationNext');
          }
          function init() {
            const params = swiper.params.navigation;
            swiper.params.navigation = (0,
            _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(
              swiper,
              swiper.originalParams.navigation,
              swiper.params.navigation,
              {
                nextEl: 'swiper-button-next',
                prevEl: 'swiper-button-prev',
              },
            );
            if (!(params.nextEl || params.prevEl)) return;
            let nextEl = getEl(params.nextEl);
            let prevEl = getEl(params.prevEl);
            Object.assign(swiper.navigation, {
              nextEl,
              prevEl,
            });
            nextEl = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(
              nextEl,
            );
            prevEl = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(
              prevEl,
            );
            const initButton = (el, dir) => {
              if (el) {
                el.addEventListener(
                  'click',
                  dir === 'next' ? onNextClick : onPrevClick,
                );
              }
              if (!swiper.enabled && el) {
                el.classList.add(...params.lockClass.split(' '));
              }
            };
            nextEl.forEach((el) => initButton(el, 'next'));
            prevEl.forEach((el) => initButton(el, 'prev'));
          }
          function destroy() {
            let { nextEl, prevEl } = swiper.navigation;
            nextEl = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(
              nextEl,
            );
            prevEl = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(
              prevEl,
            );
            const destroyButton = (el, dir) => {
              el.removeEventListener(
                'click',
                dir === 'next' ? onNextClick : onPrevClick,
              );
              el.classList.remove(
                ...swiper.params.navigation.disabledClass.split(' '),
              );
            };
            nextEl.forEach((el) => destroyButton(el, 'next'));
            prevEl.forEach((el) => destroyButton(el, 'prev'));
          }
          on('init', () => {
            if (swiper.params.navigation.enabled === false) {
              // eslint-disable-next-line
              disable();
            } else {
              init();
              update();
            }
          });
          on('toEdge fromEdge lock unlock', () => {
            update();
          });
          on('destroy', () => {
            destroy();
          });
          on('enable disable', () => {
            let { nextEl, prevEl } = swiper.navigation;
            nextEl = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(
              nextEl,
            );
            prevEl = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(
              prevEl,
            );
            if (swiper.enabled) {
              update();
              return;
            }
            [...nextEl, ...prevEl]
              .filter((el) => !!el)
              .forEach((el) =>
                el.classList.add(swiper.params.navigation.lockClass),
              );
          });
          on('click', (_s, e) => {
            let { nextEl, prevEl } = swiper.navigation;
            nextEl = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(
              nextEl,
            );
            prevEl = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(
              prevEl,
            );
            const targetEl = e.target;
            let targetIsButton =
              prevEl.includes(targetEl) || nextEl.includes(targetEl);
            if (swiper.isElement && !targetIsButton) {
              const path = e.path || (e.composedPath && e.composedPath());
              if (path) {
                targetIsButton = path.find(
                  (pathEl) =>
                    nextEl.includes(pathEl) || prevEl.includes(pathEl),
                );
              }
            }
            if (swiper.params.navigation.hideOnClick && !targetIsButton) {
              if (
                swiper.pagination &&
                swiper.params.pagination &&
                swiper.params.pagination.clickable &&
                (swiper.pagination.el === targetEl ||
                  swiper.pagination.el.contains(targetEl))
              )
                return;
              let isHidden;
              if (nextEl.length) {
                isHidden = nextEl[0].classList.contains(
                  swiper.params.navigation.hiddenClass,
                );
              } else if (prevEl.length) {
                isHidden = prevEl[0].classList.contains(
                  swiper.params.navigation.hiddenClass,
                );
              }
              if (isHidden === true) {
                emit('navigationShow');
              } else {
                emit('navigationHide');
              }
              [...nextEl, ...prevEl]
                .filter((el) => !!el)
                .forEach((el) =>
                  el.classList.toggle(swiper.params.navigation.hiddenClass),
                );
            }
          });
          const enable = () => {
            swiper.el.classList.remove(
              ...swiper.params.navigation.navigationDisabledClass.split(' '),
            );
            init();
            update();
          };
          const disable = () => {
            swiper.el.classList.add(
              ...swiper.params.navigation.navigationDisabledClass.split(' '),
            );
            destroy();
          };
          Object.assign(swiper.navigation, {
            enable,
            disable,
            update,
            init,
            destroy,
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/pagination.css':
      /*!****************************************************!*\
  !*** ./node_modules/swiper/modules/pagination.css ***!
  \****************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! !../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ './node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
          );
        /* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default =
          /*#__PURE__*/ __webpack_require__.n(
            _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__,
          );
        /* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! !../../style-loader/dist/runtime/styleDomAPI.js */ './node_modules/style-loader/dist/runtime/styleDomAPI.js',
          );
        /* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default =
          /*#__PURE__*/ __webpack_require__.n(
            _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__,
          );
        /* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! !../../style-loader/dist/runtime/insertBySelector.js */ './node_modules/style-loader/dist/runtime/insertBySelector.js',
          );
        /* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default =
          /*#__PURE__*/ __webpack_require__.n(
            _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__,
          );
        /* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! !../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ './node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
          );
        /* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default =
          /*#__PURE__*/ __webpack_require__.n(
            _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__,
          );
        /* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! !../../style-loader/dist/runtime/insertStyleElement.js */ './node_modules/style-loader/dist/runtime/insertStyleElement.js',
          );
        /* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default =
          /*#__PURE__*/ __webpack_require__.n(
            _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__,
          );
        /* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! !../../style-loader/dist/runtime/styleTagTransform.js */ './node_modules/style-loader/dist/runtime/styleTagTransform.js',
          );
        /* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default =
          /*#__PURE__*/ __webpack_require__.n(
            _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__,
          );
        /* harmony import */ var _css_loader_dist_cjs_js_pagination_css__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! !!../../css-loader/dist/cjs.js!./pagination.css */ './node_modules/css-loader/dist/cjs.js!./node_modules/swiper/modules/pagination.css',
          );

        var options = {};

        options.styleTagTransform =
          _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default();
        options.setAttributes =
          _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default();
        options.insert =
          _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(
            null,
            'head',
          );
        options.domAPI =
          _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default();
        options.insertStyleElement =
          _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default();

        var update =
          _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(
            _css_loader_dist_cjs_js_pagination_css__WEBPACK_IMPORTED_MODULE_6__[
              'default'
            ],
            options,
          );

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          _css_loader_dist_cjs_js_pagination_css__WEBPACK_IMPORTED_MODULE_6__[
            'default'
          ] &&
          _css_loader_dist_cjs_js_pagination_css__WEBPACK_IMPORTED_MODULE_6__[
            'default'
          ].locals
            ? _css_loader_dist_cjs_js_pagination_css__WEBPACK_IMPORTED_MODULE_6__[
                'default'
              ].locals
            : undefined;

        /***/
      },

    /***/ './node_modules/swiper/modules/pagination.mjs':
      /*!****************************************************!*\
  !*** ./node_modules/swiper/modules/pagination.mjs ***!
  \****************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ Pagination,
          /* harmony export */
        });
        /* harmony import */ var _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/classes-to-selector.mjs */ './node_modules/swiper/shared/classes-to-selector.mjs',
          );
        /* harmony import */ var _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/create-element-if-not-defined.mjs */ './node_modules/swiper/shared/create-element-if-not-defined.mjs',
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function Pagination(_ref) {
          let { swiper, extendParams, on, emit } = _ref;
          const pfx = 'swiper-pagination';
          extendParams({
            pagination: {
              el: null,
              bulletElement: 'span',
              clickable: false,
              hideOnClick: false,
              renderBullet: null,
              renderProgressbar: null,
              renderFraction: null,
              renderCustom: null,
              progressbarOpposite: false,
              type: 'bullets',
              // 'bullets' or 'progressbar' or 'fraction' or 'custom'
              dynamicBullets: false,
              dynamicMainBullets: 1,
              formatFractionCurrent: (number) => number,
              formatFractionTotal: (number) => number,
              bulletClass: `${pfx}-bullet`,
              bulletActiveClass: `${pfx}-bullet-active`,
              modifierClass: `${pfx}-`,
              currentClass: `${pfx}-current`,
              totalClass: `${pfx}-total`,
              hiddenClass: `${pfx}-hidden`,
              progressbarFillClass: `${pfx}-progressbar-fill`,
              progressbarOppositeClass: `${pfx}-progressbar-opposite`,
              clickableClass: `${pfx}-clickable`,
              lockClass: `${pfx}-lock`,
              horizontalClass: `${pfx}-horizontal`,
              verticalClass: `${pfx}-vertical`,
              paginationDisabledClass: `${pfx}-disabled`,
            },
          });
          swiper.pagination = {
            el: null,
            bullets: [],
          };
          let bulletSize;
          let dynamicBulletIndex = 0;
          function isPaginationDisabled() {
            return (
              !swiper.params.pagination.el ||
              !swiper.pagination.el ||
              (Array.isArray(swiper.pagination.el) &&
                swiper.pagination.el.length === 0)
            );
          }
          function setSideBullets(bulletEl, position) {
            const { bulletActiveClass } = swiper.params.pagination;
            if (!bulletEl) return;
            bulletEl =
              bulletEl[
                `${position === 'prev' ? 'previous' : 'next'}ElementSibling`
              ];
            if (bulletEl) {
              bulletEl.classList.add(`${bulletActiveClass}-${position}`);
              bulletEl =
                bulletEl[
                  `${position === 'prev' ? 'previous' : 'next'}ElementSibling`
                ];
              if (bulletEl) {
                bulletEl.classList.add(
                  `${bulletActiveClass}-${position}-${position}`,
                );
              }
            }
          }
          function getMoveDirection(prevIndex, nextIndex, length) {
            prevIndex = prevIndex % length;
            nextIndex = nextIndex % length;
            if (nextIndex === prevIndex + 1) {
              return 'next';
            } else if (nextIndex === prevIndex - 1) {
              return 'previous';
            }
            return;
          }
          function onBulletClick(e) {
            const bulletEl = e.target.closest(
              (0,
              _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(
                swiper.params.pagination.bulletClass,
              ),
            );
            if (!bulletEl) {
              return;
            }
            e.preventDefault();
            const index =
              (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.i)(bulletEl) *
              swiper.params.slidesPerGroup;
            if (swiper.params.loop) {
              if (swiper.realIndex === index) return;
              const moveDirection = getMoveDirection(
                swiper.realIndex,
                index,
                swiper.slides.length,
              );
              if (moveDirection === 'next') {
                swiper.slideNext();
              } else if (moveDirection === 'previous') {
                swiper.slidePrev();
              } else {
                swiper.slideToLoop(index);
              }
            } else {
              swiper.slideTo(index);
            }
          }
          function update() {
            // Render || Update Pagination bullets/items
            const rtl = swiper.rtl;
            const params = swiper.params.pagination;
            if (isPaginationDisabled()) return;
            let el = swiper.pagination.el;
            el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);
            // Current/Total
            let current;
            let previousIndex;
            const slidesLength =
              swiper.virtual && swiper.params.virtual.enabled
                ? swiper.virtual.slides.length
                : swiper.slides.length;
            const total = swiper.params.loop
              ? Math.ceil(slidesLength / swiper.params.slidesPerGroup)
              : swiper.snapGrid.length;
            if (swiper.params.loop) {
              previousIndex = swiper.previousRealIndex || 0;
              current =
                swiper.params.slidesPerGroup > 1
                  ? Math.floor(swiper.realIndex / swiper.params.slidesPerGroup)
                  : swiper.realIndex;
            } else if (typeof swiper.snapIndex !== 'undefined') {
              current = swiper.snapIndex;
              previousIndex = swiper.previousSnapIndex;
            } else {
              previousIndex = swiper.previousIndex || 0;
              current = swiper.activeIndex || 0;
            }
            // Types
            if (
              params.type === 'bullets' &&
              swiper.pagination.bullets &&
              swiper.pagination.bullets.length > 0
            ) {
              const bullets = swiper.pagination.bullets;
              let firstIndex;
              let lastIndex;
              let midIndex;
              if (params.dynamicBullets) {
                bulletSize = (0,
                _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.h)(
                  bullets[0],
                  swiper.isHorizontal() ? 'width' : 'height',
                  true,
                );
                el.forEach((subEl) => {
                  subEl.style[swiper.isHorizontal() ? 'width' : 'height'] =
                    `${bulletSize * (params.dynamicMainBullets + 4)}px`;
                });
                if (
                  params.dynamicMainBullets > 1 &&
                  previousIndex !== undefined
                ) {
                  dynamicBulletIndex += current - (previousIndex || 0);
                  if (dynamicBulletIndex > params.dynamicMainBullets - 1) {
                    dynamicBulletIndex = params.dynamicMainBullets - 1;
                  } else if (dynamicBulletIndex < 0) {
                    dynamicBulletIndex = 0;
                  }
                }
                firstIndex = Math.max(current - dynamicBulletIndex, 0);
                lastIndex =
                  firstIndex +
                  (Math.min(bullets.length, params.dynamicMainBullets) - 1);
                midIndex = (lastIndex + firstIndex) / 2;
              }
              bullets.forEach((bulletEl) => {
                const classesToRemove = [
                  ...[
                    '',
                    '-next',
                    '-next-next',
                    '-prev',
                    '-prev-prev',
                    '-main',
                  ].map((suffix) => `${params.bulletActiveClass}${suffix}`),
                ]
                  .map((s) =>
                    typeof s === 'string' && s.includes(' ') ? s.split(' ') : s,
                  )
                  .flat();
                bulletEl.classList.remove(...classesToRemove);
              });
              if (el.length > 1) {
                bullets.forEach((bullet) => {
                  const bulletIndex = (0,
                  _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.i)(bullet);
                  if (bulletIndex === current) {
                    bullet.classList.add(
                      ...params.bulletActiveClass.split(' '),
                    );
                  } else if (swiper.isElement) {
                    bullet.setAttribute('part', 'bullet');
                  }
                  if (params.dynamicBullets) {
                    if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {
                      bullet.classList.add(
                        ...`${params.bulletActiveClass}-main`.split(' '),
                      );
                    }
                    if (bulletIndex === firstIndex) {
                      setSideBullets(bullet, 'prev');
                    }
                    if (bulletIndex === lastIndex) {
                      setSideBullets(bullet, 'next');
                    }
                  }
                });
              } else {
                const bullet = bullets[current];
                if (bullet) {
                  bullet.classList.add(...params.bulletActiveClass.split(' '));
                }
                if (swiper.isElement) {
                  bullets.forEach((bulletEl, bulletIndex) => {
                    bulletEl.setAttribute(
                      'part',
                      bulletIndex === current ? 'bullet-active' : 'bullet',
                    );
                  });
                }
                if (params.dynamicBullets) {
                  const firstDisplayedBullet = bullets[firstIndex];
                  const lastDisplayedBullet = bullets[lastIndex];
                  for (let i = firstIndex; i <= lastIndex; i += 1) {
                    if (bullets[i]) {
                      bullets[i].classList.add(
                        ...`${params.bulletActiveClass}-main`.split(' '),
                      );
                    }
                  }
                  setSideBullets(firstDisplayedBullet, 'prev');
                  setSideBullets(lastDisplayedBullet, 'next');
                }
              }
              if (params.dynamicBullets) {
                const dynamicBulletsLength = Math.min(
                  bullets.length,
                  params.dynamicMainBullets + 4,
                );
                const bulletsOffset =
                  (bulletSize * dynamicBulletsLength - bulletSize) / 2 -
                  midIndex * bulletSize;
                const offsetProp = rtl ? 'right' : 'left';
                bullets.forEach((bullet) => {
                  bullet.style[swiper.isHorizontal() ? offsetProp : 'top'] =
                    `${bulletsOffset}px`;
                });
              }
            }
            el.forEach((subEl, subElIndex) => {
              if (params.type === 'fraction') {
                subEl
                  .querySelectorAll(
                    (0,
                    _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(
                      params.currentClass,
                    ),
                  )
                  .forEach((fractionEl) => {
                    fractionEl.textContent = params.formatFractionCurrent(
                      current + 1,
                    );
                  });
                subEl
                  .querySelectorAll(
                    (0,
                    _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(
                      params.totalClass,
                    ),
                  )
                  .forEach((totalEl) => {
                    totalEl.textContent = params.formatFractionTotal(total);
                  });
              }
              if (params.type === 'progressbar') {
                let progressbarDirection;
                if (params.progressbarOpposite) {
                  progressbarDirection = swiper.isHorizontal()
                    ? 'vertical'
                    : 'horizontal';
                } else {
                  progressbarDirection = swiper.isHorizontal()
                    ? 'horizontal'
                    : 'vertical';
                }
                const scale = (current + 1) / total;
                let scaleX = 1;
                let scaleY = 1;
                if (progressbarDirection === 'horizontal') {
                  scaleX = scale;
                } else {
                  scaleY = scale;
                }
                subEl
                  .querySelectorAll(
                    (0,
                    _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(
                      params.progressbarFillClass,
                    ),
                  )
                  .forEach((progressEl) => {
                    progressEl.style.transform = `translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`;
                    progressEl.style.transitionDuration = `${swiper.params.speed}ms`;
                  });
              }
              if (params.type === 'custom' && params.renderCustom) {
                (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.s)(
                  subEl,
                  params.renderCustom(swiper, current + 1, total),
                );
                if (subElIndex === 0) emit('paginationRender', subEl);
              } else {
                if (subElIndex === 0) emit('paginationRender', subEl);
                emit('paginationUpdate', subEl);
              }
              if (swiper.params.watchOverflow && swiper.enabled) {
                subEl.classList[swiper.isLocked ? 'add' : 'remove'](
                  params.lockClass,
                );
              }
            });
          }
          function render() {
            // Render Container
            const params = swiper.params.pagination;
            if (isPaginationDisabled()) return;
            const slidesLength =
              swiper.virtual && swiper.params.virtual.enabled
                ? swiper.virtual.slides.length
                : swiper.grid && swiper.params.grid.rows > 1
                  ? swiper.slides.length / Math.ceil(swiper.params.grid.rows)
                  : swiper.slides.length;
            let el = swiper.pagination.el;
            el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);
            let paginationHTML = '';
            if (params.type === 'bullets') {
              let numberOfBullets = swiper.params.loop
                ? Math.ceil(slidesLength / swiper.params.slidesPerGroup)
                : swiper.snapGrid.length;
              if (
                swiper.params.freeMode &&
                swiper.params.freeMode.enabled &&
                numberOfBullets > slidesLength
              ) {
                numberOfBullets = slidesLength;
              }
              for (let i = 0; i < numberOfBullets; i += 1) {
                if (params.renderBullet) {
                  paginationHTML += params.renderBullet.call(
                    swiper,
                    i,
                    params.bulletClass,
                  );
                } else {
                  // prettier-ignore
                  paginationHTML += `<${params.bulletElement} ${swiper.isElement ? 'part="bullet"' : ''} class="${params.bulletClass}"></${params.bulletElement}>`;
                }
              }
            }
            if (params.type === 'fraction') {
              if (params.renderFraction) {
                paginationHTML = params.renderFraction.call(
                  swiper,
                  params.currentClass,
                  params.totalClass,
                );
              } else {
                paginationHTML =
                  `<span class="${params.currentClass}"></span>` +
                  ' / ' +
                  `<span class="${params.totalClass}"></span>`;
              }
            }
            if (params.type === 'progressbar') {
              if (params.renderProgressbar) {
                paginationHTML = params.renderProgressbar.call(
                  swiper,
                  params.progressbarFillClass,
                );
              } else {
                paginationHTML = `<span class="${params.progressbarFillClass}"></span>`;
              }
            }
            swiper.pagination.bullets = [];
            el.forEach((subEl) => {
              if (params.type !== 'custom') {
                (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.s)(
                  subEl,
                  paginationHTML || '',
                );
              }
              if (params.type === 'bullets') {
                swiper.pagination.bullets.push(
                  ...subEl.querySelectorAll(
                    (0,
                    _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(
                      params.bulletClass,
                    ),
                  ),
                );
              }
            });
            if (params.type !== 'custom') {
              emit('paginationRender', el[0]);
            }
          }
          function init() {
            swiper.params.pagination = (0,
            _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(
              swiper,
              swiper.originalParams.pagination,
              swiper.params.pagination,
              {
                el: 'swiper-pagination',
              },
            );
            const params = swiper.params.pagination;
            if (!params.el) return;
            let el;
            if (typeof params.el === 'string' && swiper.isElement) {
              el = swiper.el.querySelector(params.el);
            }
            if (!el && typeof params.el === 'string') {
              el = [...document.querySelectorAll(params.el)];
            }
            if (!el) {
              el = params.el;
            }
            if (!el || el.length === 0) return;
            if (
              swiper.params.uniqueNavElements &&
              typeof params.el === 'string' &&
              Array.isArray(el) &&
              el.length > 1
            ) {
              el = [...swiper.el.querySelectorAll(params.el)];
              // check if it belongs to another nested Swiper
              if (el.length > 1) {
                el = el.find((subEl) => {
                  if (
                    (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.b)(
                      subEl,
                      '.swiper',
                    )[0] !== swiper.el
                  )
                    return false;
                  return true;
                });
              }
            }
            if (Array.isArray(el) && el.length === 1) el = el[0];
            Object.assign(swiper.pagination, {
              el,
            });
            el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);
            el.forEach((subEl) => {
              if (params.type === 'bullets' && params.clickable) {
                subEl.classList.add(
                  ...(params.clickableClass || '').split(' '),
                );
              }
              subEl.classList.add(params.modifierClass + params.type);
              subEl.classList.add(
                swiper.isHorizontal()
                  ? params.horizontalClass
                  : params.verticalClass,
              );
              if (params.type === 'bullets' && params.dynamicBullets) {
                subEl.classList.add(
                  `${params.modifierClass}${params.type}-dynamic`,
                );
                dynamicBulletIndex = 0;
                if (params.dynamicMainBullets < 1) {
                  params.dynamicMainBullets = 1;
                }
              }
              if (params.type === 'progressbar' && params.progressbarOpposite) {
                subEl.classList.add(params.progressbarOppositeClass);
              }
              if (params.clickable) {
                subEl.addEventListener('click', onBulletClick);
              }
              if (!swiper.enabled) {
                subEl.classList.add(params.lockClass);
              }
            });
          }
          function destroy() {
            const params = swiper.params.pagination;
            if (isPaginationDisabled()) return;
            let el = swiper.pagination.el;
            if (el) {
              el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);
              el.forEach((subEl) => {
                subEl.classList.remove(params.hiddenClass);
                subEl.classList.remove(params.modifierClass + params.type);
                subEl.classList.remove(
                  swiper.isHorizontal()
                    ? params.horizontalClass
                    : params.verticalClass,
                );
                if (params.clickable) {
                  subEl.classList.remove(
                    ...(params.clickableClass || '').split(' '),
                  );
                  subEl.removeEventListener('click', onBulletClick);
                }
              });
            }
            if (swiper.pagination.bullets)
              swiper.pagination.bullets.forEach((subEl) =>
                subEl.classList.remove(...params.bulletActiveClass.split(' ')),
              );
          }
          on('changeDirection', () => {
            if (!swiper.pagination || !swiper.pagination.el) return;
            const params = swiper.params.pagination;
            let { el } = swiper.pagination;
            el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);
            el.forEach((subEl) => {
              subEl.classList.remove(
                params.horizontalClass,
                params.verticalClass,
              );
              subEl.classList.add(
                swiper.isHorizontal()
                  ? params.horizontalClass
                  : params.verticalClass,
              );
            });
          });
          on('init', () => {
            if (swiper.params.pagination.enabled === false) {
              // eslint-disable-next-line
              disable();
            } else {
              init();
              render();
              update();
            }
          });
          on('activeIndexChange', () => {
            if (typeof swiper.snapIndex === 'undefined') {
              update();
            }
          });
          on('snapIndexChange', () => {
            update();
          });
          on('snapGridLengthChange', () => {
            render();
            update();
          });
          on('destroy', () => {
            destroy();
          });
          on('enable disable', () => {
            let { el } = swiper.pagination;
            if (el) {
              el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);
              el.forEach((subEl) =>
                subEl.classList[swiper.enabled ? 'remove' : 'add'](
                  swiper.params.pagination.lockClass,
                ),
              );
            }
          });
          on('lock unlock', () => {
            update();
          });
          on('click', (_s, e) => {
            const targetEl = e.target;
            const el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(
              swiper.pagination.el,
            );
            if (
              swiper.params.pagination.el &&
              swiper.params.pagination.hideOnClick &&
              el &&
              el.length > 0 &&
              !targetEl.classList.contains(swiper.params.pagination.bulletClass)
            ) {
              if (
                swiper.navigation &&
                ((swiper.navigation.nextEl &&
                  targetEl === swiper.navigation.nextEl) ||
                  (swiper.navigation.prevEl &&
                    targetEl === swiper.navigation.prevEl))
              )
                return;
              const isHidden = el[0].classList.contains(
                swiper.params.pagination.hiddenClass,
              );
              if (isHidden === true) {
                emit('paginationShow');
              } else {
                emit('paginationHide');
              }
              el.forEach((subEl) =>
                subEl.classList.toggle(swiper.params.pagination.hiddenClass),
              );
            }
          });
          const enable = () => {
            swiper.el.classList.remove(
              swiper.params.pagination.paginationDisabledClass,
            );
            let { el } = swiper.pagination;
            if (el) {
              el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);
              el.forEach((subEl) =>
                subEl.classList.remove(
                  swiper.params.pagination.paginationDisabledClass,
                ),
              );
            }
            init();
            render();
            update();
          };
          const disable = () => {
            swiper.el.classList.add(
              swiper.params.pagination.paginationDisabledClass,
            );
            let { el } = swiper.pagination;
            if (el) {
              el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);
              el.forEach((subEl) =>
                subEl.classList.add(
                  swiper.params.pagination.paginationDisabledClass,
                ),
              );
            }
            destroy();
          };
          Object.assign(swiper.pagination, {
            enable,
            disable,
            render,
            update,
            init,
            destroy,
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/parallax.mjs':
      /*!**************************************************!*\
  !*** ./node_modules/swiper/modules/parallax.mjs ***!
  \**************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ Parallax,
          /* harmony export */
        });
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function Parallax(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            parallax: {
              enabled: false,
            },
          });
          const elementsSelector =
            '[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]';
          const setTransform = (el, progress) => {
            const { rtl } = swiper;
            const rtlFactor = rtl ? -1 : 1;
            const p = el.getAttribute('data-swiper-parallax') || '0';
            let x = el.getAttribute('data-swiper-parallax-x');
            let y = el.getAttribute('data-swiper-parallax-y');
            const scale = el.getAttribute('data-swiper-parallax-scale');
            const opacity = el.getAttribute('data-swiper-parallax-opacity');
            const rotate = el.getAttribute('data-swiper-parallax-rotate');
            if (x || y) {
              x = x || '0';
              y = y || '0';
            } else if (swiper.isHorizontal()) {
              x = p;
              y = '0';
            } else {
              y = p;
              x = '0';
            }
            if (x.indexOf('%') >= 0) {
              x = `${parseInt(x, 10) * progress * rtlFactor}%`;
            } else {
              x = `${x * progress * rtlFactor}px`;
            }
            if (y.indexOf('%') >= 0) {
              y = `${parseInt(y, 10) * progress}%`;
            } else {
              y = `${y * progress}px`;
            }
            if (typeof opacity !== 'undefined' && opacity !== null) {
              const currentOpacity =
                opacity - (opacity - 1) * (1 - Math.abs(progress));
              el.style.opacity = currentOpacity;
            }
            let transform = `translate3d(${x}, ${y}, 0px)`;
            if (typeof scale !== 'undefined' && scale !== null) {
              const currentScale =
                scale - (scale - 1) * (1 - Math.abs(progress));
              transform += ` scale(${currentScale})`;
            }
            if (rotate && typeof rotate !== 'undefined' && rotate !== null) {
              const currentRotate = rotate * progress * -1;
              transform += ` rotate(${currentRotate}deg)`;
            }
            el.style.transform = transform;
          };
          const setTranslate = () => {
            const { el, slides, progress, snapGrid, isElement } = swiper;
            const elements = (0,
            _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(
              el,
              elementsSelector,
            );
            if (swiper.isElement) {
              elements.push(
                ...(0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(
                  swiper.hostEl,
                  elementsSelector,
                ),
              );
            }
            elements.forEach((subEl) => {
              setTransform(subEl, progress);
            });
            slides.forEach((slideEl, slideIndex) => {
              let slideProgress = slideEl.progress;
              if (
                swiper.params.slidesPerGroup > 1 &&
                swiper.params.slidesPerView !== 'auto'
              ) {
                slideProgress +=
                  Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);
              }
              slideProgress = Math.min(Math.max(slideProgress, -1), 1);
              slideEl
                .querySelectorAll(
                  `${elementsSelector}, [data-swiper-parallax-rotate]`,
                )
                .forEach((subEl) => {
                  setTransform(subEl, slideProgress);
                });
            });
          };
          const setTransition = function (duration) {
            if (duration === void 0) {
              duration = swiper.params.speed;
            }
            const { el, hostEl } = swiper;
            const elements = [...el.querySelectorAll(elementsSelector)];
            if (swiper.isElement) {
              elements.push(...hostEl.querySelectorAll(elementsSelector));
            }
            elements.forEach((parallaxEl) => {
              let parallaxDuration =
                parseInt(
                  parallaxEl.getAttribute('data-swiper-parallax-duration'),
                  10,
                ) || duration;
              if (duration === 0) parallaxDuration = 0;
              parallaxEl.style.transitionDuration = `${parallaxDuration}ms`;
            });
          };
          on('beforeInit', () => {
            if (!swiper.params.parallax.enabled) return;
            swiper.params.watchSlidesProgress = true;
            swiper.originalParams.watchSlidesProgress = true;
          });
          on('init', () => {
            if (!swiper.params.parallax.enabled) return;
            setTranslate();
          });
          on('setTranslate', () => {
            if (!swiper.params.parallax.enabled) return;
            setTranslate();
          });
          on('setTransition', (_swiper, duration) => {
            if (!swiper.params.parallax.enabled) return;
            setTransition(duration);
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/scrollbar.mjs':
      /*!***************************************************!*\
  !*** ./node_modules/swiper/modules/scrollbar.mjs ***!
  \***************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ Scrollbar,
          /* harmony export */
        });
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ './node_modules/swiper/shared/ssr-window.esm.mjs',
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );
        /* harmony import */ var _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../shared/create-element-if-not-defined.mjs */ './node_modules/swiper/shared/create-element-if-not-defined.mjs',
          );
        /* harmony import */ var _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../shared/classes-to-selector.mjs */ './node_modules/swiper/shared/classes-to-selector.mjs',
          );

        function Scrollbar(_ref) {
          let { swiper, extendParams, on, emit } = _ref;
          const document = (0,
          _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();
          let isTouched = false;
          let timeout = null;
          let dragTimeout = null;
          let dragStartPos;
          let dragSize;
          let trackSize;
          let divider;
          extendParams({
            scrollbar: {
              el: null,
              dragSize: 'auto',
              hide: false,
              draggable: false,
              snapOnRelease: true,
              lockClass: 'swiper-scrollbar-lock',
              dragClass: 'swiper-scrollbar-drag',
              scrollbarDisabledClass: 'swiper-scrollbar-disabled',
              horizontalClass: `swiper-scrollbar-horizontal`,
              verticalClass: `swiper-scrollbar-vertical`,
            },
          });
          swiper.scrollbar = {
            el: null,
            dragEl: null,
          };
          function setTranslate() {
            if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
            const { scrollbar, rtlTranslate: rtl } = swiper;
            const { dragEl, el } = scrollbar;
            const params = swiper.params.scrollbar;
            const progress = swiper.params.loop
              ? swiper.progressLoop
              : swiper.progress;
            let newSize = dragSize;
            let newPos = (trackSize - dragSize) * progress;
            if (rtl) {
              newPos = -newPos;
              if (newPos > 0) {
                newSize = dragSize - newPos;
                newPos = 0;
              } else if (-newPos + dragSize > trackSize) {
                newSize = trackSize + newPos;
              }
            } else if (newPos < 0) {
              newSize = dragSize + newPos;
              newPos = 0;
            } else if (newPos + dragSize > trackSize) {
              newSize = trackSize - newPos;
            }
            if (swiper.isHorizontal()) {
              dragEl.style.transform = `translate3d(${newPos}px, 0, 0)`;
              dragEl.style.width = `${newSize}px`;
            } else {
              dragEl.style.transform = `translate3d(0px, ${newPos}px, 0)`;
              dragEl.style.height = `${newSize}px`;
            }
            if (params.hide) {
              clearTimeout(timeout);
              el.style.opacity = 1;
              timeout = setTimeout(() => {
                el.style.opacity = 0;
                el.style.transitionDuration = '400ms';
              }, 1000);
            }
          }
          function setTransition(duration) {
            if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
            swiper.scrollbar.dragEl.style.transitionDuration = `${duration}ms`;
          }
          function updateSize() {
            if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
            const { scrollbar } = swiper;
            const { dragEl, el } = scrollbar;
            dragEl.style.width = '';
            dragEl.style.height = '';
            trackSize = swiper.isHorizontal()
              ? el.offsetWidth
              : el.offsetHeight;
            divider =
              swiper.size /
              (swiper.virtualSize +
                swiper.params.slidesOffsetBefore -
                (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));
            if (swiper.params.scrollbar.dragSize === 'auto') {
              dragSize = trackSize * divider;
            } else {
              dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);
            }
            if (swiper.isHorizontal()) {
              dragEl.style.width = `${dragSize}px`;
            } else {
              dragEl.style.height = `${dragSize}px`;
            }
            if (divider >= 1) {
              el.style.display = 'none';
            } else {
              el.style.display = '';
            }
            if (swiper.params.scrollbar.hide) {
              el.style.opacity = 0;
            }
            if (swiper.params.watchOverflow && swiper.enabled) {
              scrollbar.el.classList[swiper.isLocked ? 'add' : 'remove'](
                swiper.params.scrollbar.lockClass,
              );
            }
          }
          function getPointerPosition(e) {
            return swiper.isHorizontal() ? e.clientX : e.clientY;
          }
          function setDragPosition(e) {
            const { scrollbar, rtlTranslate: rtl } = swiper;
            const { el } = scrollbar;
            let positionRatio;
            positionRatio =
              (getPointerPosition(e) -
                (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(el)[
                  swiper.isHorizontal() ? 'left' : 'top'
                ] -
                (dragStartPos !== null ? dragStartPos : dragSize / 2)) /
              (trackSize - dragSize);
            positionRatio = Math.max(Math.min(positionRatio, 1), 0);
            if (rtl) {
              positionRatio = 1 - positionRatio;
            }
            const position =
              swiper.minTranslate() +
              (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;
            swiper.updateProgress(position);
            swiper.setTranslate(position);
            swiper.updateActiveIndex();
            swiper.updateSlidesClasses();
          }
          function onDragStart(e) {
            const params = swiper.params.scrollbar;
            const { scrollbar, wrapperEl } = swiper;
            const { el, dragEl } = scrollbar;
            isTouched = true;
            dragStartPos =
              e.target === dragEl
                ? getPointerPosition(e) -
                  e.target.getBoundingClientRect()[
                    swiper.isHorizontal() ? 'left' : 'top'
                  ]
                : null;
            e.preventDefault();
            e.stopPropagation();
            wrapperEl.style.transitionDuration = '100ms';
            dragEl.style.transitionDuration = '100ms';
            setDragPosition(e);
            clearTimeout(dragTimeout);
            el.style.transitionDuration = '0ms';
            if (params.hide) {
              el.style.opacity = 1;
            }
            if (swiper.params.cssMode) {
              swiper.wrapperEl.style['scroll-snap-type'] = 'none';
            }
            emit('scrollbarDragStart', e);
          }
          function onDragMove(e) {
            const { scrollbar, wrapperEl } = swiper;
            const { el, dragEl } = scrollbar;
            if (!isTouched) return;
            if (e.preventDefault && e.cancelable) e.preventDefault();
            else e.returnValue = false;
            setDragPosition(e);
            wrapperEl.style.transitionDuration = '0ms';
            el.style.transitionDuration = '0ms';
            dragEl.style.transitionDuration = '0ms';
            emit('scrollbarDragMove', e);
          }
          function onDragEnd(e) {
            const params = swiper.params.scrollbar;
            const { scrollbar, wrapperEl } = swiper;
            const { el } = scrollbar;
            if (!isTouched) return;
            isTouched = false;
            if (swiper.params.cssMode) {
              swiper.wrapperEl.style['scroll-snap-type'] = '';
              wrapperEl.style.transitionDuration = '';
            }
            if (params.hide) {
              clearTimeout(dragTimeout);
              dragTimeout = (0,
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(() => {
                el.style.opacity = 0;
                el.style.transitionDuration = '400ms';
              }, 1000);
            }
            emit('scrollbarDragEnd', e);
            if (params.snapOnRelease) {
              swiper.slideToClosest();
            }
          }
          function events(method) {
            const { scrollbar, params } = swiper;
            const el = scrollbar.el;
            if (!el) return;
            const target = el;
            const activeListener = params.passiveListeners
              ? {
                  passive: false,
                  capture: false,
                }
              : false;
            const passiveListener = params.passiveListeners
              ? {
                  passive: true,
                  capture: false,
                }
              : false;
            if (!target) return;
            const eventMethod =
              method === 'on' ? 'addEventListener' : 'removeEventListener';
            target[eventMethod]('pointerdown', onDragStart, activeListener);
            document[eventMethod]('pointermove', onDragMove, activeListener);
            document[eventMethod]('pointerup', onDragEnd, passiveListener);
          }
          function enableDraggable() {
            if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
            events('on');
          }
          function disableDraggable() {
            if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
            events('off');
          }
          function init() {
            const { scrollbar, el: swiperEl } = swiper;
            swiper.params.scrollbar = (0,
            _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(
              swiper,
              swiper.originalParams.scrollbar,
              swiper.params.scrollbar,
              {
                el: 'swiper-scrollbar',
              },
            );
            const params = swiper.params.scrollbar;
            if (!params.el) return;
            let el;
            if (typeof params.el === 'string' && swiper.isElement) {
              el = swiper.el.querySelector(params.el);
            }
            if (!el && typeof params.el === 'string') {
              el = document.querySelectorAll(params.el);
              if (!el.length) return;
            } else if (!el) {
              el = params.el;
            }
            if (
              swiper.params.uniqueNavElements &&
              typeof params.el === 'string' &&
              el.length > 1 &&
              swiperEl.querySelectorAll(params.el).length === 1
            ) {
              el = swiperEl.querySelector(params.el);
            }
            if (el.length > 0) el = el[0];
            el.classList.add(
              swiper.isHorizontal()
                ? params.horizontalClass
                : params.verticalClass,
            );
            let dragEl;
            if (el) {
              dragEl = el.querySelector(
                (0,
                _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(
                  swiper.params.scrollbar.dragClass,
                ),
              );
              if (!dragEl) {
                dragEl = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(
                  'div',
                  swiper.params.scrollbar.dragClass,
                );
                el.append(dragEl);
              }
            }
            Object.assign(scrollbar, {
              el,
              dragEl,
            });
            if (params.draggable) {
              enableDraggable();
            }
            if (el) {
              el.classList[swiper.enabled ? 'remove' : 'add'](
                ...(0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(
                  swiper.params.scrollbar.lockClass,
                ),
              );
            }
          }
          function destroy() {
            const params = swiper.params.scrollbar;
            const el = swiper.scrollbar.el;
            if (el) {
              el.classList.remove(
                ...(0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(
                  swiper.isHorizontal()
                    ? params.horizontalClass
                    : params.verticalClass,
                ),
              );
            }
            disableDraggable();
          }
          on('changeDirection', () => {
            if (!swiper.scrollbar || !swiper.scrollbar.el) return;
            const params = swiper.params.scrollbar;
            let { el } = swiper.scrollbar;
            el = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(el);
            el.forEach((subEl) => {
              subEl.classList.remove(
                params.horizontalClass,
                params.verticalClass,
              );
              subEl.classList.add(
                swiper.isHorizontal()
                  ? params.horizontalClass
                  : params.verticalClass,
              );
            });
          });
          on('init', () => {
            if (swiper.params.scrollbar.enabled === false) {
              // eslint-disable-next-line
              disable();
            } else {
              init();
              updateSize();
              setTranslate();
            }
          });
          on('update resize observerUpdate lock unlock changeDirection', () => {
            updateSize();
          });
          on('setTranslate', () => {
            setTranslate();
          });
          on('setTransition', (_s, duration) => {
            setTransition(duration);
          });
          on('enable disable', () => {
            const { el } = swiper.scrollbar;
            if (el) {
              el.classList[swiper.enabled ? 'remove' : 'add'](
                ...(0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(
                  swiper.params.scrollbar.lockClass,
                ),
              );
            }
          });
          on('destroy', () => {
            destroy();
          });
          const enable = () => {
            swiper.el.classList.remove(
              ...(0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(
                swiper.params.scrollbar.scrollbarDisabledClass,
              ),
            );
            if (swiper.scrollbar.el) {
              swiper.scrollbar.el.classList.remove(
                ...(0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(
                  swiper.params.scrollbar.scrollbarDisabledClass,
                ),
              );
            }
            init();
            updateSize();
            setTranslate();
          };
          const disable = () => {
            swiper.el.classList.add(
              ...(0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(
                swiper.params.scrollbar.scrollbarDisabledClass,
              ),
            );
            if (swiper.scrollbar.el) {
              swiper.scrollbar.el.classList.add(
                ...(0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(
                  swiper.params.scrollbar.scrollbarDisabledClass,
                ),
              );
            }
            destroy();
          };
          Object.assign(swiper.scrollbar, {
            enable,
            disable,
            updateSize,
            setTranslate,
            init,
            destroy,
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/thumbs.mjs':
      /*!************************************************!*\
  !*** ./node_modules/swiper/modules/thumbs.mjs ***!
  \************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ Thumb,
          /* harmony export */
        });
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ './node_modules/swiper/shared/ssr-window.esm.mjs',
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function Thumb(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            thumbs: {
              swiper: null,
              multipleActiveThumbs: true,
              autoScrollOffset: 0,
              slideThumbActiveClass: 'swiper-slide-thumb-active',
              thumbsContainerClass: 'swiper-thumbs',
            },
          });
          let initialized = false;
          let swiperCreated = false;
          swiper.thumbs = {
            swiper: null,
          };
          function onThumbClick() {
            const thumbsSwiper = swiper.thumbs.swiper;
            if (!thumbsSwiper || thumbsSwiper.destroyed) return;
            const clickedIndex = thumbsSwiper.clickedIndex;
            const clickedSlide = thumbsSwiper.clickedSlide;
            if (
              clickedSlide &&
              clickedSlide.classList.contains(
                swiper.params.thumbs.slideThumbActiveClass,
              )
            )
              return;
            if (typeof clickedIndex === 'undefined' || clickedIndex === null)
              return;
            let slideToIndex;
            if (thumbsSwiper.params.loop) {
              slideToIndex = parseInt(
                thumbsSwiper.clickedSlide.getAttribute(
                  'data-swiper-slide-index',
                ),
                10,
              );
            } else {
              slideToIndex = clickedIndex;
            }
            if (swiper.params.loop) {
              swiper.slideToLoop(slideToIndex);
            } else {
              swiper.slideTo(slideToIndex);
            }
          }
          function init() {
            const { thumbs: thumbsParams } = swiper.params;
            if (initialized) return false;
            initialized = true;
            const SwiperClass = swiper.constructor;
            if (thumbsParams.swiper instanceof SwiperClass) {
              if (thumbsParams.swiper.destroyed) {
                initialized = false;
                return false;
              }
              swiper.thumbs.swiper = thumbsParams.swiper;
              Object.assign(swiper.thumbs.swiper.originalParams, {
                watchSlidesProgress: true,
                slideToClickedSlide: false,
              });
              Object.assign(swiper.thumbs.swiper.params, {
                watchSlidesProgress: true,
                slideToClickedSlide: false,
              });
              swiper.thumbs.swiper.update();
            } else if (
              (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.o)(
                thumbsParams.swiper,
              )
            ) {
              const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);
              Object.assign(thumbsSwiperParams, {
                watchSlidesProgress: true,
                slideToClickedSlide: false,
              });
              swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);
              swiperCreated = true;
            }
            swiper.thumbs.swiper.el.classList.add(
              swiper.params.thumbs.thumbsContainerClass,
            );
            swiper.thumbs.swiper.on('tap', onThumbClick);
            return true;
          }
          function update(initial) {
            const thumbsSwiper = swiper.thumbs.swiper;
            if (!thumbsSwiper || thumbsSwiper.destroyed) return;
            const slidesPerView =
              thumbsSwiper.params.slidesPerView === 'auto'
                ? thumbsSwiper.slidesPerViewDynamic()
                : thumbsSwiper.params.slidesPerView;

            // Activate thumbs
            let thumbsToActivate = 1;
            const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;
            if (
              swiper.params.slidesPerView > 1 &&
              !swiper.params.centeredSlides
            ) {
              thumbsToActivate = swiper.params.slidesPerView;
            }
            if (!swiper.params.thumbs.multipleActiveThumbs) {
              thumbsToActivate = 1;
            }
            thumbsToActivate = Math.floor(thumbsToActivate);
            thumbsSwiper.slides.forEach((slideEl) =>
              slideEl.classList.remove(thumbActiveClass),
            );
            if (
              thumbsSwiper.params.loop ||
              (thumbsSwiper.params.virtual &&
                thumbsSwiper.params.virtual.enabled)
            ) {
              for (let i = 0; i < thumbsToActivate; i += 1) {
                (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(
                  thumbsSwiper.slidesEl,
                  `[data-swiper-slide-index="${swiper.realIndex + i}"]`,
                ).forEach((slideEl) => {
                  slideEl.classList.add(thumbActiveClass);
                });
              }
            } else {
              for (let i = 0; i < thumbsToActivate; i += 1) {
                if (thumbsSwiper.slides[swiper.realIndex + i]) {
                  thumbsSwiper.slides[swiper.realIndex + i].classList.add(
                    thumbActiveClass,
                  );
                }
              }
            }
            const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;
            const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;
            if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {
              const currentThumbsIndex = thumbsSwiper.activeIndex;
              let newThumbsIndex;
              let direction;
              if (thumbsSwiper.params.loop) {
                const newThumbsSlide = thumbsSwiper.slides.find(
                  (slideEl) =>
                    slideEl.getAttribute('data-swiper-slide-index') ===
                    `${swiper.realIndex}`,
                );
                newThumbsIndex = thumbsSwiper.slides.indexOf(newThumbsSlide);
                direction =
                  swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';
              } else {
                newThumbsIndex = swiper.realIndex;
                direction =
                  newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';
              }
              if (useOffset) {
                newThumbsIndex +=
                  direction === 'next'
                    ? autoScrollOffset
                    : -1 * autoScrollOffset;
              }
              if (
                thumbsSwiper.visibleSlidesIndexes &&
                thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0
              ) {
                if (thumbsSwiper.params.centeredSlides) {
                  if (newThumbsIndex > currentThumbsIndex) {
                    newThumbsIndex =
                      newThumbsIndex - Math.floor(slidesPerView / 2) + 1;
                  } else {
                    newThumbsIndex =
                      newThumbsIndex + Math.floor(slidesPerView / 2) - 1;
                  }
                } else if (
                  newThumbsIndex > currentThumbsIndex &&
                  thumbsSwiper.params.slidesPerGroup === 1
                );
                thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);
              }
            }
          }
          on('beforeInit', () => {
            const { thumbs } = swiper.params;
            if (!thumbs || !thumbs.swiper) return;
            if (
              typeof thumbs.swiper === 'string' ||
              thumbs.swiper instanceof HTMLElement
            ) {
              const document = (0,
              _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();
              const getThumbsElementAndInit = () => {
                const thumbsElement =
                  typeof thumbs.swiper === 'string'
                    ? document.querySelector(thumbs.swiper)
                    : thumbs.swiper;
                if (thumbsElement && thumbsElement.swiper) {
                  thumbs.swiper = thumbsElement.swiper;
                  init();
                  update(true);
                } else if (thumbsElement) {
                  const eventName = `${swiper.params.eventsPrefix}init`;
                  const onThumbsSwiper = (e) => {
                    thumbs.swiper = e.detail[0];
                    thumbsElement.removeEventListener(
                      eventName,
                      onThumbsSwiper,
                    );
                    init();
                    update(true);
                    thumbs.swiper.update();
                    swiper.update();
                  };
                  thumbsElement.addEventListener(eventName, onThumbsSwiper);
                }
                return thumbsElement;
              };
              const watchForThumbsToAppear = () => {
                if (swiper.destroyed) return;
                const thumbsElement = getThumbsElementAndInit();
                if (!thumbsElement) {
                  requestAnimationFrame(watchForThumbsToAppear);
                }
              };
              requestAnimationFrame(watchForThumbsToAppear);
            } else {
              init();
              update(true);
            }
          });
          on('slideChange update resize observerUpdate', () => {
            update();
          });
          on('setTransition', (_s, duration) => {
            const thumbsSwiper = swiper.thumbs.swiper;
            if (!thumbsSwiper || thumbsSwiper.destroyed) return;
            thumbsSwiper.setTransition(duration);
          });
          on('beforeDestroy', () => {
            const thumbsSwiper = swiper.thumbs.swiper;
            if (!thumbsSwiper || thumbsSwiper.destroyed) return;
            if (swiperCreated) {
              thumbsSwiper.destroy();
            }
          });
          Object.assign(swiper.thumbs, {
            init,
            update,
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/virtual.mjs':
      /*!*************************************************!*\
  !*** ./node_modules/swiper/modules/virtual.mjs ***!
  \*************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ Virtual,
          /* harmony export */
        });
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ './node_modules/swiper/shared/ssr-window.esm.mjs',
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function Virtual(_ref) {
          let { swiper, extendParams, on, emit } = _ref;
          extendParams({
            virtual: {
              enabled: false,
              slides: [],
              cache: true,
              renderSlide: null,
              renderExternal: null,
              renderExternalUpdate: true,
              addSlidesBefore: 0,
              addSlidesAfter: 0,
            },
          });
          let cssModeTimeout;
          const document = (0,
          _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();
          swiper.virtual = {
            cache: {},
            from: undefined,
            to: undefined,
            slides: [],
            offset: 0,
            slidesGrid: [],
          };
          const tempDOM = document.createElement('div');
          function renderSlide(slide, index) {
            const params = swiper.params.virtual;
            if (params.cache && swiper.virtual.cache[index]) {
              return swiper.virtual.cache[index];
            }
            // eslint-disable-next-line
            let slideEl;
            if (params.renderSlide) {
              slideEl = params.renderSlide.call(swiper, slide, index);
              if (typeof slideEl === 'string') {
                (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(
                  tempDOM,
                  slideEl,
                );
                slideEl = tempDOM.children[0];
              }
            } else if (swiper.isElement) {
              slideEl = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(
                'swiper-slide',
              );
            } else {
              slideEl = (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(
                'div',
                swiper.params.slideClass,
              );
            }
            slideEl.setAttribute('data-swiper-slide-index', index);
            if (!params.renderSlide) {
              (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(
                slideEl,
                slide,
              );
            }
            if (params.cache) {
              swiper.virtual.cache[index] = slideEl;
            }
            return slideEl;
          }
          function update(force, beforeInit, forceActiveIndex) {
            const {
              slidesPerView,
              slidesPerGroup,
              centeredSlides,
              loop: isLoop,
              initialSlide,
            } = swiper.params;
            if (beforeInit && !isLoop && initialSlide > 0) {
              return;
            }
            const { addSlidesBefore, addSlidesAfter } = swiper.params.virtual;
            const {
              from: previousFrom,
              to: previousTo,
              slides,
              slidesGrid: previousSlidesGrid,
              offset: previousOffset,
            } = swiper.virtual;
            if (!swiper.params.cssMode) {
              swiper.updateActiveIndex();
            }
            const activeIndex =
              typeof forceActiveIndex === 'undefined'
                ? swiper.activeIndex || 0
                : forceActiveIndex;
            let offsetProp;
            if (swiper.rtlTranslate) offsetProp = 'right';
            else offsetProp = swiper.isHorizontal() ? 'left' : 'top';
            let slidesAfter;
            let slidesBefore;
            if (centeredSlides) {
              slidesAfter =
                Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;
              slidesBefore =
                Math.floor(slidesPerView / 2) +
                slidesPerGroup +
                addSlidesBefore;
            } else {
              slidesAfter =
                slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;
              slidesBefore =
                (isLoop ? slidesPerView : slidesPerGroup) + addSlidesBefore;
            }
            let from = activeIndex - slidesBefore;
            let to = activeIndex + slidesAfter;
            if (!isLoop) {
              from = Math.max(from, 0);
              to = Math.min(to, slides.length - 1);
            }
            let offset =
              (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);
            if (isLoop && activeIndex >= slidesBefore) {
              from -= slidesBefore;
              if (!centeredSlides) offset += swiper.slidesGrid[0];
            } else if (isLoop && activeIndex < slidesBefore) {
              from = -slidesBefore;
              if (centeredSlides) offset += swiper.slidesGrid[0];
            }
            Object.assign(swiper.virtual, {
              from,
              to,
              offset,
              slidesGrid: swiper.slidesGrid,
              slidesBefore,
              slidesAfter,
            });
            function onRendered() {
              swiper.updateSlides();
              swiper.updateProgress();
              swiper.updateSlidesClasses();
              emit('virtualUpdate');
            }
            if (previousFrom === from && previousTo === to && !force) {
              if (
                swiper.slidesGrid !== previousSlidesGrid &&
                offset !== previousOffset
              ) {
                swiper.slides.forEach((slideEl) => {
                  slideEl.style[offsetProp] =
                    `${offset - Math.abs(swiper.cssOverflowAdjustment())}px`;
                });
              }
              swiper.updateProgress();
              emit('virtualUpdate');
              return;
            }
            if (swiper.params.virtual.renderExternal) {
              swiper.params.virtual.renderExternal.call(swiper, {
                offset,
                from,
                to,
                slides: (function getSlides() {
                  const slidesToRender = [];
                  for (let i = from; i <= to; i += 1) {
                    slidesToRender.push(slides[i]);
                  }
                  return slidesToRender;
                })(),
              });
              if (swiper.params.virtual.renderExternalUpdate) {
                onRendered();
              } else {
                emit('virtualUpdate');
              }
              return;
            }
            const prependIndexes = [];
            const appendIndexes = [];
            const getSlideIndex = (index) => {
              let slideIndex = index;
              if (index < 0) {
                slideIndex = slides.length + index;
              } else if (slideIndex >= slides.length) {
                // eslint-disable-next-line
                slideIndex = slideIndex - slides.length;
              }
              return slideIndex;
            };
            if (force) {
              swiper.slides
                .filter((el) =>
                  el.matches(`.${swiper.params.slideClass}, swiper-slide`),
                )
                .forEach((slideEl) => {
                  slideEl.remove();
                });
            } else {
              for (let i = previousFrom; i <= previousTo; i += 1) {
                if (i < from || i > to) {
                  const slideIndex = getSlideIndex(i);
                  swiper.slides
                    .filter((el) =>
                      el.matches(
                        `.${swiper.params.slideClass}[data-swiper-slide-index="${slideIndex}"], swiper-slide[data-swiper-slide-index="${slideIndex}"]`,
                      ),
                    )
                    .forEach((slideEl) => {
                      slideEl.remove();
                    });
                }
              }
            }
            const loopFrom = isLoop ? -slides.length : 0;
            const loopTo = isLoop ? slides.length * 2 : slides.length;
            for (let i = loopFrom; i < loopTo; i += 1) {
              if (i >= from && i <= to) {
                const slideIndex = getSlideIndex(i);
                if (typeof previousTo === 'undefined' || force) {
                  appendIndexes.push(slideIndex);
                } else {
                  if (i > previousTo) appendIndexes.push(slideIndex);
                  if (i < previousFrom) prependIndexes.push(slideIndex);
                }
              }
            }
            appendIndexes.forEach((index) => {
              swiper.slidesEl.append(renderSlide(slides[index], index));
            });
            if (isLoop) {
              for (let i = prependIndexes.length - 1; i >= 0; i -= 1) {
                const index = prependIndexes[i];
                swiper.slidesEl.prepend(renderSlide(slides[index], index));
              }
            } else {
              prependIndexes.sort((a, b) => b - a);
              prependIndexes.forEach((index) => {
                swiper.slidesEl.prepend(renderSlide(slides[index], index));
              });
            }
            (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(
              swiper.slidesEl,
              '.swiper-slide, swiper-slide',
            ).forEach((slideEl) => {
              slideEl.style[offsetProp] =
                `${offset - Math.abs(swiper.cssOverflowAdjustment())}px`;
            });
            onRendered();
          }
          function appendSlide(slides) {
            if (typeof slides === 'object' && 'length' in slides) {
              for (let i = 0; i < slides.length; i += 1) {
                if (slides[i]) swiper.virtual.slides.push(slides[i]);
              }
            } else {
              swiper.virtual.slides.push(slides);
            }
            update(true);
          }
          function prependSlide(slides) {
            const activeIndex = swiper.activeIndex;
            let newActiveIndex = activeIndex + 1;
            let numberOfNewSlides = 1;
            if (Array.isArray(slides)) {
              for (let i = 0; i < slides.length; i += 1) {
                if (slides[i]) swiper.virtual.slides.unshift(slides[i]);
              }
              newActiveIndex = activeIndex + slides.length;
              numberOfNewSlides = slides.length;
            } else {
              swiper.virtual.slides.unshift(slides);
            }
            if (swiper.params.virtual.cache) {
              const cache = swiper.virtual.cache;
              const newCache = {};
              Object.keys(cache).forEach((cachedIndex) => {
                const cachedEl = cache[cachedIndex];
                const cachedElIndex = cachedEl.getAttribute(
                  'data-swiper-slide-index',
                );
                if (cachedElIndex) {
                  cachedEl.setAttribute(
                    'data-swiper-slide-index',
                    parseInt(cachedElIndex, 10) + numberOfNewSlides,
                  );
                }
                newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] =
                  cachedEl;
              });
              swiper.virtual.cache = newCache;
            }
            update(true);
            swiper.slideTo(newActiveIndex, 0);
          }
          function removeSlide(slidesIndexes) {
            if (typeof slidesIndexes === 'undefined' || slidesIndexes === null)
              return;
            let activeIndex = swiper.activeIndex;
            if (Array.isArray(slidesIndexes)) {
              for (let i = slidesIndexes.length - 1; i >= 0; i -= 1) {
                if (swiper.params.virtual.cache) {
                  delete swiper.virtual.cache[slidesIndexes[i]];
                  // shift cache indexes
                  Object.keys(swiper.virtual.cache).forEach((key) => {
                    if (key > slidesIndexes) {
                      swiper.virtual.cache[key - 1] = swiper.virtual.cache[key];
                      swiper.virtual.cache[key - 1].setAttribute(
                        'data-swiper-slide-index',
                        key - 1,
                      );
                      delete swiper.virtual.cache[key];
                    }
                  });
                }
                swiper.virtual.slides.splice(slidesIndexes[i], 1);
                if (slidesIndexes[i] < activeIndex) activeIndex -= 1;
                activeIndex = Math.max(activeIndex, 0);
              }
            } else {
              if (swiper.params.virtual.cache) {
                delete swiper.virtual.cache[slidesIndexes];
                // shift cache indexes
                Object.keys(swiper.virtual.cache).forEach((key) => {
                  if (key > slidesIndexes) {
                    swiper.virtual.cache[key - 1] = swiper.virtual.cache[key];
                    swiper.virtual.cache[key - 1].setAttribute(
                      'data-swiper-slide-index',
                      key - 1,
                    );
                    delete swiper.virtual.cache[key];
                  }
                });
              }
              swiper.virtual.slides.splice(slidesIndexes, 1);
              if (slidesIndexes < activeIndex) activeIndex -= 1;
              activeIndex = Math.max(activeIndex, 0);
            }
            update(true);
            swiper.slideTo(activeIndex, 0);
          }
          function removeAllSlides() {
            swiper.virtual.slides = [];
            if (swiper.params.virtual.cache) {
              swiper.virtual.cache = {};
            }
            update(true);
            swiper.slideTo(0, 0);
          }
          on('beforeInit', () => {
            if (!swiper.params.virtual.enabled) return;
            let domSlidesAssigned;
            if (typeof swiper.passedParams.virtual.slides === 'undefined') {
              const slides = [...swiper.slidesEl.children].filter((el) =>
                el.matches(`.${swiper.params.slideClass}, swiper-slide`),
              );
              if (slides && slides.length) {
                swiper.virtual.slides = [...slides];
                domSlidesAssigned = true;
                slides.forEach((slideEl, slideIndex) => {
                  slideEl.setAttribute('data-swiper-slide-index', slideIndex);
                  swiper.virtual.cache[slideIndex] = slideEl;
                  slideEl.remove();
                });
              }
            }
            if (!domSlidesAssigned) {
              swiper.virtual.slides = swiper.params.virtual.slides;
            }
            swiper.classNames.push(
              `${swiper.params.containerModifierClass}virtual`,
            );
            swiper.params.watchSlidesProgress = true;
            swiper.originalParams.watchSlidesProgress = true;
            update(false, true);
          });
          on('setTranslate', () => {
            if (!swiper.params.virtual.enabled) return;
            if (swiper.params.cssMode && !swiper._immediateVirtual) {
              clearTimeout(cssModeTimeout);
              cssModeTimeout = setTimeout(() => {
                update();
              }, 100);
            } else {
              update();
            }
          });
          on('init update resize', () => {
            if (!swiper.params.virtual.enabled) return;
            if (swiper.params.cssMode) {
              (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(
                swiper.wrapperEl,
                '--swiper-virtual-size',
                `${swiper.virtualSize}px`,
              );
            }
          });
          Object.assign(swiper.virtual, {
            appendSlide,
            prependSlide,
            removeSlide,
            removeAllSlides,
            update,
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/modules/zoom.mjs':
      /*!**********************************************!*\
  !*** ./node_modules/swiper/modules/zoom.mjs ***!
  \**********************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ Zoom,
          /* harmony export */
        });
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ './node_modules/swiper/shared/ssr-window.esm.mjs',
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function Zoom(_ref) {
          let { swiper, extendParams, on, emit } = _ref;
          const window = (0,
          _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          extendParams({
            zoom: {
              enabled: false,
              limitToOriginalSize: false,
              maxRatio: 3,
              minRatio: 1,
              panOnMouseMove: false,
              toggle: true,
              containerClass: 'swiper-zoom-container',
              zoomedSlideClass: 'swiper-slide-zoomed',
            },
          });
          swiper.zoom = {
            enabled: false,
          };
          let currentScale = 1;
          let isScaling = false;
          let isPanningWithMouse = false;
          let mousePanStart = {
            x: 0,
            y: 0,
          };
          const mousePanSensitivity = -3; // Negative to invert pan direction
          let fakeGestureTouched;
          let fakeGestureMoved;
          const evCache = [];
          const gesture = {
            originX: 0,
            originY: 0,
            slideEl: undefined,
            slideWidth: undefined,
            slideHeight: undefined,
            imageEl: undefined,
            imageWrapEl: undefined,
            maxRatio: 3,
          };
          const image = {
            isTouched: undefined,
            isMoved: undefined,
            currentX: undefined,
            currentY: undefined,
            minX: undefined,
            minY: undefined,
            maxX: undefined,
            maxY: undefined,
            width: undefined,
            height: undefined,
            startX: undefined,
            startY: undefined,
            touchesStart: {},
            touchesCurrent: {},
          };
          const velocity = {
            x: undefined,
            y: undefined,
            prevPositionX: undefined,
            prevPositionY: undefined,
            prevTime: undefined,
          };
          let scale = 1;
          Object.defineProperty(swiper.zoom, 'scale', {
            get() {
              return scale;
            },
            set(value) {
              if (scale !== value) {
                const imageEl = gesture.imageEl;
                const slideEl = gesture.slideEl;
                emit('zoomChange', value, imageEl, slideEl);
              }
              scale = value;
            },
          });
          function getDistanceBetweenTouches() {
            if (evCache.length < 2) return 1;
            const x1 = evCache[0].pageX;
            const y1 = evCache[0].pageY;
            const x2 = evCache[1].pageX;
            const y2 = evCache[1].pageY;
            const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);
            return distance;
          }
          function getMaxRatio() {
            const params = swiper.params.zoom;
            const maxRatio =
              gesture.imageWrapEl.getAttribute('data-swiper-zoom') ||
              params.maxRatio;
            if (
              params.limitToOriginalSize &&
              gesture.imageEl &&
              gesture.imageEl.naturalWidth
            ) {
              const imageMaxRatio =
                gesture.imageEl.naturalWidth / gesture.imageEl.offsetWidth;
              return Math.min(imageMaxRatio, maxRatio);
            }
            return maxRatio;
          }
          function getScaleOrigin() {
            if (evCache.length < 2)
              return {
                x: null,
                y: null,
              };
            const box = gesture.imageEl.getBoundingClientRect();
            return [
              (evCache[0].pageX +
                (evCache[1].pageX - evCache[0].pageX) / 2 -
                box.x -
                window.scrollX) /
                currentScale,
              (evCache[0].pageY +
                (evCache[1].pageY - evCache[0].pageY) / 2 -
                box.y -
                window.scrollY) /
                currentScale,
            ];
          }
          function getSlideSelector() {
            return swiper.isElement
              ? `swiper-slide`
              : `.${swiper.params.slideClass}`;
          }
          function eventWithinSlide(e) {
            const slideSelector = getSlideSelector();
            if (e.target.matches(slideSelector)) return true;
            if (
              swiper.slides.filter((slideEl) => slideEl.contains(e.target))
                .length > 0
            )
              return true;
            return false;
          }
          function eventWithinZoomContainer(e) {
            const selector = `.${swiper.params.zoom.containerClass}`;
            if (e.target.matches(selector)) return true;
            if (
              [...swiper.hostEl.querySelectorAll(selector)].filter(
                (containerEl) => containerEl.contains(e.target),
              ).length > 0
            )
              return true;
            return false;
          }

          // Events
          function onGestureStart(e) {
            if (e.pointerType === 'mouse') {
              evCache.splice(0, evCache.length);
            }
            if (!eventWithinSlide(e)) return;
            const params = swiper.params.zoom;
            fakeGestureTouched = false;
            fakeGestureMoved = false;
            evCache.push(e);
            if (evCache.length < 2) {
              return;
            }
            fakeGestureTouched = true;
            gesture.scaleStart = getDistanceBetweenTouches();
            if (!gesture.slideEl) {
              gesture.slideEl = e.target.closest(
                `.${swiper.params.slideClass}, swiper-slide`,
              );
              if (!gesture.slideEl)
                gesture.slideEl = swiper.slides[swiper.activeIndex];
              let imageEl = gesture.slideEl.querySelector(
                `.${params.containerClass}`,
              );
              if (imageEl) {
                imageEl = imageEl.querySelectorAll(
                  'picture, img, svg, canvas, .swiper-zoom-target',
                )[0];
              }
              gesture.imageEl = imageEl;
              if (imageEl) {
                gesture.imageWrapEl = (0,
                _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(
                  gesture.imageEl,
                  `.${params.containerClass}`,
                )[0];
              } else {
                gesture.imageWrapEl = undefined;
              }
              if (!gesture.imageWrapEl) {
                gesture.imageEl = undefined;
                return;
              }
              gesture.maxRatio = getMaxRatio();
            }
            if (gesture.imageEl) {
              const [originX, originY] = getScaleOrigin();
              gesture.originX = originX;
              gesture.originY = originY;
              gesture.imageEl.style.transitionDuration = '0ms';
            }
            isScaling = true;
          }
          function onGestureChange(e) {
            if (!eventWithinSlide(e)) return;
            const params = swiper.params.zoom;
            const zoom = swiper.zoom;
            const pointerIndex = evCache.findIndex(
              (cachedEv) => cachedEv.pointerId === e.pointerId,
            );
            if (pointerIndex >= 0) evCache[pointerIndex] = e;
            if (evCache.length < 2) {
              return;
            }
            fakeGestureMoved = true;
            gesture.scaleMove = getDistanceBetweenTouches();
            if (!gesture.imageEl) {
              return;
            }
            zoom.scale =
              (gesture.scaleMove / gesture.scaleStart) * currentScale;
            if (zoom.scale > gesture.maxRatio) {
              zoom.scale =
                gesture.maxRatio -
                1 +
                (zoom.scale - gesture.maxRatio + 1) ** 0.5;
            }
            if (zoom.scale < params.minRatio) {
              zoom.scale =
                params.minRatio + 1 - (params.minRatio - zoom.scale + 1) ** 0.5;
            }
            gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;
          }
          function onGestureEnd(e) {
            if (!eventWithinSlide(e)) return;
            if (e.pointerType === 'mouse' && e.type === 'pointerout') return;
            const params = swiper.params.zoom;
            const zoom = swiper.zoom;
            const pointerIndex = evCache.findIndex(
              (cachedEv) => cachedEv.pointerId === e.pointerId,
            );
            if (pointerIndex >= 0) evCache.splice(pointerIndex, 1);
            if (!fakeGestureTouched || !fakeGestureMoved) {
              return;
            }
            fakeGestureTouched = false;
            fakeGestureMoved = false;
            if (!gesture.imageEl) return;
            zoom.scale = Math.max(
              Math.min(zoom.scale, gesture.maxRatio),
              params.minRatio,
            );
            gesture.imageEl.style.transitionDuration = `${swiper.params.speed}ms`;
            gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;
            currentScale = zoom.scale;
            isScaling = false;
            if (zoom.scale > 1 && gesture.slideEl) {
              gesture.slideEl.classList.add(`${params.zoomedSlideClass}`);
            } else if (zoom.scale <= 1 && gesture.slideEl) {
              gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`);
            }
            if (zoom.scale === 1) {
              gesture.originX = 0;
              gesture.originY = 0;
              gesture.slideEl = undefined;
            }
          }
          let allowTouchMoveTimeout;
          function allowTouchMove() {
            swiper.touchEventsData.preventTouchMoveFromPointerMove = false;
          }
          function preventTouchMove() {
            clearTimeout(allowTouchMoveTimeout);
            swiper.touchEventsData.preventTouchMoveFromPointerMove = true;
            allowTouchMoveTimeout = setTimeout(() => {
              if (swiper.destroyed) return;
              allowTouchMove();
            });
          }
          function onTouchStart(e) {
            const device = swiper.device;
            if (!gesture.imageEl) return;
            if (image.isTouched) return;
            if (device.android && e.cancelable) e.preventDefault();
            image.isTouched = true;
            const event = evCache.length > 0 ? evCache[0] : e;
            image.touchesStart.x = event.pageX;
            image.touchesStart.y = event.pageY;
          }
          function onTouchMove(e) {
            const isMouseEvent = e.pointerType === 'mouse';
            const isMousePan =
              isMouseEvent && swiper.params.zoom.panOnMouseMove;
            if (!eventWithinSlide(e) || !eventWithinZoomContainer(e)) {
              return;
            }
            const zoom = swiper.zoom;
            if (!gesture.imageEl) {
              return;
            }
            if (!image.isTouched || !gesture.slideEl) {
              if (isMousePan) onMouseMove(e);
              return;
            }
            if (isMousePan) {
              onMouseMove(e);
              return;
            }
            if (!image.isMoved) {
              image.width =
                gesture.imageEl.offsetWidth || gesture.imageEl.clientWidth;
              image.height =
                gesture.imageEl.offsetHeight || gesture.imageEl.clientHeight;
              image.startX =
                (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.k)(
                  gesture.imageWrapEl,
                  'x',
                ) || 0;
              image.startY =
                (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.k)(
                  gesture.imageWrapEl,
                  'y',
                ) || 0;
              gesture.slideWidth = gesture.slideEl.offsetWidth;
              gesture.slideHeight = gesture.slideEl.offsetHeight;
              gesture.imageWrapEl.style.transitionDuration = '0ms';
            }
            // Define if we need image drag
            const scaledWidth = image.width * zoom.scale;
            const scaledHeight = image.height * zoom.scale;
            image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);
            image.maxX = -image.minX;
            image.minY = Math.min(
              gesture.slideHeight / 2 - scaledHeight / 2,
              0,
            );
            image.maxY = -image.minY;
            image.touchesCurrent.x =
              evCache.length > 0 ? evCache[0].pageX : e.pageX;
            image.touchesCurrent.y =
              evCache.length > 0 ? evCache[0].pageY : e.pageY;
            const touchesDiff = Math.max(
              Math.abs(image.touchesCurrent.x - image.touchesStart.x),
              Math.abs(image.touchesCurrent.y - image.touchesStart.y),
            );
            if (touchesDiff > 5) {
              swiper.allowClick = false;
            }
            if (!image.isMoved && !isScaling) {
              if (
                swiper.isHorizontal() &&
                ((Math.floor(image.minX) === Math.floor(image.startX) &&
                  image.touchesCurrent.x < image.touchesStart.x) ||
                  (Math.floor(image.maxX) === Math.floor(image.startX) &&
                    image.touchesCurrent.x > image.touchesStart.x))
              ) {
                image.isTouched = false;
                allowTouchMove();
                return;
              }
              if (
                !swiper.isHorizontal() &&
                ((Math.floor(image.minY) === Math.floor(image.startY) &&
                  image.touchesCurrent.y < image.touchesStart.y) ||
                  (Math.floor(image.maxY) === Math.floor(image.startY) &&
                    image.touchesCurrent.y > image.touchesStart.y))
              ) {
                image.isTouched = false;
                allowTouchMove();
                return;
              }
            }
            if (e.cancelable) {
              e.preventDefault();
            }
            e.stopPropagation();
            preventTouchMove();
            image.isMoved = true;
            const scaleRatio =
              (zoom.scale - currentScale) /
              (gesture.maxRatio - swiper.params.zoom.minRatio);
            const { originX, originY } = gesture;
            image.currentX =
              image.touchesCurrent.x -
              image.touchesStart.x +
              image.startX +
              scaleRatio * (image.width - originX * 2);
            image.currentY =
              image.touchesCurrent.y -
              image.touchesStart.y +
              image.startY +
              scaleRatio * (image.height - originY * 2);
            if (image.currentX < image.minX) {
              image.currentX =
                image.minX + 1 - (image.minX - image.currentX + 1) ** 0.8;
            }
            if (image.currentX > image.maxX) {
              image.currentX =
                image.maxX - 1 + (image.currentX - image.maxX + 1) ** 0.8;
            }
            if (image.currentY < image.minY) {
              image.currentY =
                image.minY + 1 - (image.minY - image.currentY + 1) ** 0.8;
            }
            if (image.currentY > image.maxY) {
              image.currentY =
                image.maxY - 1 + (image.currentY - image.maxY + 1) ** 0.8;
            }

            // Velocity
            if (!velocity.prevPositionX)
              velocity.prevPositionX = image.touchesCurrent.x;
            if (!velocity.prevPositionY)
              velocity.prevPositionY = image.touchesCurrent.y;
            if (!velocity.prevTime) velocity.prevTime = Date.now();
            velocity.x =
              (image.touchesCurrent.x - velocity.prevPositionX) /
              (Date.now() - velocity.prevTime) /
              2;
            velocity.y =
              (image.touchesCurrent.y - velocity.prevPositionY) /
              (Date.now() - velocity.prevTime) /
              2;
            if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2)
              velocity.x = 0;
            if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2)
              velocity.y = 0;
            velocity.prevPositionX = image.touchesCurrent.x;
            velocity.prevPositionY = image.touchesCurrent.y;
            velocity.prevTime = Date.now();
            gesture.imageWrapEl.style.transform = `translate3d(${image.currentX}px, ${image.currentY}px,0)`;
          }
          function onTouchEnd() {
            const zoom = swiper.zoom;
            evCache.length = 0;
            if (!gesture.imageEl) return;
            if (!image.isTouched || !image.isMoved) {
              image.isTouched = false;
              image.isMoved = false;
              return;
            }
            image.isTouched = false;
            image.isMoved = false;
            let momentumDurationX = 300;
            let momentumDurationY = 300;
            const momentumDistanceX = velocity.x * momentumDurationX;
            const newPositionX = image.currentX + momentumDistanceX;
            const momentumDistanceY = velocity.y * momentumDurationY;
            const newPositionY = image.currentY + momentumDistanceY;

            // Fix duration
            if (velocity.x !== 0)
              momentumDurationX = Math.abs(
                (newPositionX - image.currentX) / velocity.x,
              );
            if (velocity.y !== 0)
              momentumDurationY = Math.abs(
                (newPositionY - image.currentY) / velocity.y,
              );
            const momentumDuration = Math.max(
              momentumDurationX,
              momentumDurationY,
            );
            image.currentX = newPositionX;
            image.currentY = newPositionY;
            // Define if we need image drag
            const scaledWidth = image.width * zoom.scale;
            const scaledHeight = image.height * zoom.scale;
            image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);
            image.maxX = -image.minX;
            image.minY = Math.min(
              gesture.slideHeight / 2 - scaledHeight / 2,
              0,
            );
            image.maxY = -image.minY;
            image.currentX = Math.max(
              Math.min(image.currentX, image.maxX),
              image.minX,
            );
            image.currentY = Math.max(
              Math.min(image.currentY, image.maxY),
              image.minY,
            );
            gesture.imageWrapEl.style.transitionDuration = `${momentumDuration}ms`;
            gesture.imageWrapEl.style.transform = `translate3d(${image.currentX}px, ${image.currentY}px,0)`;
          }
          function onTransitionEnd() {
            const zoom = swiper.zoom;
            if (
              gesture.slideEl &&
              swiper.activeIndex !== swiper.slides.indexOf(gesture.slideEl)
            ) {
              if (gesture.imageEl) {
                gesture.imageEl.style.transform = 'translate3d(0,0,0) scale(1)';
              }
              if (gesture.imageWrapEl) {
                gesture.imageWrapEl.style.transform = 'translate3d(0,0,0)';
              }
              gesture.slideEl.classList.remove(
                `${swiper.params.zoom.zoomedSlideClass}`,
              );
              zoom.scale = 1;
              currentScale = 1;
              gesture.slideEl = undefined;
              gesture.imageEl = undefined;
              gesture.imageWrapEl = undefined;
              gesture.originX = 0;
              gesture.originY = 0;
            }
          }
          function onMouseMove(e) {
            // Only pan if zoomed in and mouse panning is enabled
            if (currentScale <= 1 || !gesture.imageWrapEl) return;
            if (!eventWithinSlide(e) || !eventWithinZoomContainer(e)) return;
            const currentTransform = window.getComputedStyle(
              gesture.imageWrapEl,
            ).transform;
            const matrix = new window.DOMMatrix(currentTransform);
            if (!isPanningWithMouse) {
              isPanningWithMouse = true;
              mousePanStart.x = e.clientX;
              mousePanStart.y = e.clientY;
              image.startX = matrix.e;
              image.startY = matrix.f;
              image.width =
                gesture.imageEl.offsetWidth || gesture.imageEl.clientWidth;
              image.height =
                gesture.imageEl.offsetHeight || gesture.imageEl.clientHeight;
              gesture.slideWidth = gesture.slideEl.offsetWidth;
              gesture.slideHeight = gesture.slideEl.offsetHeight;
              return;
            }
            const deltaX = (e.clientX - mousePanStart.x) * mousePanSensitivity;
            const deltaY = (e.clientY - mousePanStart.y) * mousePanSensitivity;
            const scaledWidth = image.width * currentScale;
            const scaledHeight = image.height * currentScale;
            const slideWidth = gesture.slideWidth;
            const slideHeight = gesture.slideHeight;
            const minX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);
            const maxX = -minX;
            const minY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);
            const maxY = -minY;
            const newX = Math.max(Math.min(image.startX + deltaX, maxX), minX);
            const newY = Math.max(Math.min(image.startY + deltaY, maxY), minY);
            gesture.imageWrapEl.style.transitionDuration = '0ms';
            gesture.imageWrapEl.style.transform = `translate3d(${newX}px, ${newY}px, 0)`;
            mousePanStart.x = e.clientX;
            mousePanStart.y = e.clientY;
            image.startX = newX;
            image.startY = newY;
            image.currentX = newX;
            image.currentY = newY;
          }
          function zoomIn(e) {
            const zoom = swiper.zoom;
            const params = swiper.params.zoom;
            if (!gesture.slideEl) {
              if (e && e.target) {
                gesture.slideEl = e.target.closest(
                  `.${swiper.params.slideClass}, swiper-slide`,
                );
              }
              if (!gesture.slideEl) {
                if (
                  swiper.params.virtual &&
                  swiper.params.virtual.enabled &&
                  swiper.virtual
                ) {
                  gesture.slideEl = (0,
                  _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(
                    swiper.slidesEl,
                    `.${swiper.params.slideActiveClass}`,
                  )[0];
                } else {
                  gesture.slideEl = swiper.slides[swiper.activeIndex];
                }
              }
              let imageEl = gesture.slideEl.querySelector(
                `.${params.containerClass}`,
              );
              if (imageEl) {
                imageEl = imageEl.querySelectorAll(
                  'picture, img, svg, canvas, .swiper-zoom-target',
                )[0];
              }
              gesture.imageEl = imageEl;
              if (imageEl) {
                gesture.imageWrapEl = (0,
                _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(
                  gesture.imageEl,
                  `.${params.containerClass}`,
                )[0];
              } else {
                gesture.imageWrapEl = undefined;
              }
            }
            if (!gesture.imageEl || !gesture.imageWrapEl) return;
            if (swiper.params.cssMode) {
              swiper.wrapperEl.style.overflow = 'hidden';
              swiper.wrapperEl.style.touchAction = 'none';
            }
            gesture.slideEl.classList.add(`${params.zoomedSlideClass}`);
            let touchX;
            let touchY;
            let offsetX;
            let offsetY;
            let diffX;
            let diffY;
            let translateX;
            let translateY;
            let imageWidth;
            let imageHeight;
            let scaledWidth;
            let scaledHeight;
            let translateMinX;
            let translateMinY;
            let translateMaxX;
            let translateMaxY;
            let slideWidth;
            let slideHeight;
            if (typeof image.touchesStart.x === 'undefined' && e) {
              touchX = e.pageX;
              touchY = e.pageY;
            } else {
              touchX = image.touchesStart.x;
              touchY = image.touchesStart.y;
            }
            const prevScale = currentScale;
            const forceZoomRatio = typeof e === 'number' ? e : null;
            if (currentScale === 1 && forceZoomRatio) {
              touchX = undefined;
              touchY = undefined;
              image.touchesStart.x = undefined;
              image.touchesStart.y = undefined;
            }
            const maxRatio = getMaxRatio();
            zoom.scale = forceZoomRatio || maxRatio;
            currentScale = forceZoomRatio || maxRatio;
            if (e && !(currentScale === 1 && forceZoomRatio)) {
              slideWidth = gesture.slideEl.offsetWidth;
              slideHeight = gesture.slideEl.offsetHeight;
              offsetX =
                (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(
                  gesture.slideEl,
                ).left + window.scrollX;
              offsetY =
                (0, _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(
                  gesture.slideEl,
                ).top + window.scrollY;
              diffX = offsetX + slideWidth / 2 - touchX;
              diffY = offsetY + slideHeight / 2 - touchY;
              imageWidth =
                gesture.imageEl.offsetWidth || gesture.imageEl.clientWidth;
              imageHeight =
                gesture.imageEl.offsetHeight || gesture.imageEl.clientHeight;
              scaledWidth = imageWidth * zoom.scale;
              scaledHeight = imageHeight * zoom.scale;
              translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);
              translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);
              translateMaxX = -translateMinX;
              translateMaxY = -translateMinY;
              if (
                prevScale > 0 &&
                forceZoomRatio &&
                typeof image.currentX === 'number' &&
                typeof image.currentY === 'number'
              ) {
                translateX = (image.currentX * zoom.scale) / prevScale;
                translateY = (image.currentY * zoom.scale) / prevScale;
              } else {
                translateX = diffX * zoom.scale;
                translateY = diffY * zoom.scale;
              }
              if (translateX < translateMinX) {
                translateX = translateMinX;
              }
              if (translateX > translateMaxX) {
                translateX = translateMaxX;
              }
              if (translateY < translateMinY) {
                translateY = translateMinY;
              }
              if (translateY > translateMaxY) {
                translateY = translateMaxY;
              }
            } else {
              translateX = 0;
              translateY = 0;
            }
            if (forceZoomRatio && zoom.scale === 1) {
              gesture.originX = 0;
              gesture.originY = 0;
            }
            image.currentX = translateX;
            image.currentY = translateY;
            gesture.imageWrapEl.style.transitionDuration = '300ms';
            gesture.imageWrapEl.style.transform = `translate3d(${translateX}px, ${translateY}px,0)`;
            gesture.imageEl.style.transitionDuration = '300ms';
            gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;
          }
          function zoomOut() {
            const zoom = swiper.zoom;
            const params = swiper.params.zoom;
            if (!gesture.slideEl) {
              if (
                swiper.params.virtual &&
                swiper.params.virtual.enabled &&
                swiper.virtual
              ) {
                gesture.slideEl = (0,
                _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(
                  swiper.slidesEl,
                  `.${swiper.params.slideActiveClass}`,
                )[0];
              } else {
                gesture.slideEl = swiper.slides[swiper.activeIndex];
              }
              let imageEl = gesture.slideEl.querySelector(
                `.${params.containerClass}`,
              );
              if (imageEl) {
                imageEl = imageEl.querySelectorAll(
                  'picture, img, svg, canvas, .swiper-zoom-target',
                )[0];
              }
              gesture.imageEl = imageEl;
              if (imageEl) {
                gesture.imageWrapEl = (0,
                _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(
                  gesture.imageEl,
                  `.${params.containerClass}`,
                )[0];
              } else {
                gesture.imageWrapEl = undefined;
              }
            }
            if (!gesture.imageEl || !gesture.imageWrapEl) return;
            if (swiper.params.cssMode) {
              swiper.wrapperEl.style.overflow = '';
              swiper.wrapperEl.style.touchAction = '';
            }
            zoom.scale = 1;
            currentScale = 1;
            image.currentX = undefined;
            image.currentY = undefined;
            image.touchesStart.x = undefined;
            image.touchesStart.y = undefined;
            gesture.imageWrapEl.style.transitionDuration = '300ms';
            gesture.imageWrapEl.style.transform = 'translate3d(0,0,0)';
            gesture.imageEl.style.transitionDuration = '300ms';
            gesture.imageEl.style.transform = 'translate3d(0,0,0) scale(1)';
            gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`);
            gesture.slideEl = undefined;
            gesture.originX = 0;
            gesture.originY = 0;
            if (swiper.params.zoom.panOnMouseMove) {
              mousePanStart = {
                x: 0,
                y: 0,
              };
              if (isPanningWithMouse) {
                isPanningWithMouse = false;
                image.startX = 0;
                image.startY = 0;
              }
            }
          }

          // Toggle Zoom
          function zoomToggle(e) {
            const zoom = swiper.zoom;
            if (zoom.scale && zoom.scale !== 1) {
              // Zoom Out
              zoomOut();
            } else {
              // Zoom In
              zoomIn(e);
            }
          }
          function getListeners() {
            const passiveListener = swiper.params.passiveListeners
              ? {
                  passive: true,
                  capture: false,
                }
              : false;
            const activeListenerWithCapture = swiper.params.passiveListeners
              ? {
                  passive: false,
                  capture: true,
                }
              : true;
            return {
              passiveListener,
              activeListenerWithCapture,
            };
          }

          // Attach/Detach Events
          function enable() {
            const zoom = swiper.zoom;
            if (zoom.enabled) return;
            zoom.enabled = true;
            const { passiveListener, activeListenerWithCapture } =
              getListeners();

            // Scale image
            swiper.wrapperEl.addEventListener(
              'pointerdown',
              onGestureStart,
              passiveListener,
            );
            swiper.wrapperEl.addEventListener(
              'pointermove',
              onGestureChange,
              activeListenerWithCapture,
            );
            ['pointerup', 'pointercancel', 'pointerout'].forEach(
              (eventName) => {
                swiper.wrapperEl.addEventListener(
                  eventName,
                  onGestureEnd,
                  passiveListener,
                );
              },
            );

            // Move image
            swiper.wrapperEl.addEventListener(
              'pointermove',
              onTouchMove,
              activeListenerWithCapture,
            );
          }
          function disable() {
            const zoom = swiper.zoom;
            if (!zoom.enabled) return;
            zoom.enabled = false;
            const { passiveListener, activeListenerWithCapture } =
              getListeners();

            // Scale image
            swiper.wrapperEl.removeEventListener(
              'pointerdown',
              onGestureStart,
              passiveListener,
            );
            swiper.wrapperEl.removeEventListener(
              'pointermove',
              onGestureChange,
              activeListenerWithCapture,
            );
            ['pointerup', 'pointercancel', 'pointerout'].forEach(
              (eventName) => {
                swiper.wrapperEl.removeEventListener(
                  eventName,
                  onGestureEnd,
                  passiveListener,
                );
              },
            );

            // Move image
            swiper.wrapperEl.removeEventListener(
              'pointermove',
              onTouchMove,
              activeListenerWithCapture,
            );
          }
          on('init', () => {
            if (swiper.params.zoom.enabled) {
              enable();
            }
          });
          on('destroy', () => {
            disable();
          });
          on('touchStart', (_s, e) => {
            if (!swiper.zoom.enabled) return;
            onTouchStart(e);
          });
          on('touchEnd', (_s, e) => {
            if (!swiper.zoom.enabled) return;
            onTouchEnd();
          });
          on('doubleTap', (_s, e) => {
            if (
              !swiper.animating &&
              swiper.params.zoom.enabled &&
              swiper.zoom.enabled &&
              swiper.params.zoom.toggle
            ) {
              zoomToggle(e);
            }
          });
          on('transitionEnd', () => {
            if (swiper.zoom.enabled && swiper.params.zoom.enabled) {
              onTransitionEnd();
            }
          });
          on('slideChange', () => {
            if (
              swiper.zoom.enabled &&
              swiper.params.zoom.enabled &&
              swiper.params.cssMode
            ) {
              onTransitionEnd();
            }
          });
          Object.assign(swiper.zoom, {
            enable,
            disable,
            in: zoomIn,
            out: zoomOut,
            toggle: zoomToggle,
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/shared/classes-to-selector.mjs':
      /*!************************************************************!*\
  !*** ./node_modules/swiper/shared/classes-to-selector.mjs ***!
  \************************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ c: () => /* binding */ classesToSelector,
          /* harmony export */
        });
        function classesToSelector(classes) {
          if (classes === void 0) {
            classes = '';
          }
          return `.${classes
            .trim()
            .replace(/([\.:!+\/()[\]])/g, '\\$1') // eslint-disable-line
            .replace(/ /g, '.')}`;
        }

        /***/
      },

    /***/ './node_modules/swiper/shared/create-element-if-not-defined.mjs':
      /*!**********************************************************************!*\
  !*** ./node_modules/swiper/shared/create-element-if-not-defined.mjs ***!
  \**********************************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ c: () => /* binding */ createElementIfNotDefined,
          /* harmony export */
        });
        /* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function createElementIfNotDefined(
          swiper,
          originalParams,
          params,
          checkProps,
        ) {
          if (swiper.params.createElements) {
            Object.keys(checkProps).forEach((key) => {
              if (!params[key] && params.auto === true) {
                let element = (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(
                  swiper.el,
                  `.${checkProps[key]}`,
                )[0];
                if (!element) {
                  element = (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(
                    'div',
                    checkProps[key],
                  );
                  element.className = checkProps[key];
                  swiper.el.append(element);
                }
                params[key] = element;
                originalParams[key] = element;
              }
            });
          }
          return params;
        }

        /***/
      },

    /***/ './node_modules/swiper/shared/create-shadow.mjs':
      /*!******************************************************!*\
  !*** ./node_modules/swiper/shared/create-shadow.mjs ***!
  \******************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ c: () => /* binding */ createShadow,
          /* harmony export */
        });
        /* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function createShadow(suffix, slideEl, side) {
          const shadowClass = `swiper-slide-shadow${side ? `-${side}` : ''}${suffix ? ` swiper-slide-shadow-${suffix}` : ''}`;
          const shadowContainer = (0,
          _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(slideEl);
          let shadowEl = shadowContainer.querySelector(
            `.${shadowClass.split(' ').join('.')}`,
          );
          if (!shadowEl) {
            shadowEl = (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(
              'div',
              shadowClass.split(' '),
            );
            shadowContainer.append(shadowEl);
          }
          return shadowEl;
        }

        /***/
      },

    /***/ './node_modules/swiper/shared/effect-init.mjs':
      /*!****************************************************!*\
  !*** ./node_modules/swiper/shared/effect-init.mjs ***!
  \****************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ e: () => /* binding */ effectInit,
          /* harmony export */
        });
        function effectInit(params) {
          const {
            effect,
            swiper,
            on,
            setTranslate,
            setTransition,
            overwriteParams,
            perspective,
            recreateShadows,
            getEffectParams,
          } = params;
          on('beforeInit', () => {
            if (swiper.params.effect !== effect) return;
            swiper.classNames.push(
              `${swiper.params.containerModifierClass}${effect}`,
            );
            if (perspective && perspective()) {
              swiper.classNames.push(
                `${swiper.params.containerModifierClass}3d`,
              );
            }
            const overwriteParamsResult = overwriteParams
              ? overwriteParams()
              : {};
            Object.assign(swiper.params, overwriteParamsResult);
            Object.assign(swiper.originalParams, overwriteParamsResult);
          });
          on('setTranslate _virtualUpdated', () => {
            if (swiper.params.effect !== effect) return;
            setTranslate();
          });
          on('setTransition', (_s, duration) => {
            if (swiper.params.effect !== effect) return;
            setTransition(duration);
          });
          on('transitionEnd', () => {
            if (swiper.params.effect !== effect) return;
            if (recreateShadows) {
              if (!getEffectParams || !getEffectParams().slideShadows) return;
              // remove shadows
              swiper.slides.forEach((slideEl) => {
                slideEl
                  .querySelectorAll(
                    '.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left',
                  )
                  .forEach((shadowEl) => shadowEl.remove());
              });
              // create new one
              recreateShadows();
            }
          });
          let requireUpdateOnVirtual;
          on('virtualUpdate', () => {
            if (swiper.params.effect !== effect) return;
            if (!swiper.slides.length) {
              requireUpdateOnVirtual = true;
            }
            requestAnimationFrame(() => {
              if (
                requireUpdateOnVirtual &&
                swiper.slides &&
                swiper.slides.length
              ) {
                setTranslate();
                requireUpdateOnVirtual = false;
              }
            });
          });
        }

        /***/
      },

    /***/ './node_modules/swiper/shared/effect-target.mjs':
      /*!******************************************************!*\
  !*** ./node_modules/swiper/shared/effect-target.mjs ***!
  \******************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ e: () => /* binding */ effectTarget,
          /* harmony export */
        });
        /* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function effectTarget(effectParams, slideEl) {
          const transformEl = (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(
            slideEl,
          );
          if (transformEl !== slideEl) {
            transformEl.style.backfaceVisibility = 'hidden';
            transformEl.style['-webkit-backface-visibility'] = 'hidden';
          }
          return transformEl;
        }

        /***/
      },

    /***/ './node_modules/swiper/shared/effect-virtual-transition-end.mjs':
      /*!**********************************************************************!*\
  !*** ./node_modules/swiper/shared/effect-virtual-transition-end.mjs ***!
  \**********************************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ e: () =>
            /* binding */ effectVirtualTransitionEnd,
          /* harmony export */
        });
        /* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        function effectVirtualTransitionEnd(_ref) {
          let { swiper, duration, transformElements, allSlides } = _ref;
          const { activeIndex } = swiper;
          const getSlide = (el) => {
            if (!el.parentElement) {
              // assume shadow root
              const slide = swiper.slides.find(
                (slideEl) =>
                  slideEl.shadowRoot && slideEl.shadowRoot === el.parentNode,
              );
              return slide;
            }
            return el.parentElement;
          };
          if (swiper.params.virtualTranslate && duration !== 0) {
            let eventTriggered = false;
            let transitionEndTarget;
            if (allSlides) {
              transitionEndTarget = transformElements;
            } else {
              transitionEndTarget = transformElements.filter((transformEl) => {
                const el = transformEl.classList.contains(
                  'swiper-slide-transform',
                )
                  ? getSlide(transformEl)
                  : transformEl;
                return swiper.getSlideIndex(el) === activeIndex;
              });
            }
            transitionEndTarget.forEach((el) => {
              (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.l)(el, () => {
                if (eventTriggered) return;
                if (!swiper || swiper.destroyed) return;
                eventTriggered = true;
                swiper.animating = false;
                const evt = new window.CustomEvent('transitionend', {
                  bubbles: true,
                  cancelable: true,
                });
                swiper.wrapperEl.dispatchEvent(evt);
              });
            });
          }
        }

        /***/
      },

    /***/ './node_modules/swiper/shared/ssr-window.esm.mjs':
      /*!*******************************************************!*\
  !*** ./node_modules/swiper/shared/ssr-window.esm.mjs ***!
  \*******************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ a: () => /* binding */ getWindow,
          /* harmony export */ g: () => /* binding */ getDocument,
          /* harmony export */
        });
        /**
         * SSR Window 5.0.1
         * Better handling for window object in SSR environment
         * https://github.com/nolimits4web/ssr-window
         *
         * Copyright 2025, Vladimir Kharlampidi
         *
         * Licensed under MIT
         *
         * Released on: June 27, 2025
         */
        /* eslint-disable no-param-reassign */
        function isObject(obj) {
          return (
            obj !== null &&
            typeof obj === 'object' &&
            'constructor' in obj &&
            obj.constructor === Object
          );
        }
        function extend(target, src) {
          if (target === void 0) {
            target = {};
          }
          if (src === void 0) {
            src = {};
          }
          const noExtend = ['__proto__', 'constructor', 'prototype'];
          Object.keys(src)
            .filter((key) => noExtend.indexOf(key) < 0)
            .forEach((key) => {
              if (typeof target[key] === 'undefined') target[key] = src[key];
              else if (
                isObject(src[key]) &&
                isObject(target[key]) &&
                Object.keys(src[key]).length > 0
              ) {
                extend(target[key], src[key]);
              }
            });
        }
        const ssrDocument = {
          body: {},
          addEventListener() {},
          removeEventListener() {},
          activeElement: {
            blur() {},
            nodeName: '',
          },
          querySelector() {
            return null;
          },
          querySelectorAll() {
            return [];
          },
          getElementById() {
            return null;
          },
          createEvent() {
            return {
              initEvent() {},
            };
          },
          createElement() {
            return {
              children: [],
              childNodes: [],
              style: {},
              setAttribute() {},
              getElementsByTagName() {
                return [];
              },
            };
          },
          createElementNS() {
            return {};
          },
          importNode() {
            return null;
          },
          location: {
            hash: '',
            host: '',
            hostname: '',
            href: '',
            origin: '',
            pathname: '',
            protocol: '',
            search: '',
          },
        };
        function getDocument() {
          const doc = typeof document !== 'undefined' ? document : {};
          extend(doc, ssrDocument);
          return doc;
        }
        const ssrWindow = {
          document: ssrDocument,
          navigator: {
            userAgent: '',
          },
          location: {
            hash: '',
            host: '',
            hostname: '',
            href: '',
            origin: '',
            pathname: '',
            protocol: '',
            search: '',
          },
          history: {
            replaceState() {},
            pushState() {},
            go() {},
            back() {},
          },
          CustomEvent: function CustomEvent() {
            return this;
          },
          addEventListener() {},
          removeEventListener() {},
          getComputedStyle() {
            return {
              getPropertyValue() {
                return '';
              },
            };
          },
          Image() {},
          Date() {},
          screen: {},
          setTimeout() {},
          clearTimeout() {},
          matchMedia() {
            return {};
          },
          requestAnimationFrame(callback) {
            if (typeof setTimeout === 'undefined') {
              callback();
              return null;
            }
            return setTimeout(callback, 0);
          },
          cancelAnimationFrame(id) {
            if (typeof setTimeout === 'undefined') {
              return;
            }
            clearTimeout(id);
          },
        };
        function getWindow() {
          const win = typeof window !== 'undefined' ? window : {};
          extend(win, ssrWindow);
          return win;
        }

        /***/
      },

    /***/ './node_modules/swiper/shared/swiper-core.mjs':
      /*!****************************************************!*\
  !*** ./node_modules/swiper/shared/swiper-core.mjs ***!
  \****************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ S: () => /* binding */ Swiper,
          /* harmony export */ d: () => /* binding */ defaults,
          /* harmony export */
        });
        /* harmony import */ var _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./ssr-window.esm.mjs */ './node_modules/swiper/shared/ssr-window.esm.mjs',
          );
        /* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./utils.mjs */ './node_modules/swiper/shared/utils.mjs',
          );

        let support;
        function calcSupport() {
          const window = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          const document = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();
          return {
            smoothScroll:
              document.documentElement &&
              document.documentElement.style &&
              'scrollBehavior' in document.documentElement.style,
            touch: !!(
              'ontouchstart' in window ||
              (window.DocumentTouch && document instanceof window.DocumentTouch)
            ),
          };
        }
        function getSupport() {
          if (!support) {
            support = calcSupport();
          }
          return support;
        }

        let deviceCached;
        function calcDevice(_temp) {
          let { userAgent } = _temp === void 0 ? {} : _temp;
          const support = getSupport();
          const window = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          const platform = window.navigator.platform;
          const ua = userAgent || window.navigator.userAgent;
          const device = {
            ios: false,
            android: false,
          };
          const screenWidth = window.screen.width;
          const screenHeight = window.screen.height;
          const android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line
          let ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
          const ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
          const iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
          const windows = platform === 'Win32';
          let macos = platform === 'MacIntel';

          // iPadOs 13 fix
          const iPadScreens = [
            '1024x1366',
            '1366x1024',
            '834x1194',
            '1194x834',
            '834x1112',
            '1112x834',
            '768x1024',
            '1024x768',
            '820x1180',
            '1180x820',
            '810x1080',
            '1080x810',
          ];
          if (
            !ipad &&
            macos &&
            support.touch &&
            iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0
          ) {
            ipad = ua.match(/(Version)\/([\d.]+)/);
            if (!ipad) ipad = [0, 1, '13_0_0'];
            macos = false;
          }

          // Android
          if (android && !windows) {
            device.os = 'android';
            device.android = true;
          }
          if (ipad || iphone || ipod) {
            device.os = 'ios';
            device.ios = true;
          }

          // Export object
          return device;
        }
        function getDevice(overrides) {
          if (overrides === void 0) {
            overrides = {};
          }
          if (!deviceCached) {
            deviceCached = calcDevice(overrides);
          }
          return deviceCached;
        }

        let browser;
        function calcBrowser() {
          const window = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          const device = getDevice();
          let needPerspectiveFix = false;
          function isSafari() {
            const ua = window.navigator.userAgent.toLowerCase();
            return (
              ua.indexOf('safari') >= 0 &&
              ua.indexOf('chrome') < 0 &&
              ua.indexOf('android') < 0
            );
          }
          if (isSafari()) {
            const ua = String(window.navigator.userAgent);
            if (ua.includes('Version/')) {
              const [major, minor] = ua
                .split('Version/')[1]
                .split(' ')[0]
                .split('.')
                .map((num) => Number(num));
              needPerspectiveFix = major < 16 || (major === 16 && minor < 2);
            }
          }
          const isWebView = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(
            window.navigator.userAgent,
          );
          const isSafariBrowser = isSafari();
          const need3dFix = isSafariBrowser || (isWebView && device.ios);
          return {
            isSafari: needPerspectiveFix || isSafariBrowser,
            needPerspectiveFix,
            need3dFix,
            isWebView,
          };
        }
        function getBrowser() {
          if (!browser) {
            browser = calcBrowser();
          }
          return browser;
        }

        function Resize(_ref) {
          let { swiper, on, emit } = _ref;
          const window = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          let observer = null;
          let animationFrame = null;
          const resizeHandler = () => {
            if (!swiper || swiper.destroyed || !swiper.initialized) return;
            emit('beforeResize');
            emit('resize');
          };
          const createObserver = () => {
            if (!swiper || swiper.destroyed || !swiper.initialized) return;
            observer = new ResizeObserver((entries) => {
              animationFrame = window.requestAnimationFrame(() => {
                const { width, height } = swiper;
                let newWidth = width;
                let newHeight = height;
                entries.forEach((_ref2) => {
                  let { contentBoxSize, contentRect, target } = _ref2;
                  if (target && target !== swiper.el) return;
                  newWidth = contentRect
                    ? contentRect.width
                    : (contentBoxSize[0] || contentBoxSize).inlineSize;
                  newHeight = contentRect
                    ? contentRect.height
                    : (contentBoxSize[0] || contentBoxSize).blockSize;
                });
                if (newWidth !== width || newHeight !== height) {
                  resizeHandler();
                }
              });
            });
            observer.observe(swiper.el);
          };
          const removeObserver = () => {
            if (animationFrame) {
              window.cancelAnimationFrame(animationFrame);
            }
            if (observer && observer.unobserve && swiper.el) {
              observer.unobserve(swiper.el);
              observer = null;
            }
          };
          const orientationChangeHandler = () => {
            if (!swiper || swiper.destroyed || !swiper.initialized) return;
            emit('orientationchange');
          };
          on('init', () => {
            if (
              swiper.params.resizeObserver &&
              typeof window.ResizeObserver !== 'undefined'
            ) {
              createObserver();
              return;
            }
            window.addEventListener('resize', resizeHandler);
            window.addEventListener(
              'orientationchange',
              orientationChangeHandler,
            );
          });
          on('destroy', () => {
            removeObserver();
            window.removeEventListener('resize', resizeHandler);
            window.removeEventListener(
              'orientationchange',
              orientationChangeHandler,
            );
          });
        }

        function Observer(_ref) {
          let { swiper, extendParams, on, emit } = _ref;
          const observers = [];
          const window = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          const attach = function (target, options) {
            if (options === void 0) {
              options = {};
            }
            const ObserverFunc =
              window.MutationObserver || window.WebkitMutationObserver;
            const observer = new ObserverFunc((mutations) => {
              // The observerUpdate event should only be triggered
              // once despite the number of mutations.  Additional
              // triggers are redundant and are very costly
              if (swiper.__preventObserver__) return;
              if (mutations.length === 1) {
                emit('observerUpdate', mutations[0]);
                return;
              }
              const observerUpdate = function observerUpdate() {
                emit('observerUpdate', mutations[0]);
              };
              if (window.requestAnimationFrame) {
                window.requestAnimationFrame(observerUpdate);
              } else {
                window.setTimeout(observerUpdate, 0);
              }
            });
            observer.observe(target, {
              attributes:
                typeof options.attributes === 'undefined'
                  ? true
                  : options.attributes,
              childList:
                swiper.isElement ||
                (typeof options.childList === 'undefined' ? true : options)
                  .childList,
              characterData:
                typeof options.characterData === 'undefined'
                  ? true
                  : options.characterData,
            });
            observers.push(observer);
          };
          const init = () => {
            if (!swiper.params.observer) return;
            if (swiper.params.observeParents) {
              const containerParents = (0,
              _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(swiper.hostEl);
              for (let i = 0; i < containerParents.length; i += 1) {
                attach(containerParents[i]);
              }
            }
            // Observe container
            attach(swiper.hostEl, {
              childList: swiper.params.observeSlideChildren,
            });

            // Observe wrapper
            attach(swiper.wrapperEl, {
              attributes: false,
            });
          };
          const destroy = () => {
            observers.forEach((observer) => {
              observer.disconnect();
            });
            observers.splice(0, observers.length);
          };
          extendParams({
            observer: false,
            observeParents: false,
            observeSlideChildren: false,
          });
          on('init', init);
          on('destroy', destroy);
        }

        /* eslint-disable no-underscore-dangle */

        var eventsEmitter = {
          on(events, handler, priority) {
            const self = this;
            if (!self.eventsListeners || self.destroyed) return self;
            if (typeof handler !== 'function') return self;
            const method = priority ? 'unshift' : 'push';
            events.split(' ').forEach((event) => {
              if (!self.eventsListeners[event])
                self.eventsListeners[event] = [];
              self.eventsListeners[event][method](handler);
            });
            return self;
          },
          once(events, handler, priority) {
            const self = this;
            if (!self.eventsListeners || self.destroyed) return self;
            if (typeof handler !== 'function') return self;
            function onceHandler() {
              self.off(events, onceHandler);
              if (onceHandler.__emitterProxy) {
                delete onceHandler.__emitterProxy;
              }
              for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }
              handler.apply(self, args);
            }
            onceHandler.__emitterProxy = handler;
            return self.on(events, onceHandler, priority);
          },
          onAny(handler, priority) {
            const self = this;
            if (!self.eventsListeners || self.destroyed) return self;
            if (typeof handler !== 'function') return self;
            const method = priority ? 'unshift' : 'push';
            if (self.eventsAnyListeners.indexOf(handler) < 0) {
              self.eventsAnyListeners[method](handler);
            }
            return self;
          },
          offAny(handler) {
            const self = this;
            if (!self.eventsListeners || self.destroyed) return self;
            if (!self.eventsAnyListeners) return self;
            const index = self.eventsAnyListeners.indexOf(handler);
            if (index >= 0) {
              self.eventsAnyListeners.splice(index, 1);
            }
            return self;
          },
          off(events, handler) {
            const self = this;
            if (!self.eventsListeners || self.destroyed) return self;
            if (!self.eventsListeners) return self;
            events.split(' ').forEach((event) => {
              if (typeof handler === 'undefined') {
                self.eventsListeners[event] = [];
              } else if (self.eventsListeners[event]) {
                self.eventsListeners[event].forEach((eventHandler, index) => {
                  if (
                    eventHandler === handler ||
                    (eventHandler.__emitterProxy &&
                      eventHandler.__emitterProxy === handler)
                  ) {
                    self.eventsListeners[event].splice(index, 1);
                  }
                });
              }
            });
            return self;
          },
          emit() {
            const self = this;
            if (!self.eventsListeners || self.destroyed) return self;
            if (!self.eventsListeners) return self;
            let events;
            let data;
            let context;
            for (
              var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
              _key2 < _len2;
              _key2++
            ) {
              args[_key2] = arguments[_key2];
            }
            if (typeof args[0] === 'string' || Array.isArray(args[0])) {
              events = args[0];
              data = args.slice(1, args.length);
              context = self;
            } else {
              events = args[0].events;
              data = args[0].data;
              context = args[0].context || self;
            }
            data.unshift(context);
            const eventsArray = Array.isArray(events)
              ? events
              : events.split(' ');
            eventsArray.forEach((event) => {
              if (self.eventsAnyListeners && self.eventsAnyListeners.length) {
                self.eventsAnyListeners.forEach((eventHandler) => {
                  eventHandler.apply(context, [event, ...data]);
                });
              }
              if (self.eventsListeners && self.eventsListeners[event]) {
                self.eventsListeners[event].forEach((eventHandler) => {
                  eventHandler.apply(context, data);
                });
              }
            });
            return self;
          },
        };

        function updateSize() {
          const swiper = this;
          let width;
          let height;
          const el = swiper.el;
          if (
            typeof swiper.params.width !== 'undefined' &&
            swiper.params.width !== null
          ) {
            width = swiper.params.width;
          } else {
            width = el.clientWidth;
          }
          if (
            typeof swiper.params.height !== 'undefined' &&
            swiper.params.height !== null
          ) {
            height = swiper.params.height;
          } else {
            height = el.clientHeight;
          }
          if (
            (width === 0 && swiper.isHorizontal()) ||
            (height === 0 && swiper.isVertical())
          ) {
            return;
          }

          // Subtract paddings
          width =
            width -
            parseInt(
              (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(
                el,
                'padding-left',
              ) || 0,
              10,
            ) -
            parseInt(
              (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(
                el,
                'padding-right',
              ) || 0,
              10,
            );
          height =
            height -
            parseInt(
              (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(
                el,
                'padding-top',
              ) || 0,
              10,
            ) -
            parseInt(
              (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(
                el,
                'padding-bottom',
              ) || 0,
              10,
            );
          if (Number.isNaN(width)) width = 0;
          if (Number.isNaN(height)) height = 0;
          Object.assign(swiper, {
            width,
            height,
            size: swiper.isHorizontal() ? width : height,
          });
        }

        function updateSlides() {
          const swiper = this;
          function getDirectionPropertyValue(node, label) {
            return parseFloat(
              node.getPropertyValue(swiper.getDirectionLabel(label)) || 0,
            );
          }
          const params = swiper.params;
          const {
            wrapperEl,
            slidesEl,
            size: swiperSize,
            rtlTranslate: rtl,
            wrongRTL,
          } = swiper;
          const isVirtual = swiper.virtual && params.virtual.enabled;
          const previousSlidesLength = isVirtual
            ? swiper.virtual.slides.length
            : swiper.slides.length;
          const slides = (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(
            slidesEl,
            `.${swiper.params.slideClass}, swiper-slide`,
          );
          const slidesLength = isVirtual
            ? swiper.virtual.slides.length
            : slides.length;
          let snapGrid = [];
          const slidesGrid = [];
          const slidesSizesGrid = [];
          let offsetBefore = params.slidesOffsetBefore;
          if (typeof offsetBefore === 'function') {
            offsetBefore = params.slidesOffsetBefore.call(swiper);
          }
          let offsetAfter = params.slidesOffsetAfter;
          if (typeof offsetAfter === 'function') {
            offsetAfter = params.slidesOffsetAfter.call(swiper);
          }
          const previousSnapGridLength = swiper.snapGrid.length;
          const previousSlidesGridLength = swiper.slidesGrid.length;
          let spaceBetween = params.spaceBetween;
          let slidePosition = -offsetBefore;
          let prevSlideSize = 0;
          let index = 0;
          if (typeof swiperSize === 'undefined') {
            return;
          }
          if (
            typeof spaceBetween === 'string' &&
            spaceBetween.indexOf('%') >= 0
          ) {
            spaceBetween =
              (parseFloat(spaceBetween.replace('%', '')) / 100) * swiperSize;
          } else if (typeof spaceBetween === 'string') {
            spaceBetween = parseFloat(spaceBetween);
          }
          swiper.virtualSize = -spaceBetween;

          // reset margins
          slides.forEach((slideEl) => {
            if (rtl) {
              slideEl.style.marginLeft = '';
            } else {
              slideEl.style.marginRight = '';
            }
            slideEl.style.marginBottom = '';
            slideEl.style.marginTop = '';
          });

          // reset cssMode offsets
          if (params.centeredSlides && params.cssMode) {
            (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(
              wrapperEl,
              '--swiper-centered-offset-before',
              '',
            );
            (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(
              wrapperEl,
              '--swiper-centered-offset-after',
              '',
            );
          }
          const gridEnabled =
            params.grid && params.grid.rows > 1 && swiper.grid;
          if (gridEnabled) {
            swiper.grid.initSlides(slides);
          } else if (swiper.grid) {
            swiper.grid.unsetSlides();
          }

          // Calc slides
          let slideSize;
          const shouldResetSlideSize =
            params.slidesPerView === 'auto' &&
            params.breakpoints &&
            Object.keys(params.breakpoints).filter((key) => {
              return (
                typeof params.breakpoints[key].slidesPerView !== 'undefined'
              );
            }).length > 0;
          for (let i = 0; i < slidesLength; i += 1) {
            slideSize = 0;
            let slide;
            if (slides[i]) slide = slides[i];
            if (gridEnabled) {
              swiper.grid.updateSlide(i, slide, slides);
            }
            if (
              slides[i] &&
              (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(
                slide,
                'display',
              ) === 'none'
            )
              continue; // eslint-disable-line

            if (params.slidesPerView === 'auto') {
              if (shouldResetSlideSize) {
                slides[i].style[swiper.getDirectionLabel('width')] = ``;
              }
              const slideStyles = getComputedStyle(slide);
              const currentTransform = slide.style.transform;
              const currentWebKitTransform = slide.style.webkitTransform;
              if (currentTransform) {
                slide.style.transform = 'none';
              }
              if (currentWebKitTransform) {
                slide.style.webkitTransform = 'none';
              }
              if (params.roundLengths) {
                slideSize = swiper.isHorizontal()
                  ? (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)(
                      slide,
                      'width',
                      true,
                    )
                  : (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)(
                      slide,
                      'height',
                      true,
                    );
              } else {
                // eslint-disable-next-line
                const width = getDirectionPropertyValue(slideStyles, 'width');
                const paddingLeft = getDirectionPropertyValue(
                  slideStyles,
                  'padding-left',
                );
                const paddingRight = getDirectionPropertyValue(
                  slideStyles,
                  'padding-right',
                );
                const marginLeft = getDirectionPropertyValue(
                  slideStyles,
                  'margin-left',
                );
                const marginRight = getDirectionPropertyValue(
                  slideStyles,
                  'margin-right',
                );
                const boxSizing = slideStyles.getPropertyValue('box-sizing');
                if (boxSizing && boxSizing === 'border-box') {
                  slideSize = width + marginLeft + marginRight;
                } else {
                  const { clientWidth, offsetWidth } = slide;
                  slideSize =
                    width +
                    paddingLeft +
                    paddingRight +
                    marginLeft +
                    marginRight +
                    (offsetWidth - clientWidth);
                }
              }
              if (currentTransform) {
                slide.style.transform = currentTransform;
              }
              if (currentWebKitTransform) {
                slide.style.webkitTransform = currentWebKitTransform;
              }
              if (params.roundLengths) slideSize = Math.floor(slideSize);
            } else {
              slideSize =
                (swiperSize - (params.slidesPerView - 1) * spaceBetween) /
                params.slidesPerView;
              if (params.roundLengths) slideSize = Math.floor(slideSize);
              if (slides[i]) {
                slides[i].style[swiper.getDirectionLabel('width')] =
                  `${slideSize}px`;
              }
            }
            if (slides[i]) {
              slides[i].swiperSlideSize = slideSize;
            }
            slidesSizesGrid.push(slideSize);
            if (params.centeredSlides) {
              slidePosition =
                slidePosition +
                slideSize / 2 +
                prevSlideSize / 2 +
                spaceBetween;
              if (prevSlideSize === 0 && i !== 0)
                slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
              if (i === 0)
                slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
              if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;
              if (params.roundLengths)
                slidePosition = Math.floor(slidePosition);
              if (index % params.slidesPerGroup === 0)
                snapGrid.push(slidePosition);
              slidesGrid.push(slidePosition);
            } else {
              if (params.roundLengths)
                slidePosition = Math.floor(slidePosition);
              if (
                (index - Math.min(swiper.params.slidesPerGroupSkip, index)) %
                  swiper.params.slidesPerGroup ===
                0
              )
                snapGrid.push(slidePosition);
              slidesGrid.push(slidePosition);
              slidePosition = slidePosition + slideSize + spaceBetween;
            }
            swiper.virtualSize += slideSize + spaceBetween;
            prevSlideSize = slideSize;
            index += 1;
          }
          swiper.virtualSize =
            Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
          if (
            rtl &&
            wrongRTL &&
            (params.effect === 'slide' || params.effect === 'coverflow')
          ) {
            wrapperEl.style.width = `${swiper.virtualSize + spaceBetween}px`;
          }
          if (params.setWrapperSize) {
            wrapperEl.style[swiper.getDirectionLabel('width')] =
              `${swiper.virtualSize + spaceBetween}px`;
          }
          if (gridEnabled) {
            swiper.grid.updateWrapperSize(slideSize, snapGrid);
          }

          // Remove last grid elements depending on width
          if (!params.centeredSlides) {
            const newSlidesGrid = [];
            for (let i = 0; i < snapGrid.length; i += 1) {
              let slidesGridItem = snapGrid[i];
              if (params.roundLengths)
                slidesGridItem = Math.floor(slidesGridItem);
              if (snapGrid[i] <= swiper.virtualSize - swiperSize) {
                newSlidesGrid.push(slidesGridItem);
              }
            }
            snapGrid = newSlidesGrid;
            if (
              Math.floor(swiper.virtualSize - swiperSize) -
                Math.floor(snapGrid[snapGrid.length - 1]) >
              1
            ) {
              snapGrid.push(swiper.virtualSize - swiperSize);
            }
          }
          if (isVirtual && params.loop) {
            const size = slidesSizesGrid[0] + spaceBetween;
            if (params.slidesPerGroup > 1) {
              const groups = Math.ceil(
                (swiper.virtual.slidesBefore + swiper.virtual.slidesAfter) /
                  params.slidesPerGroup,
              );
              const groupSize = size * params.slidesPerGroup;
              for (let i = 0; i < groups; i += 1) {
                snapGrid.push(snapGrid[snapGrid.length - 1] + groupSize);
              }
            }
            for (
              let i = 0;
              i < swiper.virtual.slidesBefore + swiper.virtual.slidesAfter;
              i += 1
            ) {
              if (params.slidesPerGroup === 1) {
                snapGrid.push(snapGrid[snapGrid.length - 1] + size);
              }
              slidesGrid.push(slidesGrid[slidesGrid.length - 1] + size);
              swiper.virtualSize += size;
            }
          }
          if (snapGrid.length === 0) snapGrid = [0];
          if (spaceBetween !== 0) {
            const key =
              swiper.isHorizontal() && rtl
                ? 'marginLeft'
                : swiper.getDirectionLabel('marginRight');
            slides
              .filter((_, slideIndex) => {
                if (!params.cssMode || params.loop) return true;
                if (slideIndex === slides.length - 1) {
                  return false;
                }
                return true;
              })
              .forEach((slideEl) => {
                slideEl.style[key] = `${spaceBetween}px`;
              });
          }
          if (params.centeredSlides && params.centeredSlidesBounds) {
            let allSlidesSize = 0;
            slidesSizesGrid.forEach((slideSizeValue) => {
              allSlidesSize += slideSizeValue + (spaceBetween || 0);
            });
            allSlidesSize -= spaceBetween;
            const maxSnap =
              allSlidesSize > swiperSize ? allSlidesSize - swiperSize : 0;
            snapGrid = snapGrid.map((snap) => {
              if (snap <= 0) return -offsetBefore;
              if (snap > maxSnap) return maxSnap + offsetAfter;
              return snap;
            });
          }
          if (params.centerInsufficientSlides) {
            let allSlidesSize = 0;
            slidesSizesGrid.forEach((slideSizeValue) => {
              allSlidesSize += slideSizeValue + (spaceBetween || 0);
            });
            allSlidesSize -= spaceBetween;
            const offsetSize =
              (params.slidesOffsetBefore || 0) +
              (params.slidesOffsetAfter || 0);
            if (allSlidesSize + offsetSize < swiperSize) {
              const allSlidesOffset =
                (swiperSize - allSlidesSize - offsetSize) / 2;
              snapGrid.forEach((snap, snapIndex) => {
                snapGrid[snapIndex] = snap - allSlidesOffset;
              });
              slidesGrid.forEach((snap, snapIndex) => {
                slidesGrid[snapIndex] = snap + allSlidesOffset;
              });
            }
          }
          Object.assign(swiper, {
            slides,
            snapGrid,
            slidesGrid,
            slidesSizesGrid,
          });
          if (
            params.centeredSlides &&
            params.cssMode &&
            !params.centeredSlidesBounds
          ) {
            (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(
              wrapperEl,
              '--swiper-centered-offset-before',
              `${-snapGrid[0]}px`,
            );
            (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(
              wrapperEl,
              '--swiper-centered-offset-after',
              `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`,
            );
            const addToSnapGrid = -swiper.snapGrid[0];
            const addToSlidesGrid = -swiper.slidesGrid[0];
            swiper.snapGrid = swiper.snapGrid.map((v) => v + addToSnapGrid);
            swiper.slidesGrid = swiper.slidesGrid.map(
              (v) => v + addToSlidesGrid,
            );
          }
          if (slidesLength !== previousSlidesLength) {
            swiper.emit('slidesLengthChange');
          }
          if (snapGrid.length !== previousSnapGridLength) {
            if (swiper.params.watchOverflow) swiper.checkOverflow();
            swiper.emit('snapGridLengthChange');
          }
          if (slidesGrid.length !== previousSlidesGridLength) {
            swiper.emit('slidesGridLengthChange');
          }
          if (params.watchSlidesProgress) {
            swiper.updateSlidesOffset();
          }
          swiper.emit('slidesUpdated');
          if (
            !isVirtual &&
            !params.cssMode &&
            (params.effect === 'slide' || params.effect === 'fade')
          ) {
            const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;
            const hasClassBackfaceClassAdded =
              swiper.el.classList.contains(backFaceHiddenClass);
            if (slidesLength <= params.maxBackfaceHiddenSlides) {
              if (!hasClassBackfaceClassAdded)
                swiper.el.classList.add(backFaceHiddenClass);
            } else if (hasClassBackfaceClassAdded) {
              swiper.el.classList.remove(backFaceHiddenClass);
            }
          }
        }

        function updateAutoHeight(speed) {
          const swiper = this;
          const activeSlides = [];
          const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
          let newHeight = 0;
          let i;
          if (typeof speed === 'number') {
            swiper.setTransition(speed);
          } else if (speed === true) {
            swiper.setTransition(swiper.params.speed);
          }
          const getSlideByIndex = (index) => {
            if (isVirtual) {
              return swiper.slides[swiper.getSlideIndexByData(index)];
            }
            return swiper.slides[index];
          };
          // Find slides currently in view
          if (
            swiper.params.slidesPerView !== 'auto' &&
            swiper.params.slidesPerView > 1
          ) {
            if (swiper.params.centeredSlides) {
              (swiper.visibleSlides || []).forEach((slide) => {
                activeSlides.push(slide);
              });
            } else {
              for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
                const index = swiper.activeIndex + i;
                if (index > swiper.slides.length && !isVirtual) break;
                activeSlides.push(getSlideByIndex(index));
              }
            }
          } else {
            activeSlides.push(getSlideByIndex(swiper.activeIndex));
          }

          // Find new height from highest slide in view
          for (i = 0; i < activeSlides.length; i += 1) {
            if (typeof activeSlides[i] !== 'undefined') {
              const height = activeSlides[i].offsetHeight;
              newHeight = height > newHeight ? height : newHeight;
            }
          }

          // Update Height
          if (newHeight || newHeight === 0)
            swiper.wrapperEl.style.height = `${newHeight}px`;
        }

        function updateSlidesOffset() {
          const swiper = this;
          const slides = swiper.slides;
          // eslint-disable-next-line
          const minusOffset = swiper.isElement
            ? swiper.isHorizontal()
              ? swiper.wrapperEl.offsetLeft
              : swiper.wrapperEl.offsetTop
            : 0;
          for (let i = 0; i < slides.length; i += 1) {
            slides[i].swiperSlideOffset =
              (swiper.isHorizontal()
                ? slides[i].offsetLeft
                : slides[i].offsetTop) -
              minusOffset -
              swiper.cssOverflowAdjustment();
          }
        }

        const toggleSlideClasses$1 = (slideEl, condition, className) => {
          if (condition && !slideEl.classList.contains(className)) {
            slideEl.classList.add(className);
          } else if (!condition && slideEl.classList.contains(className)) {
            slideEl.classList.remove(className);
          }
        };
        function updateSlidesProgress(translate) {
          if (translate === void 0) {
            translate = (this && this.translate) || 0;
          }
          const swiper = this;
          const params = swiper.params;
          const { slides, rtlTranslate: rtl, snapGrid } = swiper;
          if (slides.length === 0) return;
          if (typeof slides[0].swiperSlideOffset === 'undefined')
            swiper.updateSlidesOffset();
          let offsetCenter = -translate;
          if (rtl) offsetCenter = translate;
          swiper.visibleSlidesIndexes = [];
          swiper.visibleSlides = [];
          let spaceBetween = params.spaceBetween;
          if (
            typeof spaceBetween === 'string' &&
            spaceBetween.indexOf('%') >= 0
          ) {
            spaceBetween =
              (parseFloat(spaceBetween.replace('%', '')) / 100) * swiper.size;
          } else if (typeof spaceBetween === 'string') {
            spaceBetween = parseFloat(spaceBetween);
          }
          for (let i = 0; i < slides.length; i += 1) {
            const slide = slides[i];
            let slideOffset = slide.swiperSlideOffset;
            if (params.cssMode && params.centeredSlides) {
              slideOffset -= slides[0].swiperSlideOffset;
            }
            const slideProgress =
              (offsetCenter +
                (params.centeredSlides ? swiper.minTranslate() : 0) -
                slideOffset) /
              (slide.swiperSlideSize + spaceBetween);
            const originalSlideProgress =
              (offsetCenter -
                snapGrid[0] +
                (params.centeredSlides ? swiper.minTranslate() : 0) -
                slideOffset) /
              (slide.swiperSlideSize + spaceBetween);
            const slideBefore = -(offsetCenter - slideOffset);
            const slideAfter = slideBefore + swiper.slidesSizesGrid[i];
            const isFullyVisible =
              slideBefore >= 0 &&
              slideBefore <= swiper.size - swiper.slidesSizesGrid[i];
            const isVisible =
              (slideBefore >= 0 && slideBefore < swiper.size - 1) ||
              (slideAfter > 1 && slideAfter <= swiper.size) ||
              (slideBefore <= 0 && slideAfter >= swiper.size);
            if (isVisible) {
              swiper.visibleSlides.push(slide);
              swiper.visibleSlidesIndexes.push(i);
            }
            toggleSlideClasses$1(slide, isVisible, params.slideVisibleClass);
            toggleSlideClasses$1(
              slide,
              isFullyVisible,
              params.slideFullyVisibleClass,
            );
            slide.progress = rtl ? -slideProgress : slideProgress;
            slide.originalProgress = rtl
              ? -originalSlideProgress
              : originalSlideProgress;
          }
        }

        function updateProgress(translate) {
          const swiper = this;
          if (typeof translate === 'undefined') {
            const multiplier = swiper.rtlTranslate ? -1 : 1;
            // eslint-disable-next-line
            translate =
              (swiper && swiper.translate && swiper.translate * multiplier) ||
              0;
          }
          const params = swiper.params;
          const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
          let { progress, isBeginning, isEnd, progressLoop } = swiper;
          const wasBeginning = isBeginning;
          const wasEnd = isEnd;
          if (translatesDiff === 0) {
            progress = 0;
            isBeginning = true;
            isEnd = true;
          } else {
            progress = (translate - swiper.minTranslate()) / translatesDiff;
            const isBeginningRounded =
              Math.abs(translate - swiper.minTranslate()) < 1;
            const isEndRounded =
              Math.abs(translate - swiper.maxTranslate()) < 1;
            isBeginning = isBeginningRounded || progress <= 0;
            isEnd = isEndRounded || progress >= 1;
            if (isBeginningRounded) progress = 0;
            if (isEndRounded) progress = 1;
          }
          if (params.loop) {
            const firstSlideIndex = swiper.getSlideIndexByData(0);
            const lastSlideIndex = swiper.getSlideIndexByData(
              swiper.slides.length - 1,
            );
            const firstSlideTranslate = swiper.slidesGrid[firstSlideIndex];
            const lastSlideTranslate = swiper.slidesGrid[lastSlideIndex];
            const translateMax =
              swiper.slidesGrid[swiper.slidesGrid.length - 1];
            const translateAbs = Math.abs(translate);
            if (translateAbs >= firstSlideTranslate) {
              progressLoop =
                (translateAbs - firstSlideTranslate) / translateMax;
            } else {
              progressLoop =
                (translateAbs + translateMax - lastSlideTranslate) /
                translateMax;
            }
            if (progressLoop > 1) progressLoop -= 1;
          }
          Object.assign(swiper, {
            progress,
            progressLoop,
            isBeginning,
            isEnd,
          });
          if (
            params.watchSlidesProgress ||
            (params.centeredSlides && params.autoHeight)
          )
            swiper.updateSlidesProgress(translate);
          if (isBeginning && !wasBeginning) {
            swiper.emit('reachBeginning toEdge');
          }
          if (isEnd && !wasEnd) {
            swiper.emit('reachEnd toEdge');
          }
          if ((wasBeginning && !isBeginning) || (wasEnd && !isEnd)) {
            swiper.emit('fromEdge');
          }
          swiper.emit('progress', progress);
        }

        const toggleSlideClasses = (slideEl, condition, className) => {
          if (condition && !slideEl.classList.contains(className)) {
            slideEl.classList.add(className);
          } else if (!condition && slideEl.classList.contains(className)) {
            slideEl.classList.remove(className);
          }
        };
        function updateSlidesClasses() {
          const swiper = this;
          const { slides, params, slidesEl, activeIndex } = swiper;
          const isVirtual = swiper.virtual && params.virtual.enabled;
          const gridEnabled =
            swiper.grid && params.grid && params.grid.rows > 1;
          const getFilteredSlide = (selector) => {
            return (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(
              slidesEl,
              `.${params.slideClass}${selector}, swiper-slide${selector}`,
            )[0];
          };
          let activeSlide;
          let prevSlide;
          let nextSlide;
          if (isVirtual) {
            if (params.loop) {
              let slideIndex = activeIndex - swiper.virtual.slidesBefore;
              if (slideIndex < 0)
                slideIndex = swiper.virtual.slides.length + slideIndex;
              if (slideIndex >= swiper.virtual.slides.length)
                slideIndex -= swiper.virtual.slides.length;
              activeSlide = getFilteredSlide(
                `[data-swiper-slide-index="${slideIndex}"]`,
              );
            } else {
              activeSlide = getFilteredSlide(
                `[data-swiper-slide-index="${activeIndex}"]`,
              );
            }
          } else {
            if (gridEnabled) {
              activeSlide = slides.find(
                (slideEl) => slideEl.column === activeIndex,
              );
              nextSlide = slides.find(
                (slideEl) => slideEl.column === activeIndex + 1,
              );
              prevSlide = slides.find(
                (slideEl) => slideEl.column === activeIndex - 1,
              );
            } else {
              activeSlide = slides[activeIndex];
            }
          }
          if (activeSlide) {
            if (!gridEnabled) {
              // Next Slide
              nextSlide = (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.r)(
                activeSlide,
                `.${params.slideClass}, swiper-slide`,
              )[0];
              if (params.loop && !nextSlide) {
                nextSlide = slides[0];
              }

              // Prev Slide
              prevSlide = (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(
                activeSlide,
                `.${params.slideClass}, swiper-slide`,
              )[0];
              if (params.loop && !prevSlide === 0) {
                prevSlide = slides[slides.length - 1];
              }
            }
          }
          slides.forEach((slideEl) => {
            toggleSlideClasses(
              slideEl,
              slideEl === activeSlide,
              params.slideActiveClass,
            );
            toggleSlideClasses(
              slideEl,
              slideEl === nextSlide,
              params.slideNextClass,
            );
            toggleSlideClasses(
              slideEl,
              slideEl === prevSlide,
              params.slidePrevClass,
            );
          });
          swiper.emitSlidesClasses();
        }

        const processLazyPreloader = (swiper, imageEl) => {
          if (!swiper || swiper.destroyed || !swiper.params) return;
          const slideSelector = () =>
            swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;
          const slideEl = imageEl.closest(slideSelector());
          if (slideEl) {
            let lazyEl = slideEl.querySelector(
              `.${swiper.params.lazyPreloaderClass}`,
            );
            if (!lazyEl && swiper.isElement) {
              if (slideEl.shadowRoot) {
                lazyEl = slideEl.shadowRoot.querySelector(
                  `.${swiper.params.lazyPreloaderClass}`,
                );
              } else {
                // init later
                requestAnimationFrame(() => {
                  if (slideEl.shadowRoot) {
                    lazyEl = slideEl.shadowRoot.querySelector(
                      `.${swiper.params.lazyPreloaderClass}`,
                    );
                    if (lazyEl) lazyEl.remove();
                  }
                });
              }
            }
            if (lazyEl) lazyEl.remove();
          }
        };
        const unlazy = (swiper, index) => {
          if (!swiper.slides[index]) return;
          const imageEl =
            swiper.slides[index].querySelector('[loading="lazy"]');
          if (imageEl) imageEl.removeAttribute('loading');
        };
        const preload = (swiper) => {
          if (!swiper || swiper.destroyed || !swiper.params) return;
          let amount = swiper.params.lazyPreloadPrevNext;
          const len = swiper.slides.length;
          if (!len || !amount || amount < 0) return;
          amount = Math.min(amount, len);
          const slidesPerView =
            swiper.params.slidesPerView === 'auto'
              ? swiper.slidesPerViewDynamic()
              : Math.ceil(swiper.params.slidesPerView);
          const activeIndex = swiper.activeIndex;
          if (swiper.params.grid && swiper.params.grid.rows > 1) {
            const activeColumn = activeIndex;
            const preloadColumns = [activeColumn - amount];
            preloadColumns.push(
              ...Array.from({
                length: amount,
              }).map((_, i) => {
                return activeColumn + slidesPerView + i;
              }),
            );
            swiper.slides.forEach((slideEl, i) => {
              if (preloadColumns.includes(slideEl.column)) unlazy(swiper, i);
            });
            return;
          }
          const slideIndexLastInView = activeIndex + slidesPerView - 1;
          if (swiper.params.rewind || swiper.params.loop) {
            for (
              let i = activeIndex - amount;
              i <= slideIndexLastInView + amount;
              i += 1
            ) {
              const realIndex = ((i % len) + len) % len;
              if (realIndex < activeIndex || realIndex > slideIndexLastInView)
                unlazy(swiper, realIndex);
            }
          } else {
            for (
              let i = Math.max(activeIndex - amount, 0);
              i <= Math.min(slideIndexLastInView + amount, len - 1);
              i += 1
            ) {
              if (
                i !== activeIndex &&
                (i > slideIndexLastInView || i < activeIndex)
              ) {
                unlazy(swiper, i);
              }
            }
          }
        };

        function getActiveIndexByTranslate(swiper) {
          const { slidesGrid, params } = swiper;
          const translate = swiper.rtlTranslate
            ? swiper.translate
            : -swiper.translate;
          let activeIndex;
          for (let i = 0; i < slidesGrid.length; i += 1) {
            if (typeof slidesGrid[i + 1] !== 'undefined') {
              if (
                translate >= slidesGrid[i] &&
                translate <
                  slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2
              ) {
                activeIndex = i;
              } else if (
                translate >= slidesGrid[i] &&
                translate < slidesGrid[i + 1]
              ) {
                activeIndex = i + 1;
              }
            } else if (translate >= slidesGrid[i]) {
              activeIndex = i;
            }
          }
          // Normalize slideIndex
          if (params.normalizeSlideIndex) {
            if (activeIndex < 0 || typeof activeIndex === 'undefined')
              activeIndex = 0;
          }
          return activeIndex;
        }
        function updateActiveIndex(newActiveIndex) {
          const swiper = this;
          const translate = swiper.rtlTranslate
            ? swiper.translate
            : -swiper.translate;
          const {
            snapGrid,
            params,
            activeIndex: previousIndex,
            realIndex: previousRealIndex,
            snapIndex: previousSnapIndex,
          } = swiper;
          let activeIndex = newActiveIndex;
          let snapIndex;
          const getVirtualRealIndex = (aIndex) => {
            let realIndex = aIndex - swiper.virtual.slidesBefore;
            if (realIndex < 0) {
              realIndex = swiper.virtual.slides.length + realIndex;
            }
            if (realIndex >= swiper.virtual.slides.length) {
              realIndex -= swiper.virtual.slides.length;
            }
            return realIndex;
          };
          if (typeof activeIndex === 'undefined') {
            activeIndex = getActiveIndexByTranslate(swiper);
          }
          if (snapGrid.indexOf(translate) >= 0) {
            snapIndex = snapGrid.indexOf(translate);
          } else {
            const skip = Math.min(params.slidesPerGroupSkip, activeIndex);
            snapIndex =
              skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);
          }
          if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;
          if (activeIndex === previousIndex && !swiper.params.loop) {
            if (snapIndex !== previousSnapIndex) {
              swiper.snapIndex = snapIndex;
              swiper.emit('snapIndexChange');
            }
            return;
          }
          if (
            activeIndex === previousIndex &&
            swiper.params.loop &&
            swiper.virtual &&
            swiper.params.virtual.enabled
          ) {
            swiper.realIndex = getVirtualRealIndex(activeIndex);
            return;
          }
          const gridEnabled =
            swiper.grid && params.grid && params.grid.rows > 1;

          // Get real index
          let realIndex;
          if (swiper.virtual && params.virtual.enabled && params.loop) {
            realIndex = getVirtualRealIndex(activeIndex);
          } else if (gridEnabled) {
            const firstSlideInColumn = swiper.slides.find(
              (slideEl) => slideEl.column === activeIndex,
            );
            let activeSlideIndex = parseInt(
              firstSlideInColumn.getAttribute('data-swiper-slide-index'),
              10,
            );
            if (Number.isNaN(activeSlideIndex)) {
              activeSlideIndex = Math.max(
                swiper.slides.indexOf(firstSlideInColumn),
                0,
              );
            }
            realIndex = Math.floor(activeSlideIndex / params.grid.rows);
          } else if (swiper.slides[activeIndex]) {
            const slideIndex = swiper.slides[activeIndex].getAttribute(
              'data-swiper-slide-index',
            );
            if (slideIndex) {
              realIndex = parseInt(slideIndex, 10);
            } else {
              realIndex = activeIndex;
            }
          } else {
            realIndex = activeIndex;
          }
          Object.assign(swiper, {
            previousSnapIndex,
            snapIndex,
            previousRealIndex,
            realIndex,
            previousIndex,
            activeIndex,
          });
          if (swiper.initialized) {
            preload(swiper);
          }
          swiper.emit('activeIndexChange');
          swiper.emit('snapIndexChange');
          if (swiper.initialized || swiper.params.runCallbacksOnInit) {
            if (previousRealIndex !== realIndex) {
              swiper.emit('realIndexChange');
            }
            swiper.emit('slideChange');
          }
        }

        function updateClickedSlide(el, path) {
          const swiper = this;
          const params = swiper.params;
          let slide = el.closest(`.${params.slideClass}, swiper-slide`);
          if (
            !slide &&
            swiper.isElement &&
            path &&
            path.length > 1 &&
            path.includes(el)
          ) {
            [...path.slice(path.indexOf(el) + 1, path.length)].forEach(
              (pathEl) => {
                if (
                  !slide &&
                  pathEl.matches &&
                  pathEl.matches(`.${params.slideClass}, swiper-slide`)
                ) {
                  slide = pathEl;
                }
              },
            );
          }
          let slideFound = false;
          let slideIndex;
          if (slide) {
            for (let i = 0; i < swiper.slides.length; i += 1) {
              if (swiper.slides[i] === slide) {
                slideFound = true;
                slideIndex = i;
                break;
              }
            }
          }
          if (slide && slideFound) {
            swiper.clickedSlide = slide;
            if (swiper.virtual && swiper.params.virtual.enabled) {
              swiper.clickedIndex = parseInt(
                slide.getAttribute('data-swiper-slide-index'),
                10,
              );
            } else {
              swiper.clickedIndex = slideIndex;
            }
          } else {
            swiper.clickedSlide = undefined;
            swiper.clickedIndex = undefined;
            return;
          }
          if (
            params.slideToClickedSlide &&
            swiper.clickedIndex !== undefined &&
            swiper.clickedIndex !== swiper.activeIndex
          ) {
            swiper.slideToClickedSlide();
          }
        }

        var update = {
          updateSize,
          updateSlides,
          updateAutoHeight,
          updateSlidesOffset,
          updateSlidesProgress,
          updateProgress,
          updateSlidesClasses,
          updateActiveIndex,
          updateClickedSlide,
        };

        function getSwiperTranslate(axis) {
          if (axis === void 0) {
            axis = this.isHorizontal() ? 'x' : 'y';
          }
          const swiper = this;
          const { params, rtlTranslate: rtl, translate, wrapperEl } = swiper;
          if (params.virtualTranslate) {
            return rtl ? -translate : translate;
          }
          if (params.cssMode) {
            return translate;
          }
          let currentTranslate = (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.k)(
            wrapperEl,
            axis,
          );
          currentTranslate += swiper.cssOverflowAdjustment();
          if (rtl) currentTranslate = -currentTranslate;
          return currentTranslate || 0;
        }

        function setTranslate(translate, byController) {
          const swiper = this;
          const { rtlTranslate: rtl, params, wrapperEl, progress } = swiper;
          let x = 0;
          let y = 0;
          const z = 0;
          if (swiper.isHorizontal()) {
            x = rtl ? -translate : translate;
          } else {
            y = translate;
          }
          if (params.roundLengths) {
            x = Math.floor(x);
            y = Math.floor(y);
          }
          swiper.previousTranslate = swiper.translate;
          swiper.translate = swiper.isHorizontal() ? x : y;
          if (params.cssMode) {
            wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] =
              swiper.isHorizontal() ? -x : -y;
          } else if (!params.virtualTranslate) {
            if (swiper.isHorizontal()) {
              x -= swiper.cssOverflowAdjustment();
            } else {
              y -= swiper.cssOverflowAdjustment();
            }
            wrapperEl.style.transform = `translate3d(${x}px, ${y}px, ${z}px)`;
          }

          // Check if we need to update progress
          let newProgress;
          const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
          if (translatesDiff === 0) {
            newProgress = 0;
          } else {
            newProgress = (translate - swiper.minTranslate()) / translatesDiff;
          }
          if (newProgress !== progress) {
            swiper.updateProgress(translate);
          }
          swiper.emit('setTranslate', swiper.translate, byController);
        }

        function minTranslate() {
          return -this.snapGrid[0];
        }

        function maxTranslate() {
          return -this.snapGrid[this.snapGrid.length - 1];
        }

        function translateTo(
          translate,
          speed,
          runCallbacks,
          translateBounds,
          internal,
        ) {
          if (translate === void 0) {
            translate = 0;
          }
          if (speed === void 0) {
            speed = this.params.speed;
          }
          if (runCallbacks === void 0) {
            runCallbacks = true;
          }
          if (translateBounds === void 0) {
            translateBounds = true;
          }
          const swiper = this;
          const { params, wrapperEl } = swiper;
          if (swiper.animating && params.preventInteractionOnTransition) {
            return false;
          }
          const minTranslate = swiper.minTranslate();
          const maxTranslate = swiper.maxTranslate();
          let newTranslate;
          if (translateBounds && translate > minTranslate)
            newTranslate = minTranslate;
          else if (translateBounds && translate < maxTranslate)
            newTranslate = maxTranslate;
          else newTranslate = translate;

          // Update progress
          swiper.updateProgress(newTranslate);
          if (params.cssMode) {
            const isH = swiper.isHorizontal();
            if (speed === 0) {
              wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;
            } else {
              if (!swiper.support.smoothScroll) {
                (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.u)({
                  swiper,
                  targetPosition: -newTranslate,
                  side: isH ? 'left' : 'top',
                });
                return true;
              }
              wrapperEl.scrollTo({
                [isH ? 'left' : 'top']: -newTranslate,
                behavior: 'smooth',
              });
            }
            return true;
          }
          if (speed === 0) {
            swiper.setTransition(0);
            swiper.setTranslate(newTranslate);
            if (runCallbacks) {
              swiper.emit('beforeTransitionStart', speed, internal);
              swiper.emit('transitionEnd');
            }
          } else {
            swiper.setTransition(speed);
            swiper.setTranslate(newTranslate);
            if (runCallbacks) {
              swiper.emit('beforeTransitionStart', speed, internal);
              swiper.emit('transitionStart');
            }
            if (!swiper.animating) {
              swiper.animating = true;
              if (!swiper.onTranslateToWrapperTransitionEnd) {
                swiper.onTranslateToWrapperTransitionEnd =
                  function transitionEnd(e) {
                    if (!swiper || swiper.destroyed) return;
                    if (e.target !== this) return;
                    swiper.wrapperEl.removeEventListener(
                      'transitionend',
                      swiper.onTranslateToWrapperTransitionEnd,
                    );
                    swiper.onTranslateToWrapperTransitionEnd = null;
                    delete swiper.onTranslateToWrapperTransitionEnd;
                    swiper.animating = false;
                    if (runCallbacks) {
                      swiper.emit('transitionEnd');
                    }
                  };
              }
              swiper.wrapperEl.addEventListener(
                'transitionend',
                swiper.onTranslateToWrapperTransitionEnd,
              );
            }
          }
          return true;
        }

        var translate = {
          getTranslate: getSwiperTranslate,
          setTranslate,
          minTranslate,
          maxTranslate,
          translateTo,
        };

        function setTransition(duration, byController) {
          const swiper = this;
          if (!swiper.params.cssMode) {
            swiper.wrapperEl.style.transitionDuration = `${duration}ms`;
            swiper.wrapperEl.style.transitionDelay =
              duration === 0 ? `0ms` : '';
          }
          swiper.emit('setTransition', duration, byController);
        }

        function transitionEmit(_ref) {
          let { swiper, runCallbacks, direction, step } = _ref;
          const { activeIndex, previousIndex } = swiper;
          let dir = direction;
          if (!dir) {
            if (activeIndex > previousIndex) dir = 'next';
            else if (activeIndex < previousIndex) dir = 'prev';
            else dir = 'reset';
          }
          swiper.emit(`transition${step}`);
          if (runCallbacks && dir === 'reset') {
            swiper.emit(`slideResetTransition${step}`);
          } else if (runCallbacks && activeIndex !== previousIndex) {
            swiper.emit(`slideChangeTransition${step}`);
            if (dir === 'next') {
              swiper.emit(`slideNextTransition${step}`);
            } else {
              swiper.emit(`slidePrevTransition${step}`);
            }
          }
        }

        function transitionStart(runCallbacks, direction) {
          if (runCallbacks === void 0) {
            runCallbacks = true;
          }
          const swiper = this;
          const { params } = swiper;
          if (params.cssMode) return;
          if (params.autoHeight) {
            swiper.updateAutoHeight();
          }
          transitionEmit({
            swiper,
            runCallbacks,
            direction,
            step: 'Start',
          });
        }

        function transitionEnd(runCallbacks, direction) {
          if (runCallbacks === void 0) {
            runCallbacks = true;
          }
          const swiper = this;
          const { params } = swiper;
          swiper.animating = false;
          if (params.cssMode) return;
          swiper.setTransition(0);
          transitionEmit({
            swiper,
            runCallbacks,
            direction,
            step: 'End',
          });
        }

        var transition = {
          setTransition,
          transitionStart,
          transitionEnd,
        };

        function slideTo(index, speed, runCallbacks, internal, initial) {
          if (index === void 0) {
            index = 0;
          }
          if (runCallbacks === void 0) {
            runCallbacks = true;
          }
          if (typeof index === 'string') {
            index = parseInt(index, 10);
          }
          const swiper = this;
          let slideIndex = index;
          if (slideIndex < 0) slideIndex = 0;
          const {
            params,
            snapGrid,
            slidesGrid,
            previousIndex,
            activeIndex,
            rtlTranslate: rtl,
            wrapperEl,
            enabled,
          } = swiper;
          if (
            (!enabled && !internal && !initial) ||
            swiper.destroyed ||
            (swiper.animating && params.preventInteractionOnTransition)
          ) {
            return false;
          }
          if (typeof speed === 'undefined') {
            speed = swiper.params.speed;
          }
          const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);
          let snapIndex =
            skip +
            Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);
          if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;
          const translate = -snapGrid[snapIndex];
          // Normalize slideIndex
          if (params.normalizeSlideIndex) {
            for (let i = 0; i < slidesGrid.length; i += 1) {
              const normalizedTranslate = -Math.floor(translate * 100);
              const normalizedGrid = Math.floor(slidesGrid[i] * 100);
              const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);
              if (typeof slidesGrid[i + 1] !== 'undefined') {
                if (
                  normalizedTranslate >= normalizedGrid &&
                  normalizedTranslate <
                    normalizedGridNext -
                      (normalizedGridNext - normalizedGrid) / 2
                ) {
                  slideIndex = i;
                } else if (
                  normalizedTranslate >= normalizedGrid &&
                  normalizedTranslate < normalizedGridNext
                ) {
                  slideIndex = i + 1;
                }
              } else if (normalizedTranslate >= normalizedGrid) {
                slideIndex = i;
              }
            }
          }
          // Directions locks
          if (swiper.initialized && slideIndex !== activeIndex) {
            if (
              !swiper.allowSlideNext &&
              (rtl
                ? translate > swiper.translate &&
                  translate > swiper.minTranslate()
                : translate < swiper.translate &&
                  translate < swiper.minTranslate())
            ) {
              return false;
            }
            if (
              !swiper.allowSlidePrev &&
              translate > swiper.translate &&
              translate > swiper.maxTranslate()
            ) {
              if ((activeIndex || 0) !== slideIndex) {
                return false;
              }
            }
          }
          if (slideIndex !== (previousIndex || 0) && runCallbacks) {
            swiper.emit('beforeSlideChangeStart');
          }

          // Update progress
          swiper.updateProgress(translate);
          let direction;
          if (slideIndex > activeIndex) direction = 'next';
          else if (slideIndex < activeIndex) direction = 'prev';
          else direction = 'reset';

          // initial virtual
          const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
          const isInitialVirtual = isVirtual && initial;
          // Update Index
          if (
            !isInitialVirtual &&
            ((rtl && -translate === swiper.translate) ||
              (!rtl && translate === swiper.translate))
          ) {
            swiper.updateActiveIndex(slideIndex);
            // Update Height
            if (params.autoHeight) {
              swiper.updateAutoHeight();
            }
            swiper.updateSlidesClasses();
            if (params.effect !== 'slide') {
              swiper.setTranslate(translate);
            }
            if (direction !== 'reset') {
              swiper.transitionStart(runCallbacks, direction);
              swiper.transitionEnd(runCallbacks, direction);
            }
            return false;
          }
          if (params.cssMode) {
            const isH = swiper.isHorizontal();
            const t = rtl ? translate : -translate;
            if (speed === 0) {
              if (isVirtual) {
                swiper.wrapperEl.style.scrollSnapType = 'none';
                swiper._immediateVirtual = true;
              }
              if (
                isVirtual &&
                !swiper._cssModeVirtualInitialSet &&
                swiper.params.initialSlide > 0
              ) {
                swiper._cssModeVirtualInitialSet = true;
                requestAnimationFrame(() => {
                  wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
                });
              } else {
                wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
              }
              if (isVirtual) {
                requestAnimationFrame(() => {
                  swiper.wrapperEl.style.scrollSnapType = '';
                  swiper._immediateVirtual = false;
                });
              }
            } else {
              if (!swiper.support.smoothScroll) {
                (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.u)({
                  swiper,
                  targetPosition: t,
                  side: isH ? 'left' : 'top',
                });
                return true;
              }
              wrapperEl.scrollTo({
                [isH ? 'left' : 'top']: t,
                behavior: 'smooth',
              });
            }
            return true;
          }
          const browser = getBrowser();
          const isSafari = browser.isSafari;
          if (isVirtual && !initial && isSafari && swiper.isElement) {
            swiper.virtual.update(false, false, slideIndex);
          }
          swiper.setTransition(speed);
          swiper.setTranslate(translate);
          swiper.updateActiveIndex(slideIndex);
          swiper.updateSlidesClasses();
          swiper.emit('beforeTransitionStart', speed, internal);
          swiper.transitionStart(runCallbacks, direction);
          if (speed === 0) {
            swiper.transitionEnd(runCallbacks, direction);
          } else if (!swiper.animating) {
            swiper.animating = true;
            if (!swiper.onSlideToWrapperTransitionEnd) {
              swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {
                if (!swiper || swiper.destroyed) return;
                if (e.target !== this) return;
                swiper.wrapperEl.removeEventListener(
                  'transitionend',
                  swiper.onSlideToWrapperTransitionEnd,
                );
                swiper.onSlideToWrapperTransitionEnd = null;
                delete swiper.onSlideToWrapperTransitionEnd;
                swiper.transitionEnd(runCallbacks, direction);
              };
            }
            swiper.wrapperEl.addEventListener(
              'transitionend',
              swiper.onSlideToWrapperTransitionEnd,
            );
          }
          return true;
        }

        function slideToLoop(index, speed, runCallbacks, internal) {
          if (index === void 0) {
            index = 0;
          }
          if (runCallbacks === void 0) {
            runCallbacks = true;
          }
          if (typeof index === 'string') {
            const indexAsNumber = parseInt(index, 10);
            index = indexAsNumber;
          }
          const swiper = this;
          if (swiper.destroyed) return;
          if (typeof speed === 'undefined') {
            speed = swiper.params.speed;
          }
          const gridEnabled =
            swiper.grid && swiper.params.grid && swiper.params.grid.rows > 1;
          let newIndex = index;
          if (swiper.params.loop) {
            if (swiper.virtual && swiper.params.virtual.enabled) {
              // eslint-disable-next-line
              newIndex = newIndex + swiper.virtual.slidesBefore;
            } else {
              let targetSlideIndex;
              if (gridEnabled) {
                const slideIndex = newIndex * swiper.params.grid.rows;
                targetSlideIndex = swiper.slides.find(
                  (slideEl) =>
                    slideEl.getAttribute('data-swiper-slide-index') * 1 ===
                    slideIndex,
                ).column;
              } else {
                targetSlideIndex = swiper.getSlideIndexByData(newIndex);
              }
              const cols = gridEnabled
                ? Math.ceil(swiper.slides.length / swiper.params.grid.rows)
                : swiper.slides.length;
              const { centeredSlides } = swiper.params;
              let slidesPerView = swiper.params.slidesPerView;
              if (slidesPerView === 'auto') {
                slidesPerView = swiper.slidesPerViewDynamic();
              } else {
                slidesPerView = Math.ceil(
                  parseFloat(swiper.params.slidesPerView, 10),
                );
                if (centeredSlides && slidesPerView % 2 === 0) {
                  slidesPerView = slidesPerView + 1;
                }
              }
              let needLoopFix = cols - targetSlideIndex < slidesPerView;
              if (centeredSlides) {
                needLoopFix =
                  needLoopFix ||
                  targetSlideIndex < Math.ceil(slidesPerView / 2);
              }
              if (
                internal &&
                centeredSlides &&
                swiper.params.slidesPerView !== 'auto' &&
                !gridEnabled
              ) {
                needLoopFix = false;
              }
              if (needLoopFix) {
                const direction = centeredSlides
                  ? targetSlideIndex < swiper.activeIndex
                    ? 'prev'
                    : 'next'
                  : targetSlideIndex - swiper.activeIndex - 1 <
                      swiper.params.slidesPerView
                    ? 'next'
                    : 'prev';
                swiper.loopFix({
                  direction,
                  slideTo: true,
                  activeSlideIndex:
                    direction === 'next'
                      ? targetSlideIndex + 1
                      : targetSlideIndex - cols + 1,
                  slideRealIndex:
                    direction === 'next' ? swiper.realIndex : undefined,
                });
              }
              if (gridEnabled) {
                const slideIndex = newIndex * swiper.params.grid.rows;
                newIndex = swiper.slides.find(
                  (slideEl) =>
                    slideEl.getAttribute('data-swiper-slide-index') * 1 ===
                    slideIndex,
                ).column;
              } else {
                newIndex = swiper.getSlideIndexByData(newIndex);
              }
            }
          }
          requestAnimationFrame(() => {
            swiper.slideTo(newIndex, speed, runCallbacks, internal);
          });
          return swiper;
        }

        /* eslint no-unused-vars: "off" */
        function slideNext(speed, runCallbacks, internal) {
          if (runCallbacks === void 0) {
            runCallbacks = true;
          }
          const swiper = this;
          const { enabled, params, animating } = swiper;
          if (!enabled || swiper.destroyed) return swiper;
          if (typeof speed === 'undefined') {
            speed = swiper.params.speed;
          }
          let perGroup = params.slidesPerGroup;
          if (
            params.slidesPerView === 'auto' &&
            params.slidesPerGroup === 1 &&
            params.slidesPerGroupAuto
          ) {
            perGroup = Math.max(
              swiper.slidesPerViewDynamic('current', true),
              1,
            );
          }
          const increment =
            swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;
          const isVirtual = swiper.virtual && params.virtual.enabled;
          if (params.loop) {
            if (animating && !isVirtual && params.loopPreventsSliding)
              return false;
            swiper.loopFix({
              direction: 'next',
            });
            // eslint-disable-next-line
            swiper._clientLeft = swiper.wrapperEl.clientLeft;
            if (
              swiper.activeIndex === swiper.slides.length - 1 &&
              params.cssMode
            ) {
              requestAnimationFrame(() => {
                swiper.slideTo(
                  swiper.activeIndex + increment,
                  speed,
                  runCallbacks,
                  internal,
                );
              });
              return true;
            }
          }
          if (params.rewind && swiper.isEnd) {
            return swiper.slideTo(0, speed, runCallbacks, internal);
          }
          return swiper.slideTo(
            swiper.activeIndex + increment,
            speed,
            runCallbacks,
            internal,
          );
        }

        /* eslint no-unused-vars: "off" */
        function slidePrev(speed, runCallbacks, internal) {
          if (runCallbacks === void 0) {
            runCallbacks = true;
          }
          const swiper = this;
          const {
            params,
            snapGrid,
            slidesGrid,
            rtlTranslate,
            enabled,
            animating,
          } = swiper;
          if (!enabled || swiper.destroyed) return swiper;
          if (typeof speed === 'undefined') {
            speed = swiper.params.speed;
          }
          const isVirtual = swiper.virtual && params.virtual.enabled;
          if (params.loop) {
            if (animating && !isVirtual && params.loopPreventsSliding)
              return false;
            swiper.loopFix({
              direction: 'prev',
            });
            // eslint-disable-next-line
            swiper._clientLeft = swiper.wrapperEl.clientLeft;
          }
          const translate = rtlTranslate ? swiper.translate : -swiper.translate;
          function normalize(val) {
            if (val < 0) return -Math.floor(Math.abs(val));
            return Math.floor(val);
          }
          const normalizedTranslate = normalize(translate);
          const normalizedSnapGrid = snapGrid.map((val) => normalize(val));
          const isFreeMode = params.freeMode && params.freeMode.enabled;
          let prevSnap =
            snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];
          if (
            typeof prevSnap === 'undefined' &&
            (params.cssMode || isFreeMode)
          ) {
            let prevSnapIndex;
            snapGrid.forEach((snap, snapIndex) => {
              if (normalizedTranslate >= snap) {
                // prevSnap = snap;
                prevSnapIndex = snapIndex;
              }
            });
            if (typeof prevSnapIndex !== 'undefined') {
              prevSnap = isFreeMode
                ? snapGrid[prevSnapIndex]
                : snapGrid[
                    prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex
                  ];
            }
          }
          let prevIndex = 0;
          if (typeof prevSnap !== 'undefined') {
            prevIndex = slidesGrid.indexOf(prevSnap);
            if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;
            if (
              params.slidesPerView === 'auto' &&
              params.slidesPerGroup === 1 &&
              params.slidesPerGroupAuto
            ) {
              prevIndex =
                prevIndex - swiper.slidesPerViewDynamic('previous', true) + 1;
              prevIndex = Math.max(prevIndex, 0);
            }
          }
          if (params.rewind && swiper.isBeginning) {
            const lastIndex =
              swiper.params.virtual &&
              swiper.params.virtual.enabled &&
              swiper.virtual
                ? swiper.virtual.slides.length - 1
                : swiper.slides.length - 1;
            return swiper.slideTo(lastIndex, speed, runCallbacks, internal);
          } else if (
            params.loop &&
            swiper.activeIndex === 0 &&
            params.cssMode
          ) {
            requestAnimationFrame(() => {
              swiper.slideTo(prevIndex, speed, runCallbacks, internal);
            });
            return true;
          }
          return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
        }

        /* eslint no-unused-vars: "off" */
        function slideReset(speed, runCallbacks, internal) {
          if (runCallbacks === void 0) {
            runCallbacks = true;
          }
          const swiper = this;
          if (swiper.destroyed) return;
          if (typeof speed === 'undefined') {
            speed = swiper.params.speed;
          }
          return swiper.slideTo(
            swiper.activeIndex,
            speed,
            runCallbacks,
            internal,
          );
        }

        /* eslint no-unused-vars: "off" */
        function slideToClosest(speed, runCallbacks, internal, threshold) {
          if (runCallbacks === void 0) {
            runCallbacks = true;
          }
          if (threshold === void 0) {
            threshold = 0.5;
          }
          const swiper = this;
          if (swiper.destroyed) return;
          if (typeof speed === 'undefined') {
            speed = swiper.params.speed;
          }
          let index = swiper.activeIndex;
          const skip = Math.min(swiper.params.slidesPerGroupSkip, index);
          const snapIndex =
            skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);
          const translate = swiper.rtlTranslate
            ? swiper.translate
            : -swiper.translate;
          if (translate >= swiper.snapGrid[snapIndex]) {
            // The current translate is on or after the current snap index, so the choice
            // is between the current index and the one after it.
            const currentSnap = swiper.snapGrid[snapIndex];
            const nextSnap = swiper.snapGrid[snapIndex + 1];
            if (
              translate - currentSnap >
              (nextSnap - currentSnap) * threshold
            ) {
              index += swiper.params.slidesPerGroup;
            }
          } else {
            // The current translate is before the current snap index, so the choice
            // is between the current index and the one before it.
            const prevSnap = swiper.snapGrid[snapIndex - 1];
            const currentSnap = swiper.snapGrid[snapIndex];
            if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {
              index -= swiper.params.slidesPerGroup;
            }
          }
          index = Math.max(index, 0);
          index = Math.min(index, swiper.slidesGrid.length - 1);
          return swiper.slideTo(index, speed, runCallbacks, internal);
        }

        function slideToClickedSlide() {
          const swiper = this;
          if (swiper.destroyed) return;
          const { params, slidesEl } = swiper;
          const slidesPerView =
            params.slidesPerView === 'auto'
              ? swiper.slidesPerViewDynamic()
              : params.slidesPerView;
          let slideToIndex = swiper.getSlideIndexWhenGrid(swiper.clickedIndex);
          let realIndex;
          const slideSelector = swiper.isElement
            ? `swiper-slide`
            : `.${params.slideClass}`;
          const isGrid =
            swiper.grid && swiper.params.grid && swiper.params.grid.rows > 1;
          if (params.loop) {
            if (swiper.animating) return;
            realIndex = parseInt(
              swiper.clickedSlide.getAttribute('data-swiper-slide-index'),
              10,
            );
            if (params.centeredSlides) {
              swiper.slideToLoop(realIndex);
            } else if (
              slideToIndex >
              (isGrid
                ? (swiper.slides.length - slidesPerView) / 2 -
                  (swiper.params.grid.rows - 1)
                : swiper.slides.length - slidesPerView)
            ) {
              swiper.loopFix();
              slideToIndex = swiper.getSlideIndex(
                (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(
                  slidesEl,
                  `${slideSelector}[data-swiper-slide-index="${realIndex}"]`,
                )[0],
              );
              (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(() => {
                swiper.slideTo(slideToIndex);
              });
            } else {
              swiper.slideTo(slideToIndex);
            }
          } else {
            swiper.slideTo(slideToIndex);
          }
        }

        var slide = {
          slideTo,
          slideToLoop,
          slideNext,
          slidePrev,
          slideReset,
          slideToClosest,
          slideToClickedSlide,
        };

        function loopCreate(slideRealIndex, initial) {
          const swiper = this;
          const { params, slidesEl } = swiper;
          if (!params.loop || (swiper.virtual && swiper.params.virtual.enabled))
            return;
          const initSlides = () => {
            const slides = (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(
              slidesEl,
              `.${params.slideClass}, swiper-slide`,
            );
            slides.forEach((el, index) => {
              el.setAttribute('data-swiper-slide-index', index);
            });
          };
          const clearBlankSlides = () => {
            const slides = (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(
              slidesEl,
              `.${params.slideBlankClass}`,
            );
            slides.forEach((el) => {
              el.remove();
            });
            if (slides.length > 0) {
              swiper.recalcSlides();
              swiper.updateSlides();
            }
          };
          const gridEnabled =
            swiper.grid && params.grid && params.grid.rows > 1;
          if (
            params.loopAddBlankSlides &&
            (params.slidesPerGroup > 1 || gridEnabled)
          ) {
            clearBlankSlides();
          }
          const slidesPerGroup =
            params.slidesPerGroup * (gridEnabled ? params.grid.rows : 1);
          const shouldFillGroup = swiper.slides.length % slidesPerGroup !== 0;
          const shouldFillGrid =
            gridEnabled && swiper.slides.length % params.grid.rows !== 0;
          const addBlankSlides = (amountOfSlides) => {
            for (let i = 0; i < amountOfSlides; i += 1) {
              const slideEl = swiper.isElement
                ? (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(
                    'swiper-slide',
                    [params.slideBlankClass],
                  )
                : (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)('div', [
                    params.slideClass,
                    params.slideBlankClass,
                  ]);
              swiper.slidesEl.append(slideEl);
            }
          };
          if (shouldFillGroup) {
            if (params.loopAddBlankSlides) {
              const slidesToAdd =
                slidesPerGroup - (swiper.slides.length % slidesPerGroup);
              addBlankSlides(slidesToAdd);
              swiper.recalcSlides();
              swiper.updateSlides();
            } else {
              (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.v)(
                'Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)',
              );
            }
            initSlides();
          } else if (shouldFillGrid) {
            if (params.loopAddBlankSlides) {
              const slidesToAdd =
                params.grid.rows - (swiper.slides.length % params.grid.rows);
              addBlankSlides(slidesToAdd);
              swiper.recalcSlides();
              swiper.updateSlides();
            } else {
              (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.v)(
                'Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)',
              );
            }
            initSlides();
          } else {
            initSlides();
          }
          swiper.loopFix({
            slideRealIndex,
            direction: params.centeredSlides ? undefined : 'next',
            initial,
          });
        }

        function loopFix(_temp) {
          let {
            slideRealIndex,
            slideTo = true,
            direction,
            setTranslate,
            activeSlideIndex,
            initial,
            byController,
            byMousewheel,
          } = _temp === void 0 ? {} : _temp;
          const swiper = this;
          if (!swiper.params.loop) return;
          swiper.emit('beforeLoopFix');
          const { slides, allowSlidePrev, allowSlideNext, slidesEl, params } =
            swiper;
          const { centeredSlides, initialSlide } = params;
          swiper.allowSlidePrev = true;
          swiper.allowSlideNext = true;
          if (swiper.virtual && params.virtual.enabled) {
            if (slideTo) {
              if (!params.centeredSlides && swiper.snapIndex === 0) {
                swiper.slideTo(swiper.virtual.slides.length, 0, false, true);
              } else if (
                params.centeredSlides &&
                swiper.snapIndex < params.slidesPerView
              ) {
                swiper.slideTo(
                  swiper.virtual.slides.length + swiper.snapIndex,
                  0,
                  false,
                  true,
                );
              } else if (swiper.snapIndex === swiper.snapGrid.length - 1) {
                swiper.slideTo(swiper.virtual.slidesBefore, 0, false, true);
              }
            }
            swiper.allowSlidePrev = allowSlidePrev;
            swiper.allowSlideNext = allowSlideNext;
            swiper.emit('loopFix');
            return;
          }
          let slidesPerView = params.slidesPerView;
          if (slidesPerView === 'auto') {
            slidesPerView = swiper.slidesPerViewDynamic();
          } else {
            slidesPerView = Math.ceil(parseFloat(params.slidesPerView, 10));
            if (centeredSlides && slidesPerView % 2 === 0) {
              slidesPerView = slidesPerView + 1;
            }
          }
          const slidesPerGroup = params.slidesPerGroupAuto
            ? slidesPerView
            : params.slidesPerGroup;
          let loopedSlides = centeredSlides
            ? Math.max(slidesPerGroup, Math.ceil(slidesPerView / 2))
            : slidesPerGroup;
          if (loopedSlides % slidesPerGroup !== 0) {
            loopedSlides += slidesPerGroup - (loopedSlides % slidesPerGroup);
          }
          loopedSlides += params.loopAdditionalSlides;
          swiper.loopedSlides = loopedSlides;
          const gridEnabled =
            swiper.grid && params.grid && params.grid.rows > 1;
          if (
            slides.length < slidesPerView + loopedSlides ||
            (swiper.params.effect === 'cards' &&
              slides.length < slidesPerView + loopedSlides * 2)
          ) {
            (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.v)(
              'Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled or not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters',
            );
          } else if (gridEnabled && params.grid.fill === 'row') {
            (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.v)(
              'Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`',
            );
          }
          const prependSlidesIndexes = [];
          const appendSlidesIndexes = [];
          const cols = gridEnabled
            ? Math.ceil(slides.length / params.grid.rows)
            : slides.length;
          const isInitialOverflow =
            initial && cols - initialSlide < slidesPerView && !centeredSlides;
          let activeIndex = isInitialOverflow
            ? initialSlide
            : swiper.activeIndex;
          if (typeof activeSlideIndex === 'undefined') {
            activeSlideIndex = swiper.getSlideIndex(
              slides.find((el) =>
                el.classList.contains(params.slideActiveClass),
              ),
            );
          } else {
            activeIndex = activeSlideIndex;
          }
          const isNext = direction === 'next' || !direction;
          const isPrev = direction === 'prev' || !direction;
          let slidesPrepended = 0;
          let slidesAppended = 0;
          const activeColIndex = gridEnabled
            ? slides[activeSlideIndex].column
            : activeSlideIndex;
          const activeColIndexWithShift =
            activeColIndex +
            (centeredSlides && typeof setTranslate === 'undefined'
              ? -slidesPerView / 2 + 0.5
              : 0);
          // prepend last slides before start
          if (activeColIndexWithShift < loopedSlides) {
            slidesPrepended = Math.max(
              loopedSlides - activeColIndexWithShift,
              slidesPerGroup,
            );
            for (
              let i = 0;
              i < loopedSlides - activeColIndexWithShift;
              i += 1
            ) {
              const index = i - Math.floor(i / cols) * cols;
              if (gridEnabled) {
                const colIndexToPrepend = cols - index - 1;
                for (let i = slides.length - 1; i >= 0; i -= 1) {
                  if (slides[i].column === colIndexToPrepend)
                    prependSlidesIndexes.push(i);
                }
                // slides.forEach((slide, slideIndex) => {
                //   if (slide.column === colIndexToPrepend) prependSlidesIndexes.push(slideIndex);
                // });
              } else {
                prependSlidesIndexes.push(cols - index - 1);
              }
            }
          } else if (
            activeColIndexWithShift + slidesPerView >
            cols - loopedSlides
          ) {
            slidesAppended = Math.max(
              activeColIndexWithShift - (cols - loopedSlides * 2),
              slidesPerGroup,
            );
            if (isInitialOverflow) {
              slidesAppended = Math.max(
                slidesAppended,
                slidesPerView - cols + initialSlide + 1,
              );
            }
            for (let i = 0; i < slidesAppended; i += 1) {
              const index = i - Math.floor(i / cols) * cols;
              if (gridEnabled) {
                slides.forEach((slide, slideIndex) => {
                  if (slide.column === index)
                    appendSlidesIndexes.push(slideIndex);
                });
              } else {
                appendSlidesIndexes.push(index);
              }
            }
          }
          swiper.__preventObserver__ = true;
          requestAnimationFrame(() => {
            swiper.__preventObserver__ = false;
          });
          if (
            swiper.params.effect === 'cards' &&
            slides.length < slidesPerView + loopedSlides * 2
          ) {
            if (appendSlidesIndexes.includes(activeSlideIndex)) {
              appendSlidesIndexes.splice(
                appendSlidesIndexes.indexOf(activeSlideIndex),
                1,
              );
            }
            if (prependSlidesIndexes.includes(activeSlideIndex)) {
              prependSlidesIndexes.splice(
                prependSlidesIndexes.indexOf(activeSlideIndex),
                1,
              );
            }
          }
          if (isPrev) {
            prependSlidesIndexes.forEach((index) => {
              slides[index].swiperLoopMoveDOM = true;
              slidesEl.prepend(slides[index]);
              slides[index].swiperLoopMoveDOM = false;
            });
          }
          if (isNext) {
            appendSlidesIndexes.forEach((index) => {
              slides[index].swiperLoopMoveDOM = true;
              slidesEl.append(slides[index]);
              slides[index].swiperLoopMoveDOM = false;
            });
          }
          swiper.recalcSlides();
          if (params.slidesPerView === 'auto') {
            swiper.updateSlides();
          } else if (
            gridEnabled &&
            ((prependSlidesIndexes.length > 0 && isPrev) ||
              (appendSlidesIndexes.length > 0 && isNext))
          ) {
            swiper.slides.forEach((slide, slideIndex) => {
              swiper.grid.updateSlide(slideIndex, slide, swiper.slides);
            });
          }
          if (params.watchSlidesProgress) {
            swiper.updateSlidesOffset();
          }
          if (slideTo) {
            if (prependSlidesIndexes.length > 0 && isPrev) {
              if (typeof slideRealIndex === 'undefined') {
                const currentSlideTranslate = swiper.slidesGrid[activeIndex];
                const newSlideTranslate =
                  swiper.slidesGrid[activeIndex + slidesPrepended];
                const diff = newSlideTranslate - currentSlideTranslate;
                if (byMousewheel) {
                  swiper.setTranslate(swiper.translate - diff);
                } else {
                  swiper.slideTo(
                    activeIndex + Math.ceil(slidesPrepended),
                    0,
                    false,
                    true,
                  );
                  if (setTranslate) {
                    swiper.touchEventsData.startTranslate =
                      swiper.touchEventsData.startTranslate - diff;
                    swiper.touchEventsData.currentTranslate =
                      swiper.touchEventsData.currentTranslate - diff;
                  }
                }
              } else {
                if (setTranslate) {
                  const shift = gridEnabled
                    ? prependSlidesIndexes.length / params.grid.rows
                    : prependSlidesIndexes.length;
                  swiper.slideTo(swiper.activeIndex + shift, 0, false, true);
                  swiper.touchEventsData.currentTranslate = swiper.translate;
                }
              }
            } else if (appendSlidesIndexes.length > 0 && isNext) {
              if (typeof slideRealIndex === 'undefined') {
                const currentSlideTranslate = swiper.slidesGrid[activeIndex];
                const newSlideTranslate =
                  swiper.slidesGrid[activeIndex - slidesAppended];
                const diff = newSlideTranslate - currentSlideTranslate;
                if (byMousewheel) {
                  swiper.setTranslate(swiper.translate - diff);
                } else {
                  swiper.slideTo(activeIndex - slidesAppended, 0, false, true);
                  if (setTranslate) {
                    swiper.touchEventsData.startTranslate =
                      swiper.touchEventsData.startTranslate - diff;
                    swiper.touchEventsData.currentTranslate =
                      swiper.touchEventsData.currentTranslate - diff;
                  }
                }
              } else {
                const shift = gridEnabled
                  ? appendSlidesIndexes.length / params.grid.rows
                  : appendSlidesIndexes.length;
                swiper.slideTo(swiper.activeIndex - shift, 0, false, true);
              }
            }
          }
          swiper.allowSlidePrev = allowSlidePrev;
          swiper.allowSlideNext = allowSlideNext;
          if (swiper.controller && swiper.controller.control && !byController) {
            const loopParams = {
              slideRealIndex,
              direction,
              setTranslate,
              activeSlideIndex,
              byController: true,
            };
            if (Array.isArray(swiper.controller.control)) {
              swiper.controller.control.forEach((c) => {
                if (!c.destroyed && c.params.loop)
                  c.loopFix({
                    ...loopParams,
                    slideTo:
                      c.params.slidesPerView === params.slidesPerView
                        ? slideTo
                        : false,
                  });
              });
            } else if (
              swiper.controller.control instanceof swiper.constructor &&
              swiper.controller.control.params.loop
            ) {
              swiper.controller.control.loopFix({
                ...loopParams,
                slideTo:
                  swiper.controller.control.params.slidesPerView ===
                  params.slidesPerView
                    ? slideTo
                    : false,
              });
            }
          }
          swiper.emit('loopFix');
        }

        function loopDestroy() {
          const swiper = this;
          const { params, slidesEl } = swiper;
          if (
            !params.loop ||
            !slidesEl ||
            (swiper.virtual && swiper.params.virtual.enabled)
          )
            return;
          swiper.recalcSlides();
          const newSlidesOrder = [];
          swiper.slides.forEach((slideEl) => {
            const index =
              typeof slideEl.swiperSlideIndex === 'undefined'
                ? slideEl.getAttribute('data-swiper-slide-index') * 1
                : slideEl.swiperSlideIndex;
            newSlidesOrder[index] = slideEl;
          });
          swiper.slides.forEach((slideEl) => {
            slideEl.removeAttribute('data-swiper-slide-index');
          });
          newSlidesOrder.forEach((slideEl) => {
            slidesEl.append(slideEl);
          });
          swiper.recalcSlides();
          swiper.slideTo(swiper.realIndex, 0);
        }

        var loop = {
          loopCreate,
          loopFix,
          loopDestroy,
        };

        function setGrabCursor(moving) {
          const swiper = this;
          if (
            !swiper.params.simulateTouch ||
            (swiper.params.watchOverflow && swiper.isLocked) ||
            swiper.params.cssMode
          )
            return;
          const el =
            swiper.params.touchEventsTarget === 'container'
              ? swiper.el
              : swiper.wrapperEl;
          if (swiper.isElement) {
            swiper.__preventObserver__ = true;
          }
          el.style.cursor = 'move';
          el.style.cursor = moving ? 'grabbing' : 'grab';
          if (swiper.isElement) {
            requestAnimationFrame(() => {
              swiper.__preventObserver__ = false;
            });
          }
        }

        function unsetGrabCursor() {
          const swiper = this;
          if (
            (swiper.params.watchOverflow && swiper.isLocked) ||
            swiper.params.cssMode
          ) {
            return;
          }
          if (swiper.isElement) {
            swiper.__preventObserver__ = true;
          }
          swiper[
            swiper.params.touchEventsTarget === 'container' ? 'el' : 'wrapperEl'
          ].style.cursor = '';
          if (swiper.isElement) {
            requestAnimationFrame(() => {
              swiper.__preventObserver__ = false;
            });
          }
        }

        var grabCursor = {
          setGrabCursor,
          unsetGrabCursor,
        };

        // Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd
        function closestElement(selector, base) {
          if (base === void 0) {
            base = this;
          }
          function __closestFrom(el) {
            if (
              !el ||
              el ===
                (0, _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)() ||
              el === (0, _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)()
            )
              return null;
            if (el.assignedSlot) el = el.assignedSlot;
            const found = el.closest(selector);
            if (!found && !el.getRootNode) {
              return null;
            }
            return found || __closestFrom(el.getRootNode().host);
          }
          return __closestFrom(base);
        }
        function preventEdgeSwipe(swiper, event, startX) {
          const window = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          const { params } = swiper;
          const edgeSwipeDetection = params.edgeSwipeDetection;
          const edgeSwipeThreshold = params.edgeSwipeThreshold;
          if (
            edgeSwipeDetection &&
            (startX <= edgeSwipeThreshold ||
              startX >= window.innerWidth - edgeSwipeThreshold)
          ) {
            if (edgeSwipeDetection === 'prevent') {
              event.preventDefault();
              return true;
            }
            return false;
          }
          return true;
        }
        function onTouchStart(event) {
          const swiper = this;
          const document = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();
          let e = event;
          if (e.originalEvent) e = e.originalEvent;
          const data = swiper.touchEventsData;
          if (e.type === 'pointerdown') {
            if (data.pointerId !== null && data.pointerId !== e.pointerId) {
              return;
            }
            data.pointerId = e.pointerId;
          } else if (e.type === 'touchstart' && e.targetTouches.length === 1) {
            data.touchId = e.targetTouches[0].identifier;
          }
          if (e.type === 'touchstart') {
            // don't proceed touch event
            preventEdgeSwipe(swiper, e, e.targetTouches[0].pageX);
            return;
          }
          const { params, touches, enabled } = swiper;
          if (!enabled) return;
          if (!params.simulateTouch && e.pointerType === 'mouse') return;
          if (swiper.animating && params.preventInteractionOnTransition) {
            return;
          }
          if (!swiper.animating && params.cssMode && params.loop) {
            swiper.loopFix();
          }
          let targetEl = e.target;
          if (params.touchEventsTarget === 'wrapper') {
            if (
              !(0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(
                targetEl,
                swiper.wrapperEl,
              )
            )
              return;
          }
          if ('which' in e && e.which === 3) return;
          if ('button' in e && e.button > 0) return;
          if (data.isTouched && data.isMoved) return;

          // change target el for shadow root component
          const swipingClassHasValue =
            !!params.noSwipingClass && params.noSwipingClass !== '';
          // eslint-disable-next-line
          const eventPath = e.composedPath ? e.composedPath() : e.path;
          if (
            swipingClassHasValue &&
            e.target &&
            e.target.shadowRoot &&
            eventPath
          ) {
            targetEl = eventPath[0];
          }
          const noSwipingSelector = params.noSwipingSelector
            ? params.noSwipingSelector
            : `.${params.noSwipingClass}`;
          const isTargetShadow = !!(e.target && e.target.shadowRoot);

          // use closestElement for shadow root element to get the actual closest for nested shadow root element
          if (
            params.noSwiping &&
            (isTargetShadow
              ? closestElement(noSwipingSelector, targetEl)
              : targetEl.closest(noSwipingSelector))
          ) {
            swiper.allowClick = true;
            return;
          }
          if (params.swipeHandler) {
            if (!targetEl.closest(params.swipeHandler)) return;
          }
          touches.currentX = e.pageX;
          touches.currentY = e.pageY;
          const startX = touches.currentX;
          const startY = touches.currentY;

          // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore

          if (!preventEdgeSwipe(swiper, e, startX)) {
            return;
          }
          Object.assign(data, {
            isTouched: true,
            isMoved: false,
            allowTouchCallbacks: true,
            isScrolling: undefined,
            startMoving: undefined,
          });
          touches.startX = startX;
          touches.startY = startY;
          data.touchStartTime = (0,
          _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)();
          swiper.allowClick = true;
          swiper.updateSize();
          swiper.swipeDirection = undefined;
          if (params.threshold > 0) data.allowThresholdMove = false;
          let preventDefault = true;
          if (targetEl.matches(data.focusableElements)) {
            preventDefault = false;
            if (targetEl.nodeName === 'SELECT') {
              data.isTouched = false;
            }
          }
          if (
            document.activeElement &&
            document.activeElement.matches(data.focusableElements) &&
            document.activeElement !== targetEl &&
            (e.pointerType === 'mouse' ||
              (e.pointerType !== 'mouse' &&
                !targetEl.matches(data.focusableElements)))
          ) {
            document.activeElement.blur();
          }
          const shouldPreventDefault =
            preventDefault &&
            swiper.allowTouchMove &&
            params.touchStartPreventDefault;
          if (
            (params.touchStartForcePreventDefault || shouldPreventDefault) &&
            !targetEl.isContentEditable
          ) {
            e.preventDefault();
          }
          if (
            params.freeMode &&
            params.freeMode.enabled &&
            swiper.freeMode &&
            swiper.animating &&
            !params.cssMode
          ) {
            swiper.freeMode.onTouchStart();
          }
          swiper.emit('touchStart', e);
        }

        function onTouchMove(event) {
          const document = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();
          const swiper = this;
          const data = swiper.touchEventsData;
          const { params, touches, rtlTranslate: rtl, enabled } = swiper;
          if (!enabled) return;
          if (!params.simulateTouch && event.pointerType === 'mouse') return;
          let e = event;
          if (e.originalEvent) e = e.originalEvent;
          if (e.type === 'pointermove') {
            if (data.touchId !== null) return; // return from pointer if we use touch
            const id = e.pointerId;
            if (id !== data.pointerId) return;
          }
          let targetTouch;
          if (e.type === 'touchmove') {
            targetTouch = [...e.changedTouches].find(
              (t) => t.identifier === data.touchId,
            );
            if (!targetTouch || targetTouch.identifier !== data.touchId) return;
          } else {
            targetTouch = e;
          }
          if (!data.isTouched) {
            if (data.startMoving && data.isScrolling) {
              swiper.emit('touchMoveOpposite', e);
            }
            return;
          }
          const pageX = targetTouch.pageX;
          const pageY = targetTouch.pageY;
          if (e.preventedByNestedSwiper) {
            touches.startX = pageX;
            touches.startY = pageY;
            return;
          }
          if (!swiper.allowTouchMove) {
            if (!e.target.matches(data.focusableElements)) {
              swiper.allowClick = false;
            }
            if (data.isTouched) {
              Object.assign(touches, {
                startX: pageX,
                startY: pageY,
                currentX: pageX,
                currentY: pageY,
              });
              data.touchStartTime = (0,
              _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)();
            }
            return;
          }
          if (params.touchReleaseOnEdges && !params.loop) {
            if (swiper.isVertical()) {
              // Vertical
              if (
                (pageY < touches.startY &&
                  swiper.translate <= swiper.maxTranslate()) ||
                (pageY > touches.startY &&
                  swiper.translate >= swiper.minTranslate())
              ) {
                data.isTouched = false;
                data.isMoved = false;
                return;
              }
            } else if (
              rtl &&
              ((pageX > touches.startX &&
                -swiper.translate <= swiper.maxTranslate()) ||
                (pageX < touches.startX &&
                  -swiper.translate >= swiper.minTranslate()))
            ) {
              return;
            } else if (
              !rtl &&
              ((pageX < touches.startX &&
                swiper.translate <= swiper.maxTranslate()) ||
                (pageX > touches.startX &&
                  swiper.translate >= swiper.minTranslate()))
            ) {
              return;
            }
          }
          if (
            document.activeElement &&
            document.activeElement.matches(data.focusableElements) &&
            document.activeElement !== e.target &&
            e.pointerType !== 'mouse'
          ) {
            document.activeElement.blur();
          }
          if (document.activeElement) {
            if (
              e.target === document.activeElement &&
              e.target.matches(data.focusableElements)
            ) {
              data.isMoved = true;
              swiper.allowClick = false;
              return;
            }
          }
          if (data.allowTouchCallbacks) {
            swiper.emit('touchMove', e);
          }
          touches.previousX = touches.currentX;
          touches.previousY = touches.currentY;
          touches.currentX = pageX;
          touches.currentY = pageY;
          const diffX = touches.currentX - touches.startX;
          const diffY = touches.currentY - touches.startY;
          if (
            swiper.params.threshold &&
            Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold
          )
            return;
          if (typeof data.isScrolling === 'undefined') {
            let touchAngle;
            if (
              (swiper.isHorizontal() && touches.currentY === touches.startY) ||
              (swiper.isVertical() && touches.currentX === touches.startX)
            ) {
              data.isScrolling = false;
            } else {
              // eslint-disable-next-line
              if (diffX * diffX + diffY * diffY >= 25) {
                touchAngle =
                  (Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180) /
                  Math.PI;
                data.isScrolling = swiper.isHorizontal()
                  ? touchAngle > params.touchAngle
                  : 90 - touchAngle > params.touchAngle;
              }
            }
          }
          if (data.isScrolling) {
            swiper.emit('touchMoveOpposite', e);
          }
          if (typeof data.startMoving === 'undefined') {
            if (
              touches.currentX !== touches.startX ||
              touches.currentY !== touches.startY
            ) {
              data.startMoving = true;
            }
          }
          if (
            data.isScrolling ||
            (e.type === 'touchmove' && data.preventTouchMoveFromPointerMove)
          ) {
            data.isTouched = false;
            return;
          }
          if (!data.startMoving) {
            return;
          }
          swiper.allowClick = false;
          if (!params.cssMode && e.cancelable) {
            e.preventDefault();
          }
          if (params.touchMoveStopPropagation && !params.nested) {
            e.stopPropagation();
          }
          let diff = swiper.isHorizontal() ? diffX : diffY;
          let touchesDiff = swiper.isHorizontal()
            ? touches.currentX - touches.previousX
            : touches.currentY - touches.previousY;
          if (params.oneWayMovement) {
            diff = Math.abs(diff) * (rtl ? 1 : -1);
            touchesDiff = Math.abs(touchesDiff) * (rtl ? 1 : -1);
          }
          touches.diff = diff;
          diff *= params.touchRatio;
          if (rtl) {
            diff = -diff;
            touchesDiff = -touchesDiff;
          }
          const prevTouchesDirection = swiper.touchesDirection;
          swiper.swipeDirection = diff > 0 ? 'prev' : 'next';
          swiper.touchesDirection = touchesDiff > 0 ? 'prev' : 'next';
          const isLoop = swiper.params.loop && !params.cssMode;
          const allowLoopFix =
            (swiper.touchesDirection === 'next' && swiper.allowSlideNext) ||
            (swiper.touchesDirection === 'prev' && swiper.allowSlidePrev);
          if (!data.isMoved) {
            if (isLoop && allowLoopFix) {
              swiper.loopFix({
                direction: swiper.swipeDirection,
              });
            }
            data.startTranslate = swiper.getTranslate();
            swiper.setTransition(0);
            if (swiper.animating) {
              const evt = new window.CustomEvent('transitionend', {
                bubbles: true,
                cancelable: true,
                detail: {
                  bySwiperTouchMove: true,
                },
              });
              swiper.wrapperEl.dispatchEvent(evt);
            }
            data.allowMomentumBounce = false;
            // Grab Cursor
            if (
              params.grabCursor &&
              (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)
            ) {
              swiper.setGrabCursor(true);
            }
            swiper.emit('sliderFirstMove', e);
          }
          let loopFixed;
          new Date().getTime();
          if (
            params._loopSwapReset !== false &&
            data.isMoved &&
            data.allowThresholdMove &&
            prevTouchesDirection !== swiper.touchesDirection &&
            isLoop &&
            allowLoopFix &&
            Math.abs(diff) >= 1
          ) {
            Object.assign(touches, {
              startX: pageX,
              startY: pageY,
              currentX: pageX,
              currentY: pageY,
              startTranslate: data.currentTranslate,
            });
            data.loopSwapReset = true;
            data.startTranslate = data.currentTranslate;
            return;
          }
          swiper.emit('sliderMove', e);
          data.isMoved = true;
          data.currentTranslate = diff + data.startTranslate;
          let disableParentSwiper = true;
          let resistanceRatio = params.resistanceRatio;
          if (params.touchReleaseOnEdges) {
            resistanceRatio = 0;
          }
          if (diff > 0) {
            if (
              isLoop &&
              allowLoopFix &&
              !loopFixed &&
              data.allowThresholdMove &&
              data.currentTranslate >
                (params.centeredSlides
                  ? swiper.minTranslate() -
                    swiper.slidesSizesGrid[swiper.activeIndex + 1] -
                    (params.slidesPerView !== 'auto' &&
                    swiper.slides.length - params.slidesPerView >= 2
                      ? swiper.slidesSizesGrid[swiper.activeIndex + 1] +
                        swiper.params.spaceBetween
                      : 0) -
                    swiper.params.spaceBetween
                  : swiper.minTranslate())
            ) {
              swiper.loopFix({
                direction: 'prev',
                setTranslate: true,
                activeSlideIndex: 0,
              });
            }
            if (data.currentTranslate > swiper.minTranslate()) {
              disableParentSwiper = false;
              if (params.resistance) {
                data.currentTranslate =
                  swiper.minTranslate() -
                  1 +
                  (-swiper.minTranslate() + data.startTranslate + diff) **
                    resistanceRatio;
              }
            }
          } else if (diff < 0) {
            if (
              isLoop &&
              allowLoopFix &&
              !loopFixed &&
              data.allowThresholdMove &&
              data.currentTranslate <
                (params.centeredSlides
                  ? swiper.maxTranslate() +
                    swiper.slidesSizesGrid[swiper.slidesSizesGrid.length - 1] +
                    swiper.params.spaceBetween +
                    (params.slidesPerView !== 'auto' &&
                    swiper.slides.length - params.slidesPerView >= 2
                      ? swiper.slidesSizesGrid[
                          swiper.slidesSizesGrid.length - 1
                        ] + swiper.params.spaceBetween
                      : 0)
                  : swiper.maxTranslate())
            ) {
              swiper.loopFix({
                direction: 'next',
                setTranslate: true,
                activeSlideIndex:
                  swiper.slides.length -
                  (params.slidesPerView === 'auto'
                    ? swiper.slidesPerViewDynamic()
                    : Math.ceil(parseFloat(params.slidesPerView, 10))),
              });
            }
            if (data.currentTranslate < swiper.maxTranslate()) {
              disableParentSwiper = false;
              if (params.resistance) {
                data.currentTranslate =
                  swiper.maxTranslate() +
                  1 -
                  (swiper.maxTranslate() - data.startTranslate - diff) **
                    resistanceRatio;
              }
            }
          }
          if (disableParentSwiper) {
            e.preventedByNestedSwiper = true;
          }

          // Directions locks
          if (
            !swiper.allowSlideNext &&
            swiper.swipeDirection === 'next' &&
            data.currentTranslate < data.startTranslate
          ) {
            data.currentTranslate = data.startTranslate;
          }
          if (
            !swiper.allowSlidePrev &&
            swiper.swipeDirection === 'prev' &&
            data.currentTranslate > data.startTranslate
          ) {
            data.currentTranslate = data.startTranslate;
          }
          if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {
            data.currentTranslate = data.startTranslate;
          }

          // Threshold
          if (params.threshold > 0) {
            if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
              if (!data.allowThresholdMove) {
                data.allowThresholdMove = true;
                touches.startX = touches.currentX;
                touches.startY = touches.currentY;
                data.currentTranslate = data.startTranslate;
                touches.diff = swiper.isHorizontal()
                  ? touches.currentX - touches.startX
                  : touches.currentY - touches.startY;
                return;
              }
            } else {
              data.currentTranslate = data.startTranslate;
              return;
            }
          }
          if (!params.followFinger || params.cssMode) return;

          // Update active index in free mode
          if (
            (params.freeMode && params.freeMode.enabled && swiper.freeMode) ||
            params.watchSlidesProgress
          ) {
            swiper.updateActiveIndex();
            swiper.updateSlidesClasses();
          }
          if (params.freeMode && params.freeMode.enabled && swiper.freeMode) {
            swiper.freeMode.onTouchMove();
          }
          // Update progress
          swiper.updateProgress(data.currentTranslate);
          // Update translate
          swiper.setTranslate(data.currentTranslate);
        }

        function onTouchEnd(event) {
          const swiper = this;
          const data = swiper.touchEventsData;
          let e = event;
          if (e.originalEvent) e = e.originalEvent;
          let targetTouch;
          const isTouchEvent =
            e.type === 'touchend' || e.type === 'touchcancel';
          if (!isTouchEvent) {
            if (data.touchId !== null) return; // return from pointer if we use touch
            if (e.pointerId !== data.pointerId) return;
            targetTouch = e;
          } else {
            targetTouch = [...e.changedTouches].find(
              (t) => t.identifier === data.touchId,
            );
            if (!targetTouch || targetTouch.identifier !== data.touchId) return;
          }
          if (
            [
              'pointercancel',
              'pointerout',
              'pointerleave',
              'contextmenu',
            ].includes(e.type)
          ) {
            const proceed =
              ['pointercancel', 'contextmenu'].includes(e.type) &&
              (swiper.browser.isSafari || swiper.browser.isWebView);
            if (!proceed) {
              return;
            }
          }
          data.pointerId = null;
          data.touchId = null;
          const {
            params,
            touches,
            rtlTranslate: rtl,
            slidesGrid,
            enabled,
          } = swiper;
          if (!enabled) return;
          if (!params.simulateTouch && e.pointerType === 'mouse') return;
          if (data.allowTouchCallbacks) {
            swiper.emit('touchEnd', e);
          }
          data.allowTouchCallbacks = false;
          if (!data.isTouched) {
            if (data.isMoved && params.grabCursor) {
              swiper.setGrabCursor(false);
            }
            data.isMoved = false;
            data.startMoving = false;
            return;
          }

          // Return Grab Cursor
          if (
            params.grabCursor &&
            data.isMoved &&
            data.isTouched &&
            (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)
          ) {
            swiper.setGrabCursor(false);
          }

          // Time diff
          const touchEndTime = (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)();
          const timeDiff = touchEndTime - data.touchStartTime;

          // Tap, doubleTap, Click
          if (swiper.allowClick) {
            const pathTree = e.path || (e.composedPath && e.composedPath());
            swiper.updateClickedSlide(
              (pathTree && pathTree[0]) || e.target,
              pathTree,
            );
            swiper.emit('tap click', e);
            if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {
              swiper.emit('doubleTap doubleClick', e);
            }
          }
          data.lastClickTime = (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)();
          (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(() => {
            if (!swiper.destroyed) swiper.allowClick = true;
          });
          if (
            !data.isTouched ||
            !data.isMoved ||
            !swiper.swipeDirection ||
            (touches.diff === 0 && !data.loopSwapReset) ||
            (data.currentTranslate === data.startTranslate &&
              !data.loopSwapReset)
          ) {
            data.isTouched = false;
            data.isMoved = false;
            data.startMoving = false;
            return;
          }
          data.isTouched = false;
          data.isMoved = false;
          data.startMoving = false;
          let currentPos;
          if (params.followFinger) {
            currentPos = rtl ? swiper.translate : -swiper.translate;
          } else {
            currentPos = -data.currentTranslate;
          }
          if (params.cssMode) {
            return;
          }
          if (params.freeMode && params.freeMode.enabled) {
            swiper.freeMode.onTouchEnd({
              currentPos,
            });
            return;
          }

          // Find current slide
          const swipeToLast =
            currentPos >= -swiper.maxTranslate() && !swiper.params.loop;
          let stopIndex = 0;
          let groupSize = swiper.slidesSizesGrid[0];
          for (
            let i = 0;
            i < slidesGrid.length;
            i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup
          ) {
            const increment =
              i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;
            if (typeof slidesGrid[i + increment] !== 'undefined') {
              if (
                swipeToLast ||
                (currentPos >= slidesGrid[i] &&
                  currentPos < slidesGrid[i + increment])
              ) {
                stopIndex = i;
                groupSize = slidesGrid[i + increment] - slidesGrid[i];
              }
            } else if (swipeToLast || currentPos >= slidesGrid[i]) {
              stopIndex = i;
              groupSize =
                slidesGrid[slidesGrid.length - 1] -
                slidesGrid[slidesGrid.length - 2];
            }
          }
          let rewindFirstIndex = null;
          let rewindLastIndex = null;
          if (params.rewind) {
            if (swiper.isBeginning) {
              rewindLastIndex =
                params.virtual && params.virtual.enabled && swiper.virtual
                  ? swiper.virtual.slides.length - 1
                  : swiper.slides.length - 1;
            } else if (swiper.isEnd) {
              rewindFirstIndex = 0;
            }
          }
          // Find current slide size
          const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;
          const increment =
            stopIndex < params.slidesPerGroupSkip - 1
              ? 1
              : params.slidesPerGroup;
          if (timeDiff > params.longSwipesMs) {
            // Long touches
            if (!params.longSwipes) {
              swiper.slideTo(swiper.activeIndex);
              return;
            }
            if (swiper.swipeDirection === 'next') {
              if (ratio >= params.longSwipesRatio)
                swiper.slideTo(
                  params.rewind && swiper.isEnd
                    ? rewindFirstIndex
                    : stopIndex + increment,
                );
              else swiper.slideTo(stopIndex);
            }
            if (swiper.swipeDirection === 'prev') {
              if (ratio > 1 - params.longSwipesRatio) {
                swiper.slideTo(stopIndex + increment);
              } else if (
                rewindLastIndex !== null &&
                ratio < 0 &&
                Math.abs(ratio) > params.longSwipesRatio
              ) {
                swiper.slideTo(rewindLastIndex);
              } else {
                swiper.slideTo(stopIndex);
              }
            }
          } else {
            // Short swipes
            if (!params.shortSwipes) {
              swiper.slideTo(swiper.activeIndex);
              return;
            }
            const isNavButtonTarget =
              swiper.navigation &&
              (e.target === swiper.navigation.nextEl ||
                e.target === swiper.navigation.prevEl);
            if (!isNavButtonTarget) {
              if (swiper.swipeDirection === 'next') {
                swiper.slideTo(
                  rewindFirstIndex !== null
                    ? rewindFirstIndex
                    : stopIndex + increment,
                );
              }
              if (swiper.swipeDirection === 'prev') {
                swiper.slideTo(
                  rewindLastIndex !== null ? rewindLastIndex : stopIndex,
                );
              }
            } else if (e.target === swiper.navigation.nextEl) {
              swiper.slideTo(stopIndex + increment);
            } else {
              swiper.slideTo(stopIndex);
            }
          }
        }

        function onResize() {
          const swiper = this;
          const { params, el } = swiper;
          if (el && el.offsetWidth === 0) return;

          // Breakpoints
          if (params.breakpoints) {
            swiper.setBreakpoint();
          }

          // Save locks
          const { allowSlideNext, allowSlidePrev, snapGrid } = swiper;
          const isVirtual = swiper.virtual && swiper.params.virtual.enabled;

          // Disable locks on resize
          swiper.allowSlideNext = true;
          swiper.allowSlidePrev = true;
          swiper.updateSize();
          swiper.updateSlides();
          swiper.updateSlidesClasses();
          const isVirtualLoop = isVirtual && params.loop;
          if (
            (params.slidesPerView === 'auto' || params.slidesPerView > 1) &&
            swiper.isEnd &&
            !swiper.isBeginning &&
            !swiper.params.centeredSlides &&
            !isVirtualLoop
          ) {
            swiper.slideTo(swiper.slides.length - 1, 0, false, true);
          } else {
            if (swiper.params.loop && !isVirtual) {
              swiper.slideToLoop(swiper.realIndex, 0, false, true);
            } else {
              swiper.slideTo(swiper.activeIndex, 0, false, true);
            }
          }
          if (
            swiper.autoplay &&
            swiper.autoplay.running &&
            swiper.autoplay.paused
          ) {
            clearTimeout(swiper.autoplay.resizeTimeout);
            swiper.autoplay.resizeTimeout = setTimeout(() => {
              if (
                swiper.autoplay &&
                swiper.autoplay.running &&
                swiper.autoplay.paused
              ) {
                swiper.autoplay.resume();
              }
            }, 500);
          }
          // Return locks after resize
          swiper.allowSlidePrev = allowSlidePrev;
          swiper.allowSlideNext = allowSlideNext;
          if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {
            swiper.checkOverflow();
          }
        }

        function onClick(e) {
          const swiper = this;
          if (!swiper.enabled) return;
          if (!swiper.allowClick) {
            if (swiper.params.preventClicks) e.preventDefault();
            if (swiper.params.preventClicksPropagation && swiper.animating) {
              e.stopPropagation();
              e.stopImmediatePropagation();
            }
          }
        }

        function onScroll() {
          const swiper = this;
          const { wrapperEl, rtlTranslate, enabled } = swiper;
          if (!enabled) return;
          swiper.previousTranslate = swiper.translate;
          if (swiper.isHorizontal()) {
            swiper.translate = -wrapperEl.scrollLeft;
          } else {
            swiper.translate = -wrapperEl.scrollTop;
          }
          // eslint-disable-next-line
          if (swiper.translate === 0) swiper.translate = 0;
          swiper.updateActiveIndex();
          swiper.updateSlidesClasses();
          let newProgress;
          const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
          if (translatesDiff === 0) {
            newProgress = 0;
          } else {
            newProgress =
              (swiper.translate - swiper.minTranslate()) / translatesDiff;
          }
          if (newProgress !== swiper.progress) {
            swiper.updateProgress(
              rtlTranslate ? -swiper.translate : swiper.translate,
            );
          }
          swiper.emit('setTranslate', swiper.translate, false);
        }

        function onLoad(e) {
          const swiper = this;
          processLazyPreloader(swiper, e.target);
          if (
            swiper.params.cssMode ||
            (swiper.params.slidesPerView !== 'auto' &&
              !swiper.params.autoHeight)
          ) {
            return;
          }
          swiper.update();
        }

        function onDocumentTouchStart() {
          const swiper = this;
          if (swiper.documentTouchHandlerProceeded) return;
          swiper.documentTouchHandlerProceeded = true;
          if (swiper.params.touchReleaseOnEdges) {
            swiper.el.style.touchAction = 'auto';
          }
        }

        const events = (swiper, method) => {
          const document = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();
          const { params, el, wrapperEl, device } = swiper;
          const capture = !!params.nested;
          const domMethod =
            method === 'on' ? 'addEventListener' : 'removeEventListener';
          const swiperMethod = method;
          if (!el || typeof el === 'string') return;

          // Touch Events
          document[domMethod]('touchstart', swiper.onDocumentTouchStart, {
            passive: false,
            capture,
          });
          el[domMethod]('touchstart', swiper.onTouchStart, {
            passive: false,
          });
          el[domMethod]('pointerdown', swiper.onTouchStart, {
            passive: false,
          });
          document[domMethod]('touchmove', swiper.onTouchMove, {
            passive: false,
            capture,
          });
          document[domMethod]('pointermove', swiper.onTouchMove, {
            passive: false,
            capture,
          });
          document[domMethod]('touchend', swiper.onTouchEnd, {
            passive: true,
          });
          document[domMethod]('pointerup', swiper.onTouchEnd, {
            passive: true,
          });
          document[domMethod]('pointercancel', swiper.onTouchEnd, {
            passive: true,
          });
          document[domMethod]('touchcancel', swiper.onTouchEnd, {
            passive: true,
          });
          document[domMethod]('pointerout', swiper.onTouchEnd, {
            passive: true,
          });
          document[domMethod]('pointerleave', swiper.onTouchEnd, {
            passive: true,
          });
          document[domMethod]('contextmenu', swiper.onTouchEnd, {
            passive: true,
          });

          // Prevent Links Clicks
          if (params.preventClicks || params.preventClicksPropagation) {
            el[domMethod]('click', swiper.onClick, true);
          }
          if (params.cssMode) {
            wrapperEl[domMethod]('scroll', swiper.onScroll);
          }

          // Resize handler
          if (params.updateOnWindowResize) {
            swiper[swiperMethod](
              device.ios || device.android
                ? 'resize orientationchange observerUpdate'
                : 'resize observerUpdate',
              onResize,
              true,
            );
          } else {
            swiper[swiperMethod]('observerUpdate', onResize, true);
          }

          // Images loader
          el[domMethod]('load', swiper.onLoad, {
            capture: true,
          });
        };
        function attachEvents() {
          const swiper = this;
          const { params } = swiper;
          swiper.onTouchStart = onTouchStart.bind(swiper);
          swiper.onTouchMove = onTouchMove.bind(swiper);
          swiper.onTouchEnd = onTouchEnd.bind(swiper);
          swiper.onDocumentTouchStart = onDocumentTouchStart.bind(swiper);
          if (params.cssMode) {
            swiper.onScroll = onScroll.bind(swiper);
          }
          swiper.onClick = onClick.bind(swiper);
          swiper.onLoad = onLoad.bind(swiper);
          events(swiper, 'on');
        }
        function detachEvents() {
          const swiper = this;
          events(swiper, 'off');
        }
        var events$1 = {
          attachEvents,
          detachEvents,
        };

        const isGridEnabled = (swiper, params) => {
          return swiper.grid && params.grid && params.grid.rows > 1;
        };
        function setBreakpoint() {
          const swiper = this;
          const { realIndex, initialized, params, el } = swiper;
          const breakpoints = params.breakpoints;
          if (
            !breakpoints ||
            (breakpoints && Object.keys(breakpoints).length === 0)
          )
            return;
          const document = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();

          // Get breakpoint for window/container width and update parameters
          const breakpointsBase =
            params.breakpointsBase === 'window' || !params.breakpointsBase
              ? params.breakpointsBase
              : 'container';
          const breakpointContainer =
            ['window', 'container'].includes(params.breakpointsBase) ||
            !params.breakpointsBase
              ? swiper.el
              : document.querySelector(params.breakpointsBase);
          const breakpoint = swiper.getBreakpoint(
            breakpoints,
            breakpointsBase,
            breakpointContainer,
          );
          if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;
          const breakpointOnlyParams =
            breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;
          const breakpointParams =
            breakpointOnlyParams || swiper.originalParams;
          const wasMultiRow = isGridEnabled(swiper, params);
          const isMultiRow = isGridEnabled(swiper, breakpointParams);
          const wasGrabCursor = swiper.params.grabCursor;
          const isGrabCursor = breakpointParams.grabCursor;
          const wasEnabled = params.enabled;
          if (wasMultiRow && !isMultiRow) {
            el.classList.remove(
              `${params.containerModifierClass}grid`,
              `${params.containerModifierClass}grid-column`,
            );
            swiper.emitContainerClasses();
          } else if (!wasMultiRow && isMultiRow) {
            el.classList.add(`${params.containerModifierClass}grid`);
            if (
              (breakpointParams.grid.fill &&
                breakpointParams.grid.fill === 'column') ||
              (!breakpointParams.grid.fill && params.grid.fill === 'column')
            ) {
              el.classList.add(`${params.containerModifierClass}grid-column`);
            }
            swiper.emitContainerClasses();
          }
          if (wasGrabCursor && !isGrabCursor) {
            swiper.unsetGrabCursor();
          } else if (!wasGrabCursor && isGrabCursor) {
            swiper.setGrabCursor();
          }

          // Toggle navigation, pagination, scrollbar
          ['navigation', 'pagination', 'scrollbar'].forEach((prop) => {
            if (typeof breakpointParams[prop] === 'undefined') return;
            const wasModuleEnabled = params[prop] && params[prop].enabled;
            const isModuleEnabled =
              breakpointParams[prop] && breakpointParams[prop].enabled;
            if (wasModuleEnabled && !isModuleEnabled) {
              swiper[prop].disable();
            }
            if (!wasModuleEnabled && isModuleEnabled) {
              swiper[prop].enable();
            }
          });
          const directionChanged =
            breakpointParams.direction &&
            breakpointParams.direction !== params.direction;
          const needsReLoop =
            params.loop &&
            (breakpointParams.slidesPerView !== params.slidesPerView ||
              directionChanged);
          const wasLoop = params.loop;
          if (directionChanged && initialized) {
            swiper.changeDirection();
          }
          (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(
            swiper.params,
            breakpointParams,
          );
          const isEnabled = swiper.params.enabled;
          const hasLoop = swiper.params.loop;
          Object.assign(swiper, {
            allowTouchMove: swiper.params.allowTouchMove,
            allowSlideNext: swiper.params.allowSlideNext,
            allowSlidePrev: swiper.params.allowSlidePrev,
          });
          if (wasEnabled && !isEnabled) {
            swiper.disable();
          } else if (!wasEnabled && isEnabled) {
            swiper.enable();
          }
          swiper.currentBreakpoint = breakpoint;
          swiper.emit('_beforeBreakpoint', breakpointParams);
          if (initialized) {
            if (needsReLoop) {
              swiper.loopDestroy();
              swiper.loopCreate(realIndex);
              swiper.updateSlides();
            } else if (!wasLoop && hasLoop) {
              swiper.loopCreate(realIndex);
              swiper.updateSlides();
            } else if (wasLoop && !hasLoop) {
              swiper.loopDestroy();
            }
          }
          swiper.emit('breakpoint', breakpointParams);
        }

        function getBreakpoint(breakpoints, base, containerEl) {
          if (base === void 0) {
            base = 'window';
          }
          if (!breakpoints || (base === 'container' && !containerEl))
            return undefined;
          let breakpoint = false;
          const window = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          const currentHeight =
            base === 'window' ? window.innerHeight : containerEl.clientHeight;
          const points = Object.keys(breakpoints).map((point) => {
            if (typeof point === 'string' && point.indexOf('@') === 0) {
              const minRatio = parseFloat(point.substr(1));
              const value = currentHeight * minRatio;
              return {
                value,
                point,
              };
            }
            return {
              value: point,
              point,
            };
          });
          points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));
          for (let i = 0; i < points.length; i += 1) {
            const { point, value } = points[i];
            if (base === 'window') {
              if (window.matchMedia(`(min-width: ${value}px)`).matches) {
                breakpoint = point;
              }
            } else if (value <= containerEl.clientWidth) {
              breakpoint = point;
            }
          }
          return breakpoint || 'max';
        }

        var breakpoints = {
          setBreakpoint,
          getBreakpoint,
        };

        function prepareClasses(entries, prefix) {
          const resultClasses = [];
          entries.forEach((item) => {
            if (typeof item === 'object') {
              Object.keys(item).forEach((classNames) => {
                if (item[classNames]) {
                  resultClasses.push(prefix + classNames);
                }
              });
            } else if (typeof item === 'string') {
              resultClasses.push(prefix + item);
            }
          });
          return resultClasses;
        }
        function addClasses() {
          const swiper = this;
          const { classNames, params, rtl, el, device } = swiper;
          // prettier-ignore
          const suffixes = prepareClasses(['initialized', params.direction, {
    'free-mode': swiper.params.freeMode && params.freeMode.enabled
  }, {
    'autoheight': params.autoHeight
  }, {
    'rtl': rtl
  }, {
    'grid': params.grid && params.grid.rows > 1
  }, {
    'grid-column': params.grid && params.grid.rows > 1 && params.grid.fill === 'column'
  }, {
    'android': device.android
  }, {
    'ios': device.ios
  }, {
    'css-mode': params.cssMode
  }, {
    'centered': params.cssMode && params.centeredSlides
  }, {
    'watch-progress': params.watchSlidesProgress
  }], params.containerModifierClass);
          classNames.push(...suffixes);
          el.classList.add(...classNames);
          swiper.emitContainerClasses();
        }

        function removeClasses() {
          const swiper = this;
          const { el, classNames } = swiper;
          if (!el || typeof el === 'string') return;
          el.classList.remove(...classNames);
          swiper.emitContainerClasses();
        }

        var classes = {
          addClasses,
          removeClasses,
        };

        function checkOverflow() {
          const swiper = this;
          const { isLocked: wasLocked, params } = swiper;
          const { slidesOffsetBefore } = params;
          if (slidesOffsetBefore) {
            const lastSlideIndex = swiper.slides.length - 1;
            const lastSlideRightEdge =
              swiper.slidesGrid[lastSlideIndex] +
              swiper.slidesSizesGrid[lastSlideIndex] +
              slidesOffsetBefore * 2;
            swiper.isLocked = swiper.size > lastSlideRightEdge;
          } else {
            swiper.isLocked = swiper.snapGrid.length === 1;
          }
          if (params.allowSlideNext === true) {
            swiper.allowSlideNext = !swiper.isLocked;
          }
          if (params.allowSlidePrev === true) {
            swiper.allowSlidePrev = !swiper.isLocked;
          }
          if (wasLocked && wasLocked !== swiper.isLocked) {
            swiper.isEnd = false;
          }
          if (wasLocked !== swiper.isLocked) {
            swiper.emit(swiper.isLocked ? 'lock' : 'unlock');
          }
        }
        var checkOverflow$1 = {
          checkOverflow,
        };

        var defaults = {
          init: true,
          direction: 'horizontal',
          oneWayMovement: false,
          swiperElementNodeName: 'SWIPER-CONTAINER',
          touchEventsTarget: 'wrapper',
          initialSlide: 0,
          speed: 300,
          cssMode: false,
          updateOnWindowResize: true,
          resizeObserver: true,
          nested: false,
          createElements: false,
          eventsPrefix: 'swiper',
          enabled: true,
          focusableElements:
            'input, select, option, textarea, button, video, label',
          // Overrides
          width: null,
          height: null,
          //
          preventInteractionOnTransition: false,
          // ssr
          userAgent: null,
          url: null,
          // To support iOS's swipe-to-go-back gesture (when being used in-app).
          edgeSwipeDetection: false,
          edgeSwipeThreshold: 20,
          // Autoheight
          autoHeight: false,
          // Set wrapper width
          setWrapperSize: false,
          // Virtual Translate
          virtualTranslate: false,
          // Effects
          effect: 'slide',
          // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'

          // Breakpoints
          breakpoints: undefined,
          breakpointsBase: 'window',
          // Slides grid
          spaceBetween: 0,
          slidesPerView: 1,
          slidesPerGroup: 1,
          slidesPerGroupSkip: 0,
          slidesPerGroupAuto: false,
          centeredSlides: false,
          centeredSlidesBounds: false,
          slidesOffsetBefore: 0,
          // in px
          slidesOffsetAfter: 0,
          // in px
          normalizeSlideIndex: true,
          centerInsufficientSlides: false,
          // Disable swiper and hide navigation when container not overflow
          watchOverflow: true,
          // Round length
          roundLengths: false,
          // Touches
          touchRatio: 1,
          touchAngle: 45,
          simulateTouch: true,
          shortSwipes: true,
          longSwipes: true,
          longSwipesRatio: 0.5,
          longSwipesMs: 300,
          followFinger: true,
          allowTouchMove: true,
          threshold: 5,
          touchMoveStopPropagation: false,
          touchStartPreventDefault: true,
          touchStartForcePreventDefault: false,
          touchReleaseOnEdges: false,
          // Unique Navigation Elements
          uniqueNavElements: true,
          // Resistance
          resistance: true,
          resistanceRatio: 0.85,
          // Progress
          watchSlidesProgress: false,
          // Cursor
          grabCursor: false,
          // Clicks
          preventClicks: true,
          preventClicksPropagation: true,
          slideToClickedSlide: false,
          // loop
          loop: false,
          loopAddBlankSlides: true,
          loopAdditionalSlides: 0,
          loopPreventsSliding: true,
          // rewind
          rewind: false,
          // Swiping/no swiping
          allowSlidePrev: true,
          allowSlideNext: true,
          swipeHandler: null,
          // '.swipe-handler',
          noSwiping: true,
          noSwipingClass: 'swiper-no-swiping',
          noSwipingSelector: null,
          // Passive Listeners
          passiveListeners: true,
          maxBackfaceHiddenSlides: 10,
          // NS
          containerModifierClass: 'swiper-',
          // NEW
          slideClass: 'swiper-slide',
          slideBlankClass: 'swiper-slide-blank',
          slideActiveClass: 'swiper-slide-active',
          slideVisibleClass: 'swiper-slide-visible',
          slideFullyVisibleClass: 'swiper-slide-fully-visible',
          slideNextClass: 'swiper-slide-next',
          slidePrevClass: 'swiper-slide-prev',
          wrapperClass: 'swiper-wrapper',
          lazyPreloaderClass: 'swiper-lazy-preloader',
          lazyPreloadPrevNext: 0,
          // Callbacks
          runCallbacksOnInit: true,
          // Internals
          _emitClasses: false,
        };

        function moduleExtendParams(params, allModulesParams) {
          return function extendParams(obj) {
            if (obj === void 0) {
              obj = {};
            }
            const moduleParamName = Object.keys(obj)[0];
            const moduleParams = obj[moduleParamName];
            if (typeof moduleParams !== 'object' || moduleParams === null) {
              (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(
                allModulesParams,
                obj,
              );
              return;
            }
            if (params[moduleParamName] === true) {
              params[moduleParamName] = {
                enabled: true,
              };
            }
            if (
              moduleParamName === 'navigation' &&
              params[moduleParamName] &&
              params[moduleParamName].enabled &&
              !params[moduleParamName].prevEl &&
              !params[moduleParamName].nextEl
            ) {
              params[moduleParamName].auto = true;
            }
            if (
              ['pagination', 'scrollbar'].indexOf(moduleParamName) >= 0 &&
              params[moduleParamName] &&
              params[moduleParamName].enabled &&
              !params[moduleParamName].el
            ) {
              params[moduleParamName].auto = true;
            }
            if (!(moduleParamName in params && 'enabled' in moduleParams)) {
              (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(
                allModulesParams,
                obj,
              );
              return;
            }
            if (
              typeof params[moduleParamName] === 'object' &&
              !('enabled' in params[moduleParamName])
            ) {
              params[moduleParamName].enabled = true;
            }
            if (!params[moduleParamName])
              params[moduleParamName] = {
                enabled: false,
              };
            (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(
              allModulesParams,
              obj,
            );
          };
        }

        /* eslint no-param-reassign: "off" */
        const prototypes = {
          eventsEmitter,
          update,
          translate,
          transition,
          slide,
          loop,
          grabCursor,
          events: events$1,
          breakpoints,
          checkOverflow: checkOverflow$1,
          classes,
        };
        const extendedDefaults = {};
        class Swiper {
          constructor() {
            let el;
            let params;
            for (
              var _len = arguments.length, args = new Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key];
            }
            if (
              args.length === 1 &&
              args[0].constructor &&
              Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object'
            ) {
              params = args[0];
            } else {
              [el, params] = args;
            }
            if (!params) params = {};
            params = (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)({}, params);
            if (el && !params.el) params.el = el;
            const document = (0,
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (
              params.el &&
              typeof params.el === 'string' &&
              document.querySelectorAll(params.el).length > 1
            ) {
              const swipers = [];
              document.querySelectorAll(params.el).forEach((containerEl) => {
                const newParams = (0,
                _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)({}, params, {
                  el: containerEl,
                });
                swipers.push(new Swiper(newParams));
              });
              // eslint-disable-next-line no-constructor-return
              return swipers;
            }

            // Swiper Instance
            const swiper = this;
            swiper.__swiper__ = true;
            swiper.support = getSupport();
            swiper.device = getDevice({
              userAgent: params.userAgent,
            });
            swiper.browser = getBrowser();
            swiper.eventsListeners = {};
            swiper.eventsAnyListeners = [];
            swiper.modules = [...swiper.__modules__];
            if (params.modules && Array.isArray(params.modules)) {
              swiper.modules.push(...params.modules);
            }
            const allModulesParams = {};
            swiper.modules.forEach((mod) => {
              mod({
                params,
                swiper,
                extendParams: moduleExtendParams(params, allModulesParams),
                on: swiper.on.bind(swiper),
                once: swiper.once.bind(swiper),
                off: swiper.off.bind(swiper),
                emit: swiper.emit.bind(swiper),
              });
            });

            // Extend defaults with modules params
            const swiperParams = (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(
              {},
              defaults,
              allModulesParams,
            );

            // Extend defaults with passed params
            swiper.params = (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(
              {},
              swiperParams,
              extendedDefaults,
              params,
            );
            swiper.originalParams = (0,
            _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)({}, swiper.params);
            swiper.passedParams = (0,
            _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)({}, params);

            // add event listeners
            if (swiper.params && swiper.params.on) {
              Object.keys(swiper.params.on).forEach((eventName) => {
                swiper.on(eventName, swiper.params.on[eventName]);
              });
            }
            if (swiper.params && swiper.params.onAny) {
              swiper.onAny(swiper.params.onAny);
            }

            // Extend Swiper
            Object.assign(swiper, {
              enabled: swiper.params.enabled,
              el,
              // Classes
              classNames: [],
              // Slides
              slides: [],
              slidesGrid: [],
              snapGrid: [],
              slidesSizesGrid: [],
              // isDirection
              isHorizontal() {
                return swiper.params.direction === 'horizontal';
              },
              isVertical() {
                return swiper.params.direction === 'vertical';
              },
              // Indexes
              activeIndex: 0,
              realIndex: 0,
              //
              isBeginning: true,
              isEnd: false,
              // Props
              translate: 0,
              previousTranslate: 0,
              progress: 0,
              velocity: 0,
              animating: false,
              cssOverflowAdjustment() {
                // Returns 0 unless `translate` is > 2**23
                // Should be subtracted from css values to prevent overflow
                return Math.trunc(this.translate / 2 ** 23) * 2 ** 23;
              },
              // Locks
              allowSlideNext: swiper.params.allowSlideNext,
              allowSlidePrev: swiper.params.allowSlidePrev,
              // Touch Events
              touchEventsData: {
                isTouched: undefined,
                isMoved: undefined,
                allowTouchCallbacks: undefined,
                touchStartTime: undefined,
                isScrolling: undefined,
                currentTranslate: undefined,
                startTranslate: undefined,
                allowThresholdMove: undefined,
                // Form elements to match
                focusableElements: swiper.params.focusableElements,
                // Last click time
                lastClickTime: 0,
                clickTimeout: undefined,
                // Velocities
                velocities: [],
                allowMomentumBounce: undefined,
                startMoving: undefined,
                pointerId: null,
                touchId: null,
              },
              // Clicks
              allowClick: true,
              // Touches
              allowTouchMove: swiper.params.allowTouchMove,
              touches: {
                startX: 0,
                startY: 0,
                currentX: 0,
                currentY: 0,
                diff: 0,
              },
              // Images
              imagesToLoad: [],
              imagesLoaded: 0,
            });
            swiper.emit('_swiper');

            // Init
            if (swiper.params.init) {
              swiper.init();
            }

            // Return app instance
            // eslint-disable-next-line no-constructor-return
            return swiper;
          }
          getDirectionLabel(property) {
            if (this.isHorizontal()) {
              return property;
            }
            // prettier-ignore
            return {
      'width': 'height',
      'margin-top': 'margin-left',
      'margin-bottom ': 'margin-right',
      'margin-left': 'margin-top',
      'margin-right': 'margin-bottom',
      'padding-left': 'padding-top',
      'padding-right': 'padding-bottom',
      'marginRight': 'marginBottom'
    }[property];
          }
          getSlideIndex(slideEl) {
            const { slidesEl, params } = this;
            const slides = (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(
              slidesEl,
              `.${params.slideClass}, swiper-slide`,
            );
            const firstSlideIndex = (0,
            _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(slides[0]);
            return (
              (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(slideEl) -
              firstSlideIndex
            );
          }
          getSlideIndexByData(index) {
            return this.getSlideIndex(
              this.slides.find(
                (slideEl) =>
                  slideEl.getAttribute('data-swiper-slide-index') * 1 === index,
              ),
            );
          }
          getSlideIndexWhenGrid(index) {
            if (this.grid && this.params.grid && this.params.grid.rows > 1) {
              if (this.params.grid.fill === 'column') {
                index = Math.floor(index / this.params.grid.rows);
              } else if (this.params.grid.fill === 'row') {
                index =
                  index % Math.ceil(this.slides.length / this.params.grid.rows);
              }
            }
            return index;
          }
          recalcSlides() {
            const swiper = this;
            const { slidesEl, params } = swiper;
            swiper.slides = (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(
              slidesEl,
              `.${params.slideClass}, swiper-slide`,
            );
          }
          enable() {
            const swiper = this;
            if (swiper.enabled) return;
            swiper.enabled = true;
            if (swiper.params.grabCursor) {
              swiper.setGrabCursor();
            }
            swiper.emit('enable');
          }
          disable() {
            const swiper = this;
            if (!swiper.enabled) return;
            swiper.enabled = false;
            if (swiper.params.grabCursor) {
              swiper.unsetGrabCursor();
            }
            swiper.emit('disable');
          }
          setProgress(progress, speed) {
            const swiper = this;
            progress = Math.min(Math.max(progress, 0), 1);
            const min = swiper.minTranslate();
            const max = swiper.maxTranslate();
            const current = (max - min) * progress + min;
            swiper.translateTo(
              current,
              typeof speed === 'undefined' ? 0 : speed,
            );
            swiper.updateActiveIndex();
            swiper.updateSlidesClasses();
          }
          emitContainerClasses() {
            const swiper = this;
            if (!swiper.params._emitClasses || !swiper.el) return;
            const cls = swiper.el.className.split(' ').filter((className) => {
              return (
                className.indexOf('swiper') === 0 ||
                className.indexOf(swiper.params.containerModifierClass) === 0
              );
            });
            swiper.emit('_containerClasses', cls.join(' '));
          }
          getSlideClasses(slideEl) {
            const swiper = this;
            if (swiper.destroyed) return '';
            return slideEl.className
              .split(' ')
              .filter((className) => {
                return (
                  className.indexOf('swiper-slide') === 0 ||
                  className.indexOf(swiper.params.slideClass) === 0
                );
              })
              .join(' ');
          }
          emitSlidesClasses() {
            const swiper = this;
            if (!swiper.params._emitClasses || !swiper.el) return;
            const updates = [];
            swiper.slides.forEach((slideEl) => {
              const classNames = swiper.getSlideClasses(slideEl);
              updates.push({
                slideEl,
                classNames,
              });
              swiper.emit('_slideClass', slideEl, classNames);
            });
            swiper.emit('_slideClasses', updates);
          }
          slidesPerViewDynamic(view, exact) {
            if (view === void 0) {
              view = 'current';
            }
            if (exact === void 0) {
              exact = false;
            }
            const swiper = this;
            const {
              params,
              slides,
              slidesGrid,
              slidesSizesGrid,
              size: swiperSize,
              activeIndex,
            } = swiper;
            let spv = 1;
            if (typeof params.slidesPerView === 'number')
              return params.slidesPerView;
            if (params.centeredSlides) {
              let slideSize = slides[activeIndex]
                ? Math.ceil(slides[activeIndex].swiperSlideSize)
                : 0;
              let breakLoop;
              for (let i = activeIndex + 1; i < slides.length; i += 1) {
                if (slides[i] && !breakLoop) {
                  slideSize += Math.ceil(slides[i].swiperSlideSize);
                  spv += 1;
                  if (slideSize > swiperSize) breakLoop = true;
                }
              }
              for (let i = activeIndex - 1; i >= 0; i -= 1) {
                if (slides[i] && !breakLoop) {
                  slideSize += slides[i].swiperSlideSize;
                  spv += 1;
                  if (slideSize > swiperSize) breakLoop = true;
                }
              }
            } else {
              // eslint-disable-next-line
              if (view === 'current') {
                for (let i = activeIndex + 1; i < slides.length; i += 1) {
                  const slideInView = exact
                    ? slidesGrid[i] +
                        slidesSizesGrid[i] -
                        slidesGrid[activeIndex] <
                      swiperSize
                    : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;
                  if (slideInView) {
                    spv += 1;
                  }
                }
              } else {
                // previous
                for (let i = activeIndex - 1; i >= 0; i -= 1) {
                  const slideInView =
                    slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;
                  if (slideInView) {
                    spv += 1;
                  }
                }
              }
            }
            return spv;
          }
          update() {
            const swiper = this;
            if (!swiper || swiper.destroyed) return;
            const { snapGrid, params } = swiper;
            // Breakpoints
            if (params.breakpoints) {
              swiper.setBreakpoint();
            }
            [...swiper.el.querySelectorAll('[loading="lazy"]')].forEach(
              (imageEl) => {
                if (imageEl.complete) {
                  processLazyPreloader(swiper, imageEl);
                }
              },
            );
            swiper.updateSize();
            swiper.updateSlides();
            swiper.updateProgress();
            swiper.updateSlidesClasses();
            function setTranslate() {
              const translateValue = swiper.rtlTranslate
                ? swiper.translate * -1
                : swiper.translate;
              const newTranslate = Math.min(
                Math.max(translateValue, swiper.maxTranslate()),
                swiper.minTranslate(),
              );
              swiper.setTranslate(newTranslate);
              swiper.updateActiveIndex();
              swiper.updateSlidesClasses();
            }
            let translated;
            if (params.freeMode && params.freeMode.enabled && !params.cssMode) {
              setTranslate();
              if (params.autoHeight) {
                swiper.updateAutoHeight();
              }
            } else {
              if (
                (params.slidesPerView === 'auto' || params.slidesPerView > 1) &&
                swiper.isEnd &&
                !params.centeredSlides
              ) {
                const slides =
                  swiper.virtual && params.virtual.enabled
                    ? swiper.virtual.slides
                    : swiper.slides;
                translated = swiper.slideTo(slides.length - 1, 0, false, true);
              } else {
                translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
              }
              if (!translated) {
                setTranslate();
              }
            }
            if (params.watchOverflow && snapGrid !== swiper.snapGrid) {
              swiper.checkOverflow();
            }
            swiper.emit('update');
          }
          changeDirection(newDirection, needUpdate) {
            if (needUpdate === void 0) {
              needUpdate = true;
            }
            const swiper = this;
            const currentDirection = swiper.params.direction;
            if (!newDirection) {
              // eslint-disable-next-line
              newDirection =
                currentDirection === 'horizontal' ? 'vertical' : 'horizontal';
            }
            if (
              newDirection === currentDirection ||
              (newDirection !== 'horizontal' && newDirection !== 'vertical')
            ) {
              return swiper;
            }
            swiper.el.classList.remove(
              `${swiper.params.containerModifierClass}${currentDirection}`,
            );
            swiper.el.classList.add(
              `${swiper.params.containerModifierClass}${newDirection}`,
            );
            swiper.emitContainerClasses();
            swiper.params.direction = newDirection;
            swiper.slides.forEach((slideEl) => {
              if (newDirection === 'vertical') {
                slideEl.style.width = '';
              } else {
                slideEl.style.height = '';
              }
            });
            swiper.emit('changeDirection');
            if (needUpdate) swiper.update();
            return swiper;
          }
          changeLanguageDirection(direction) {
            const swiper = this;
            if (
              (swiper.rtl && direction === 'rtl') ||
              (!swiper.rtl && direction === 'ltr')
            )
              return;
            swiper.rtl = direction === 'rtl';
            swiper.rtlTranslate =
              swiper.params.direction === 'horizontal' && swiper.rtl;
            if (swiper.rtl) {
              swiper.el.classList.add(
                `${swiper.params.containerModifierClass}rtl`,
              );
              swiper.el.dir = 'rtl';
            } else {
              swiper.el.classList.remove(
                `${swiper.params.containerModifierClass}rtl`,
              );
              swiper.el.dir = 'ltr';
            }
            swiper.update();
          }
          mount(element) {
            const swiper = this;
            if (swiper.mounted) return true;

            // Find el
            let el = element || swiper.params.el;
            if (typeof el === 'string') {
              el = document.querySelector(el);
            }
            if (!el) {
              return false;
            }
            el.swiper = swiper;
            if (
              el.parentNode &&
              el.parentNode.host &&
              el.parentNode.host.nodeName ===
                swiper.params.swiperElementNodeName.toUpperCase()
            ) {
              swiper.isElement = true;
            }
            const getWrapperSelector = () => {
              return `.${(swiper.params.wrapperClass || '').trim().split(' ').join('.')}`;
            };
            const getWrapper = () => {
              if (el && el.shadowRoot && el.shadowRoot.querySelector) {
                const res = el.shadowRoot.querySelector(getWrapperSelector());
                // Children needs to return slot items
                return res;
              }
              return (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(
                el,
                getWrapperSelector(),
              )[0];
            };
            // Find Wrapper
            let wrapperEl = getWrapper();
            if (!wrapperEl && swiper.params.createElements) {
              wrapperEl = (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(
                'div',
                swiper.params.wrapperClass,
              );
              el.append(wrapperEl);
              (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(
                el,
                `.${swiper.params.slideClass}`,
              ).forEach((slideEl) => {
                wrapperEl.append(slideEl);
              });
            }
            Object.assign(swiper, {
              el,
              wrapperEl,
              slidesEl:
                swiper.isElement && !el.parentNode.host.slideSlots
                  ? el.parentNode.host
                  : wrapperEl,
              hostEl: swiper.isElement ? el.parentNode.host : el,
              mounted: true,
              // RTL
              rtl:
                el.dir.toLowerCase() === 'rtl' ||
                (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(
                  el,
                  'direction',
                ) === 'rtl',
              rtlTranslate:
                swiper.params.direction === 'horizontal' &&
                (el.dir.toLowerCase() === 'rtl' ||
                  (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(
                    el,
                    'direction',
                  ) === 'rtl'),
              wrongRTL:
                (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(
                  wrapperEl,
                  'display',
                ) === '-webkit-box',
            });
            return true;
          }
          init(el) {
            const swiper = this;
            if (swiper.initialized) return swiper;
            const mounted = swiper.mount(el);
            if (mounted === false) return swiper;
            swiper.emit('beforeInit');

            // Set breakpoint
            if (swiper.params.breakpoints) {
              swiper.setBreakpoint();
            }

            // Add Classes
            swiper.addClasses();

            // Update size
            swiper.updateSize();

            // Update slides
            swiper.updateSlides();
            if (swiper.params.watchOverflow) {
              swiper.checkOverflow();
            }

            // Set Grab Cursor
            if (swiper.params.grabCursor && swiper.enabled) {
              swiper.setGrabCursor();
            }

            // Slide To Initial Slide
            if (
              swiper.params.loop &&
              swiper.virtual &&
              swiper.params.virtual.enabled
            ) {
              swiper.slideTo(
                swiper.params.initialSlide + swiper.virtual.slidesBefore,
                0,
                swiper.params.runCallbacksOnInit,
                false,
                true,
              );
            } else {
              swiper.slideTo(
                swiper.params.initialSlide,
                0,
                swiper.params.runCallbacksOnInit,
                false,
                true,
              );
            }

            // Create loop
            if (swiper.params.loop) {
              swiper.loopCreate(undefined, true);
            }

            // Attach events
            swiper.attachEvents();
            const lazyElements = [
              ...swiper.el.querySelectorAll('[loading="lazy"]'),
            ];
            if (swiper.isElement) {
              lazyElements.push(
                ...swiper.hostEl.querySelectorAll('[loading="lazy"]'),
              );
            }
            lazyElements.forEach((imageEl) => {
              if (imageEl.complete) {
                processLazyPreloader(swiper, imageEl);
              } else {
                imageEl.addEventListener('load', (e) => {
                  processLazyPreloader(swiper, e.target);
                });
              }
            });
            preload(swiper);

            // Init Flag
            swiper.initialized = true;
            preload(swiper);

            // Emit
            swiper.emit('init');
            swiper.emit('afterInit');
            return swiper;
          }
          destroy(deleteInstance, cleanStyles) {
            if (deleteInstance === void 0) {
              deleteInstance = true;
            }
            if (cleanStyles === void 0) {
              cleanStyles = true;
            }
            const swiper = this;
            const { params, el, wrapperEl, slides } = swiper;
            if (typeof swiper.params === 'undefined' || swiper.destroyed) {
              return null;
            }
            swiper.emit('beforeDestroy');

            // Init Flag
            swiper.initialized = false;

            // Detach events
            swiper.detachEvents();

            // Destroy loop
            if (params.loop) {
              swiper.loopDestroy();
            }

            // Cleanup styles
            if (cleanStyles) {
              swiper.removeClasses();
              if (el && typeof el !== 'string') {
                el.removeAttribute('style');
              }
              if (wrapperEl) {
                wrapperEl.removeAttribute('style');
              }
              if (slides && slides.length) {
                slides.forEach((slideEl) => {
                  slideEl.classList.remove(
                    params.slideVisibleClass,
                    params.slideFullyVisibleClass,
                    params.slideActiveClass,
                    params.slideNextClass,
                    params.slidePrevClass,
                  );
                  slideEl.removeAttribute('style');
                  slideEl.removeAttribute('data-swiper-slide-index');
                });
              }
            }
            swiper.emit('destroy');

            // Detach emitter events
            Object.keys(swiper.eventsListeners).forEach((eventName) => {
              swiper.off(eventName);
            });
            if (deleteInstance !== false) {
              if (swiper.el && typeof swiper.el !== 'string') {
                swiper.el.swiper = null;
              }
              (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.y)(swiper);
            }
            swiper.destroyed = true;
            return null;
          }
          static extendDefaults(newDefaults) {
            (0, _utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(
              extendedDefaults,
              newDefaults,
            );
          }
          static get extendedDefaults() {
            return extendedDefaults;
          }
          static get defaults() {
            return defaults;
          }
          static installModule(mod) {
            if (!Swiper.prototype.__modules__)
              Swiper.prototype.__modules__ = [];
            const modules = Swiper.prototype.__modules__;
            if (typeof mod === 'function' && modules.indexOf(mod) < 0) {
              modules.push(mod);
            }
          }
          static use(module) {
            if (Array.isArray(module)) {
              module.forEach((m) => Swiper.installModule(m));
              return Swiper;
            }
            Swiper.installModule(module);
            return Swiper;
          }
        }
        Object.keys(prototypes).forEach((prototypeGroup) => {
          Object.keys(prototypes[prototypeGroup]).forEach((protoMethod) => {
            Swiper.prototype[protoMethod] =
              prototypes[prototypeGroup][protoMethod];
          });
        });
        Swiper.use([Resize, Observer]);

        /***/
      },

    /***/ './node_modules/swiper/shared/utils.mjs':
      /*!**********************************************!*\
  !*** ./node_modules/swiper/shared/utils.mjs ***!
  \**********************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ a: () => /* binding */ setCSSProperty,
          /* harmony export */ b: () => /* binding */ elementParents,
          /* harmony export */ c: () => /* binding */ createElement,
          /* harmony export */ d: () => /* binding */ elementOffset,
          /* harmony export */ e: () => /* binding */ elementChildren,
          /* harmony export */ f: () => /* binding */ now,
          /* harmony export */ g: () => /* binding */ getSlideTransformEl,
          /* harmony export */ h: () => /* binding */ elementOuterSize,
          /* harmony export */ i: () => /* binding */ elementIndex,
          /* harmony export */ j: () => /* binding */ classesToTokens,
          /* harmony export */ k: () => /* binding */ getTranslate,
          /* harmony export */ l: () => /* binding */ elementTransitionEnd,
          /* harmony export */ m: () => /* binding */ makeElementsArray,
          /* harmony export */ n: () => /* binding */ nextTick,
          /* harmony export */ o: () => /* binding */ isObject,
          /* harmony export */ p: () => /* binding */ getRotateFix,
          /* harmony export */ q: () => /* binding */ elementStyle,
          /* harmony export */ r: () => /* binding */ elementNextAll,
          /* harmony export */ s: () => /* binding */ setInnerHTML,
          /* harmony export */ t: () => /* binding */ elementPrevAll,
          /* harmony export */ u: () => /* binding */ animateCSSModeScroll,
          /* harmony export */ v: () => /* binding */ showWarning,
          /* harmony export */ w: () => /* binding */ elementIsChildOf,
          /* harmony export */ x: () => /* binding */ extend,
          /* harmony export */ y: () => /* binding */ deleteProps,
          /* harmony export */
        });
        /* harmony import */ var _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./ssr-window.esm.mjs */ './node_modules/swiper/shared/ssr-window.esm.mjs',
          );

        function classesToTokens(classes) {
          if (classes === void 0) {
            classes = '';
          }
          return classes
            .trim()
            .split(' ')
            .filter((c) => !!c.trim());
        }

        function deleteProps(obj) {
          const object = obj;
          Object.keys(object).forEach((key) => {
            try {
              object[key] = null;
            } catch (e) {
              // no getter for object
            }
            try {
              delete object[key];
            } catch (e) {
              // something got wrong
            }
          });
        }
        function nextTick(callback, delay) {
          if (delay === void 0) {
            delay = 0;
          }
          return setTimeout(callback, delay);
        }
        function now() {
          return Date.now();
        }
        function getComputedStyle(el) {
          const window = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          let style;
          if (window.getComputedStyle) {
            style = window.getComputedStyle(el, null);
          }
          if (!style && el.currentStyle) {
            style = el.currentStyle;
          }
          if (!style) {
            style = el.style;
          }
          return style;
        }
        function getTranslate(el, axis) {
          if (axis === void 0) {
            axis = 'x';
          }
          const window = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          let matrix;
          let curTransform;
          let transformMatrix;
          const curStyle = getComputedStyle(el);
          if (window.WebKitCSSMatrix) {
            curTransform = curStyle.transform || curStyle.webkitTransform;
            if (curTransform.split(',').length > 6) {
              curTransform = curTransform
                .split(', ')
                .map((a) => a.replace(',', '.'))
                .join(', ');
            }
            // Some old versions of Webkit choke when 'none' is passed; pass
            // empty string instead in this case
            transformMatrix = new window.WebKitCSSMatrix(
              curTransform === 'none' ? '' : curTransform,
            );
          } else {
            transformMatrix =
              curStyle.MozTransform ||
              curStyle.OTransform ||
              curStyle.MsTransform ||
              curStyle.msTransform ||
              curStyle.transform ||
              curStyle
                .getPropertyValue('transform')
                .replace('translate(', 'matrix(1, 0, 0, 1,');
            matrix = transformMatrix.toString().split(',');
          }
          if (axis === 'x') {
            // Latest Chrome and webkits Fix
            if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41;
            // Crazy IE10 Matrix
            else if (matrix.length === 16)
              curTransform = parseFloat(matrix[12]);
            // Normal Browsers
            else curTransform = parseFloat(matrix[4]);
          }
          if (axis === 'y') {
            // Latest Chrome and webkits Fix
            if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42;
            // Crazy IE10 Matrix
            else if (matrix.length === 16)
              curTransform = parseFloat(matrix[13]);
            // Normal Browsers
            else curTransform = parseFloat(matrix[5]);
          }
          return curTransform || 0;
        }
        function isObject(o) {
          return (
            typeof o === 'object' &&
            o !== null &&
            o.constructor &&
            Object.prototype.toString.call(o).slice(8, -1) === 'Object'
          );
        }
        function isNode(node) {
          // eslint-disable-next-line
          if (
            typeof window !== 'undefined' &&
            typeof window.HTMLElement !== 'undefined'
          ) {
            return node instanceof HTMLElement;
          }
          return node && (node.nodeType === 1 || node.nodeType === 11);
        }
        function extend() {
          const to = Object(arguments.length <= 0 ? undefined : arguments[0]);
          const noExtend = ['__proto__', 'constructor', 'prototype'];
          for (let i = 1; i < arguments.length; i += 1) {
            const nextSource =
              i < 0 || arguments.length <= i ? undefined : arguments[i];
            if (
              nextSource !== undefined &&
              nextSource !== null &&
              !isNode(nextSource)
            ) {
              const keysArray = Object.keys(Object(nextSource)).filter(
                (key) => noExtend.indexOf(key) < 0,
              );
              for (
                let nextIndex = 0, len = keysArray.length;
                nextIndex < len;
                nextIndex += 1
              ) {
                const nextKey = keysArray[nextIndex];
                const desc = Object.getOwnPropertyDescriptor(
                  nextSource,
                  nextKey,
                );
                if (desc !== undefined && desc.enumerable) {
                  if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
                    if (nextSource[nextKey].__swiper__) {
                      to[nextKey] = nextSource[nextKey];
                    } else {
                      extend(to[nextKey], nextSource[nextKey]);
                    }
                  } else if (
                    !isObject(to[nextKey]) &&
                    isObject(nextSource[nextKey])
                  ) {
                    to[nextKey] = {};
                    if (nextSource[nextKey].__swiper__) {
                      to[nextKey] = nextSource[nextKey];
                    } else {
                      extend(to[nextKey], nextSource[nextKey]);
                    }
                  } else {
                    to[nextKey] = nextSource[nextKey];
                  }
                }
              }
            }
          }
          return to;
        }
        function setCSSProperty(el, varName, varValue) {
          el.style.setProperty(varName, varValue);
        }
        function animateCSSModeScroll(_ref) {
          let { swiper, targetPosition, side } = _ref;
          const window = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          const startPosition = -swiper.translate;
          let startTime = null;
          let time;
          const duration = swiper.params.speed;
          swiper.wrapperEl.style.scrollSnapType = 'none';
          window.cancelAnimationFrame(swiper.cssModeFrameID);
          const dir = targetPosition > startPosition ? 'next' : 'prev';
          const isOutOfBound = (current, target) => {
            return (
              (dir === 'next' && current >= target) ||
              (dir === 'prev' && current <= target)
            );
          };
          const animate = () => {
            time = new Date().getTime();
            if (startTime === null) {
              startTime = time;
            }
            const progress = Math.max(
              Math.min((time - startTime) / duration, 1),
              0,
            );
            const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;
            let currentPosition =
              startPosition + easeProgress * (targetPosition - startPosition);
            if (isOutOfBound(currentPosition, targetPosition)) {
              currentPosition = targetPosition;
            }
            swiper.wrapperEl.scrollTo({
              [side]: currentPosition,
            });
            if (isOutOfBound(currentPosition, targetPosition)) {
              swiper.wrapperEl.style.overflow = 'hidden';
              swiper.wrapperEl.style.scrollSnapType = '';
              setTimeout(() => {
                swiper.wrapperEl.style.overflow = '';
                swiper.wrapperEl.scrollTo({
                  [side]: currentPosition,
                });
              });
              window.cancelAnimationFrame(swiper.cssModeFrameID);
              return;
            }
            swiper.cssModeFrameID = window.requestAnimationFrame(animate);
          };
          animate();
        }
        function getSlideTransformEl(slideEl) {
          return (
            slideEl.querySelector('.swiper-slide-transform') ||
            (slideEl.shadowRoot &&
              slideEl.shadowRoot.querySelector('.swiper-slide-transform')) ||
            slideEl
          );
        }
        function elementChildren(element, selector) {
          if (selector === void 0) {
            selector = '';
          }
          const window = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          const children = [...element.children];
          if (window.HTMLSlotElement && element instanceof HTMLSlotElement) {
            children.push(...element.assignedElements());
          }
          if (!selector) {
            return children;
          }
          return children.filter((el) => el.matches(selector));
        }
        function elementIsChildOfSlot(el, slot) {
          // Breadth-first search through all parent's children and assigned elements
          const elementsQueue = [slot];
          while (elementsQueue.length > 0) {
            const elementToCheck = elementsQueue.shift();
            if (el === elementToCheck) {
              return true;
            }
            elementsQueue.push(
              ...elementToCheck.children,
              ...(elementToCheck.shadowRoot
                ? elementToCheck.shadowRoot.children
                : []),
              ...(elementToCheck.assignedElements
                ? elementToCheck.assignedElements()
                : []),
            );
          }
        }
        function elementIsChildOf(el, parent) {
          const window = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          let isChild = parent.contains(el);
          if (
            !isChild &&
            window.HTMLSlotElement &&
            parent instanceof HTMLSlotElement
          ) {
            const children = [...parent.assignedElements()];
            isChild = children.includes(el);
            if (!isChild) {
              isChild = elementIsChildOfSlot(el, parent);
            }
          }
          return isChild;
        }
        function showWarning(text) {
          try {
            console.warn(text);
            return;
          } catch (err) {
            // err
          }
        }
        function createElement(tag, classes) {
          if (classes === void 0) {
            classes = [];
          }
          const el = document.createElement(tag);
          el.classList.add(
            ...(Array.isArray(classes) ? classes : classesToTokens(classes)),
          );
          return el;
        }
        function elementOffset(el) {
          const window = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          const document = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();
          const box = el.getBoundingClientRect();
          const body = document.body;
          const clientTop = el.clientTop || body.clientTop || 0;
          const clientLeft = el.clientLeft || body.clientLeft || 0;
          const scrollTop = el === window ? window.scrollY : el.scrollTop;
          const scrollLeft = el === window ? window.scrollX : el.scrollLeft;
          return {
            top: box.top + scrollTop - clientTop,
            left: box.left + scrollLeft - clientLeft,
          };
        }
        function elementPrevAll(el, selector) {
          const prevEls = [];
          while (el.previousElementSibling) {
            const prev = el.previousElementSibling; // eslint-disable-line
            if (selector) {
              if (prev.matches(selector)) prevEls.push(prev);
            } else prevEls.push(prev);
            el = prev;
          }
          return prevEls;
        }
        function elementNextAll(el, selector) {
          const nextEls = [];
          while (el.nextElementSibling) {
            const next = el.nextElementSibling; // eslint-disable-line
            if (selector) {
              if (next.matches(selector)) nextEls.push(next);
            } else nextEls.push(next);
            el = next;
          }
          return nextEls;
        }
        function elementStyle(el, prop) {
          const window = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          return window.getComputedStyle(el, null).getPropertyValue(prop);
        }
        function elementIndex(el) {
          let child = el;
          let i;
          if (child) {
            i = 0;
            // eslint-disable-next-line
            while ((child = child.previousSibling) !== null) {
              if (child.nodeType === 1) i += 1;
            }
            return i;
          }
          return undefined;
        }
        function elementParents(el, selector) {
          const parents = []; // eslint-disable-line
          let parent = el.parentElement; // eslint-disable-line
          while (parent) {
            if (selector) {
              if (parent.matches(selector)) parents.push(parent);
            } else {
              parents.push(parent);
            }
            parent = parent.parentElement;
          }
          return parents;
        }
        function elementTransitionEnd(el, callback) {
          function fireCallBack(e) {
            if (e.target !== el) return;
            callback.call(el, e);
            el.removeEventListener('transitionend', fireCallBack);
          }
          if (callback) {
            el.addEventListener('transitionend', fireCallBack);
          }
        }
        function elementOuterSize(el, size, includeMargins) {
          const window = (0,
          _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();
          if (includeMargins) {
            return (
              el[size === 'width' ? 'offsetWidth' : 'offsetHeight'] +
              parseFloat(
                window
                  .getComputedStyle(el, null)
                  .getPropertyValue(
                    size === 'width' ? 'margin-right' : 'margin-top',
                  ),
              ) +
              parseFloat(
                window
                  .getComputedStyle(el, null)
                  .getPropertyValue(
                    size === 'width' ? 'margin-left' : 'margin-bottom',
                  ),
              )
            );
          }
          return el.offsetWidth;
        }
        function makeElementsArray(el) {
          return (Array.isArray(el) ? el : [el]).filter((e) => !!e);
        }
        function getRotateFix(swiper) {
          return (v) => {
            if (
              Math.abs(v) > 0 &&
              swiper.browser &&
              swiper.browser.need3dFix &&
              Math.abs(v) % 90 === 0
            ) {
              return v + 0.001;
            }
            return v;
          };
        }
        function setInnerHTML(el, html) {
          if (html === void 0) {
            html = '';
          }
          if (typeof trustedTypes !== 'undefined') {
            el.innerHTML = trustedTypes
              .createPolicy('html', {
                createHTML: (s) => s,
              })
              .createHTML(html);
          } else {
            el.innerHTML = html;
          }
        }

        /***/
      },

    /***/ './node_modules/swiper/swiper.css':
      /*!****************************************!*\
  !*** ./node_modules/swiper/swiper.css ***!
  \****************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! !../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ './node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
          );
        /* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default =
          /*#__PURE__*/ __webpack_require__.n(
            _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__,
          );
        /* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! !../style-loader/dist/runtime/styleDomAPI.js */ './node_modules/style-loader/dist/runtime/styleDomAPI.js',
          );
        /* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default =
          /*#__PURE__*/ __webpack_require__.n(
            _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__,
          );
        /* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! !../style-loader/dist/runtime/insertBySelector.js */ './node_modules/style-loader/dist/runtime/insertBySelector.js',
          );
        /* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default =
          /*#__PURE__*/ __webpack_require__.n(
            _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__,
          );
        /* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! !../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ './node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
          );
        /* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default =
          /*#__PURE__*/ __webpack_require__.n(
            _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__,
          );
        /* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! !../style-loader/dist/runtime/insertStyleElement.js */ './node_modules/style-loader/dist/runtime/insertStyleElement.js',
          );
        /* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default =
          /*#__PURE__*/ __webpack_require__.n(
            _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__,
          );
        /* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! !../style-loader/dist/runtime/styleTagTransform.js */ './node_modules/style-loader/dist/runtime/styleTagTransform.js',
          );
        /* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default =
          /*#__PURE__*/ __webpack_require__.n(
            _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__,
          );
        /* harmony import */ var _css_loader_dist_cjs_js_swiper_css__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! !!../css-loader/dist/cjs.js!./swiper.css */ './node_modules/css-loader/dist/cjs.js!./node_modules/swiper/swiper.css',
          );

        var options = {};

        options.styleTagTransform =
          _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default();
        options.setAttributes =
          _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default();
        options.insert =
          _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(
            null,
            'head',
          );
        options.domAPI =
          _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default();
        options.insertStyleElement =
          _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default();

        var update =
          _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(
            _css_loader_dist_cjs_js_swiper_css__WEBPACK_IMPORTED_MODULE_6__[
              'default'
            ],
            options,
          );

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          _css_loader_dist_cjs_js_swiper_css__WEBPACK_IMPORTED_MODULE_6__[
            'default'
          ] &&
          _css_loader_dist_cjs_js_swiper_css__WEBPACK_IMPORTED_MODULE_6__[
            'default'
          ].locals
            ? _css_loader_dist_cjs_js_swiper_css__WEBPACK_IMPORTED_MODULE_6__[
                'default'
              ].locals
            : undefined;

        /***/
      },

    /***/ './node_modules/swiper/swiper.mjs':
      /*!****************************************!*\
  !*** ./node_modules/swiper/swiper.mjs ***!
  \****************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ Swiper: () =>
            /* reexport safe */ _shared_swiper_core_mjs__WEBPACK_IMPORTED_MODULE_0__.S,
          /* harmony export */ default: () =>
            /* reexport safe */ _shared_swiper_core_mjs__WEBPACK_IMPORTED_MODULE_0__.S,
          /* harmony export */
        });
        /* harmony import */ var _shared_swiper_core_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./shared/swiper-core.mjs */ './node_modules/swiper/shared/swiper-core.mjs',
          );
        /**
         * Swiper 11.2.10
         * Most modern mobile touch slider and framework with hardware accelerated transitions
         * https://swiperjs.com
         *
         * Copyright 2014-2025 Vladimir Kharlampidi
         *
         * Released under the MIT License
         *
         * Released on: June 28, 2025
         */

        /***/
      },

    /***/ './src/styles.css':
      /*!************************!*\
  !*** ./src/styles.css ***!
  \************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__,
      ) => {
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ './node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
          );
        /* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default =
          /*#__PURE__*/ __webpack_require__.n(
            _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__,
          );
        /* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ './node_modules/style-loader/dist/runtime/styleDomAPI.js',
          );
        /* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default =
          /*#__PURE__*/ __webpack_require__.n(
            _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__,
          );
        /* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ './node_modules/style-loader/dist/runtime/insertBySelector.js',
          );
        /* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default =
          /*#__PURE__*/ __webpack_require__.n(
            _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__,
          );
        /* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ './node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
          );
        /* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default =
          /*#__PURE__*/ __webpack_require__.n(
            _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__,
          );
        /* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ './node_modules/style-loader/dist/runtime/insertStyleElement.js',
          );
        /* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default =
          /*#__PURE__*/ __webpack_require__.n(
            _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__,
          );
        /* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ './node_modules/style-loader/dist/runtime/styleTagTransform.js',
          );
        /* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default =
          /*#__PURE__*/ __webpack_require__.n(
            _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__,
          );
        /* harmony import */ var _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! !!../node_modules/css-loader/dist/cjs.js!./styles.css */ './node_modules/css-loader/dist/cjs.js!./src/styles.css',
          );

        var options = {};

        options.styleTagTransform =
          _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default();
        options.setAttributes =
          _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default();
        options.insert =
          _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(
            null,
            'head',
          );
        options.domAPI =
          _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default();
        options.insertStyleElement =
          _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default();

        var update =
          _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(
            _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[
              'default'
            ],
            options,
          );

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[
            'default'
          ] &&
          _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[
            'default'
          ].locals
            ? _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[
                'default'
              ].locals
            : undefined;

        /***/
      },

    /***/ 'data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA':

  !*** data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA ***!

      /***/ (module) => {
        module.exports =
          'data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA';

        /***/
      },

    /******/
  };
  /************************************************************************/
  /******/ // The module cache
  /******/ var __webpack_module_cache__ = {};
  /******/
  /******/ // The require function
  /******/ function __webpack_require__(moduleId) {
    /******/ // Check if module is in cache
    /******/ var cachedModule = __webpack_module_cache__[moduleId];
    /******/ if (cachedModule !== undefined) {
      /******/ return cachedModule.exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/ var module = (__webpack_module_cache__[moduleId] = {
      /******/ id: moduleId,
      /******/ // no module.loaded needed
      /******/ exports: {},
      /******/
    });
    /******/
    /******/ // Execute the module function
    /******/ __webpack_modules__[moduleId](
      module,
      module.exports,
      __webpack_require__,
    );
    /******/
    /******/ // Return the exports of the module
    /******/ return module.exports;
    /******/
  }
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/ __webpack_require__.m = __webpack_modules__;
  /******/
  /************************************************************************/
  /******/ /* webpack/runtime/compat get default export */
  /******/ (() => {
    /******/ // getDefaultExport function for compatibility with non-harmony modules
    /******/ __webpack_require__.n = (module) => {
      /******/ var getter =
        module && module.__esModule
          ? /******/ () => module['default']
          : /******/ () => module;
      /******/ __webpack_require__.d(getter, { a: getter });
      /******/ return getter;
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/define property getters */
  /******/ (() => {
    /******/ // define getter functions for harmony exports
    /******/ __webpack_require__.d = (exports, definition) => {
      /******/ for (var key in definition) {
        /******/ if (
          __webpack_require__.o(definition, key) &&
          !__webpack_require__.o(exports, key)
        ) {
          /******/ Object.defineProperty(exports, key, {
            enumerable: true,
            get: definition[key],
          });
          /******/
        }
        /******/
      }
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/hasOwnProperty shorthand */
  /******/ (() => {
    /******/ __webpack_require__.o = (obj, prop) =>
      Object.prototype.hasOwnProperty.call(obj, prop);
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/make namespace object */
  /******/ (() => {
    /******/ // define __esModule on exports
    /******/ __webpack_require__.r = (exports) => {
      /******/ if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
        /******/ Object.defineProperty(exports, Symbol.toStringTag, {
          value: 'Module',
        });
        /******/
      }
      /******/ Object.defineProperty(exports, '__esModule', { value: true });
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/jsonp chunk loading */
  /******/ (() => {
    /******/ __webpack_require__.b = document.baseURI || self.location.href;
    /******/
    /******/ // object to store loaded and loading chunks
    /******/ // undefined = chunk not loaded, null = chunk preloaded/prefetched
    /******/ // [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
    /******/ var installedChunks = {
      /******/ app: 0,
      /******/
    };
    /******/
    /******/ // no chunk on demand loading
    /******/
    /******/ // no prefetching
    /******/
    /******/ // no preloaded
    /******/
    /******/ // no HMR
    /******/
    /******/ // no HMR manifest
    /******/
    /******/ // no on chunks loaded
    /******/
    /******/ // no jsonp function
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/nonce */
  /******/ (() => {
    /******/ __webpack_require__.nc = undefined;
    /******/
  })();
  /******/
  /************************************************************************/
  var __webpack_exports__ = {};
  // This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
  (() => {
    /*!********************!*\
  !*** ./src/app.js ***!
  \********************/
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var swiper__WEBPACK_IMPORTED_MODULE_0__ =
      __webpack_require__(/*! swiper */ './node_modules/swiper/swiper.mjs');
    /* harmony import */ var swiper_modules__WEBPACK_IMPORTED_MODULE_1__ =
      __webpack_require__(
        /*! swiper/modules */ './node_modules/swiper/modules/index.mjs',
      );
    /* harmony import */ var swiper_css__WEBPACK_IMPORTED_MODULE_2__ =
      __webpack_require__(/*! swiper/css */ './node_modules/swiper/swiper.css');
    /* harmony import */ var swiper_css_navigation__WEBPACK_IMPORTED_MODULE_3__ =
      __webpack_require__(
        /*! swiper/css/navigation */ './node_modules/swiper/modules/navigation.css',
      );
    /* harmony import */ var swiper_css_pagination__WEBPACK_IMPORTED_MODULE_4__ =
      __webpack_require__(
        /*! swiper/css/pagination */ './node_modules/swiper/modules/pagination.css',
      );
    /* harmony import */ var _styles_css__WEBPACK_IMPORTED_MODULE_5__ =
      __webpack_require__(/*! ./styles.css */ './src/styles.css');
    /* harmony import */ var animejs__WEBPACK_IMPORTED_MODULE_6__ =
      __webpack_require__(
        /*! animejs */ './node_modules/animejs/lib/anime.esm.js',
      );

    document.addEventListener('DOMContentLoaded', () => {
      console.log('app.js: DOMContentLoaded - 開始');

      const swiper = new swiper__WEBPACK_IMPORTED_MODULE_0__['default'](
        '.swiper',
        {
          modules: [
            swiper_modules__WEBPACK_IMPORTED_MODULE_1__.Navigation,
            swiper_modules__WEBPACK_IMPORTED_MODULE_1__.Pagination,
          ],
          direction: 'horizontal',
          loop: true,
          slidesPerView: 1,
          spaceBetween: 30,
          centeredSlides: true,
          pagination: {
            el: '.swiper-pagination',
            clickable: true,
          },
          navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
          },
          speed: 500,
          grabCursor: true,
        },
      );
      console.log('Swiper initialized:', swiper);

      const handleSlideChange = () => {
        const realIndex = swiper.realIndex;
        console.log('実スライドインデックス:', realIndex);

        const targets = ['about', 'hobby', 'works'];
        const target = targets[realIndex];
        console.log('アクティブスライドの data-target:', target);

        document.querySelectorAll('.content').forEach((content) => {
          content.classList.remove('active');
        });
        const activeContent = document.getElementById(`content-${target}`);
        if (activeContent) {
          activeContent.classList.add('active');

          const imagesToAnimate =
            activeContent.querySelectorAll('.content-img');
          animejs__WEBPACK_IMPORTED_MODULE_6__.waapi.animate(imagesToAnimate, {
            x: [0, -30, 0],
            ease: (0, animejs__WEBPACK_IMPORTED_MODULE_6__.createSpring)({
              stiffness: 150,
              damping: 5,
            }),
            delay: (0, animejs__WEBPACK_IMPORTED_MODULE_6__.stagger)(75),
            loop: true,
          });
        }

        const activeSlide = swiper.slides[swiper.activeIndex];
        const swiperImagesToAnimate = activeSlide.querySelectorAll(
          '.portfolio-card img',
        );
        animejs__WEBPACK_IMPORTED_MODULE_6__.waapi.animate(
          swiperImagesToAnimate,
          {
            y: [0, -30, 0],
            ease: (0, animejs__WEBPACK_IMPORTED_MODULE_6__.createSpring)({
              stiffness: 150,
              damping: 5,
            }),
            delay: (0, animejs__WEBPACK_IMPORTED_MODULE_6__.stagger)(75),
            loop: true,
          },
        );
      };

      handleSlideChange();

      swiper.on('slideChange', handleSlideChange);
    });
  })();

  /******/
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
